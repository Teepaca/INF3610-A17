// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel_filter,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.147000,HLS_SYN_LAT=4180349,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=3989,HLS_SYN_LUT=3049}" *)

module sobel_filter (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY,
        m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY,
        m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST,
        m_axi_gmem2_WID,
        m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST,
        m_axi_gmem2_RID,
        m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID,
        m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP,
        m_axi_gmem2_BID,
        m_axi_gmem2_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_pp0_stage0 = 15'd4096;
parameter    ap_ST_fsm_pp0_stage1 = 15'd8192;
parameter    ap_ST_fsm_state33 = 15'd16384;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM2_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM2_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM2_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM2_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_USER_VALUE = 0;
parameter    C_M_AXI_GMEM2_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM2_CACHE_VALUE = 3;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM2_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output   m_axi_gmem2_AWVALID;
input   m_axi_gmem2_AWREADY;
output  [C_M_AXI_GMEM2_ADDR_WIDTH - 1:0] m_axi_gmem2_AWADDR;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_AWID;
output  [7:0] m_axi_gmem2_AWLEN;
output  [2:0] m_axi_gmem2_AWSIZE;
output  [1:0] m_axi_gmem2_AWBURST;
output  [1:0] m_axi_gmem2_AWLOCK;
output  [3:0] m_axi_gmem2_AWCACHE;
output  [2:0] m_axi_gmem2_AWPROT;
output  [3:0] m_axi_gmem2_AWQOS;
output  [3:0] m_axi_gmem2_AWREGION;
output  [C_M_AXI_GMEM2_AWUSER_WIDTH - 1:0] m_axi_gmem2_AWUSER;
output   m_axi_gmem2_WVALID;
input   m_axi_gmem2_WREADY;
output  [C_M_AXI_GMEM2_DATA_WIDTH - 1:0] m_axi_gmem2_WDATA;
output  [C_M_AXI_GMEM2_WSTRB_WIDTH - 1:0] m_axi_gmem2_WSTRB;
output   m_axi_gmem2_WLAST;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_WID;
output  [C_M_AXI_GMEM2_WUSER_WIDTH - 1:0] m_axi_gmem2_WUSER;
output   m_axi_gmem2_ARVALID;
input   m_axi_gmem2_ARREADY;
output  [C_M_AXI_GMEM2_ADDR_WIDTH - 1:0] m_axi_gmem2_ARADDR;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_ARID;
output  [7:0] m_axi_gmem2_ARLEN;
output  [2:0] m_axi_gmem2_ARSIZE;
output  [1:0] m_axi_gmem2_ARBURST;
output  [1:0] m_axi_gmem2_ARLOCK;
output  [3:0] m_axi_gmem2_ARCACHE;
output  [2:0] m_axi_gmem2_ARPROT;
output  [3:0] m_axi_gmem2_ARQOS;
output  [3:0] m_axi_gmem2_ARREGION;
output  [C_M_AXI_GMEM2_ARUSER_WIDTH - 1:0] m_axi_gmem2_ARUSER;
input   m_axi_gmem2_RVALID;
output   m_axi_gmem2_RREADY;
input  [C_M_AXI_GMEM2_DATA_WIDTH - 1:0] m_axi_gmem2_RDATA;
input   m_axi_gmem2_RLAST;
input  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_RID;
input  [C_M_AXI_GMEM2_RUSER_WIDTH - 1:0] m_axi_gmem2_RUSER;
input  [1:0] m_axi_gmem2_RRESP;
input   m_axi_gmem2_BVALID;
output   m_axi_gmem2_BREADY;
input  [1:0] m_axi_gmem2_BRESP;
input  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_BID;
input  [C_M_AXI_GMEM2_BUSER_WIDTH - 1:0] m_axi_gmem2_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] inter_pix;
wire   [31:0] out_pix;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_2_fu_485_p2;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1_flag00000000;
reg   [0:0] tmp_8_reg_1124;
reg   [0:0] tmp_46_reg_1134;
reg   [0:0] tmp_49_reg_1138;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] ap_reg_pp0_iter3_tmp_46_reg_1134;
reg   [0:0] ap_reg_pp0_iter3_tmp_49_reg_1138;
reg    gmem2_blk_n_AW;
reg    ap_enable_reg_pp0_iter6;
reg   [0:0] ap_reg_pp0_iter6_tmp_46_reg_1134;
reg   [0:0] ap_reg_pp0_iter6_tmp_49_reg_1138;
reg    gmem2_blk_n_W;
reg    ap_enable_reg_pp0_iter7;
reg    gmem2_blk_n_B;
reg    ap_enable_reg_pp0_iter9;
reg   [0:0] ap_reg_pp0_iter9_tmp_46_reg_1134;
reg   [0:0] ap_reg_pp0_iter9_tmp_49_reg_1138;
wire    gmem_AWREADY;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [7:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg    gmem2_AWVALID;
wire    gmem2_AWREADY;
reg    gmem2_WVALID;
wire    gmem2_WREADY;
reg   [31:0] gmem2_WDATA;
wire    gmem2_ARREADY;
wire    gmem2_RVALID;
wire   [31:0] gmem2_RDATA;
wire    gmem2_RLAST;
wire   [0:0] gmem2_RID;
wire   [0:0] gmem2_RUSER;
wire   [1:0] gmem2_RRESP;
wire    gmem2_BVALID;
reg    gmem2_BREADY;
wire   [1:0] gmem2_BRESP;
wire   [0:0] gmem2_BID;
wire   [0:0] gmem2_BUSER;
reg   [10:0] row_assign_reg_368;
reg   [7:0] reg_399;
reg    ap_block_state10;
wire    ap_block_state13_pp0_stage0_iter0;
wire    ap_block_state15_pp0_stage0_iter1;
wire    ap_block_state17_pp0_stage0_iter2;
wire    ap_block_state19_pp0_stage0_iter3;
reg    ap_predicate_op173_read_state21;
reg    ap_block_state21_pp0_stage0_iter4;
wire    ap_block_state23_pp0_stage0_iter5;
wire    ap_block_state25_pp0_stage0_iter6;
wire    ap_block_state27_pp0_stage0_iter7;
reg    ap_sig_ioackin_gmem2_WREADY;
reg    ap_predicate_op255_write_state27;
reg    ap_predicate_op256_write_state27;
reg    ap_block_state27_io;
wire    ap_block_state29_pp0_stage0_iter8;
wire    ap_block_state31_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_flag00011001;
reg   [31:0] inter_pix_read_reg_1009;
wire   [31:0] tmp_s_fu_417_p1;
reg   [31:0] tmp_s_reg_1015;
wire   [1:0] tmp_6_fu_457_p2;
reg   [1:0] tmp_6_reg_1023;
wire    ap_CS_fsm_state2;
reg   [31:0] gmem_addr_reg_1028;
wire   [0:0] tmp_fu_451_p2;
wire   [10:0] i_1_fu_491_p2;
reg   [10:0] i_1_reg_1037;
reg   [10:0] lineBuffer_0_addr_reg_1042;
reg   [10:0] lineBuffer_1_addr_reg_1047;
reg   [10:0] lineBuffer_2_addr_reg_1052;
wire   [31:0] tmp_37_fu_509_p2;
reg   [31:0] tmp_37_reg_1057;
wire    ap_CS_fsm_state12;
wire  signed [23:0] tmp_41_cast_fu_545_p1;
reg  signed [23:0] tmp_41_cast_reg_1062;
wire   [0:0] tmp_1_fu_549_p2;
wire   [10:0] i_2_fu_555_p2;
reg   [10:0] i_2_reg_1071;
wire   [0:0] grp_fu_393_p2;
reg   [0:0] or_cond_reg_1076;
wire   [1:0] tmp_41_fu_561_p1;
reg   [1:0] tmp_41_reg_1081;
wire   [1:0] tmp_19_0_t_fu_565_p2;
reg   [1:0] tmp_19_0_t_reg_1085;
wire   [1:0] tmp_19_1_t_fu_571_p2;
reg   [1:0] tmp_19_1_t_reg_1092;
wire   [1:0] tmp_19_2_t_fu_577_p2;
reg   [1:0] tmp_19_2_t_reg_1098;
wire   [31:0] row_assign_cast5_fu_583_p1;
reg   [31:0] row_assign_cast5_reg_1105;
reg   [31:0] ap_reg_pp0_iter1_row_assign_cast5_reg_1105;
reg   [31:0] ap_reg_pp0_iter2_row_assign_cast5_reg_1105;
reg   [31:0] ap_reg_pp0_iter3_row_assign_cast5_reg_1105;
reg   [31:0] gmem_addr_1_reg_1113;
reg   [31:0] gmem2_addr_reg_1119;
reg   [31:0] ap_reg_pp0_iter1_gmem2_addr_reg_1119;
reg   [31:0] ap_reg_pp0_iter2_gmem2_addr_reg_1119;
reg   [31:0] ap_reg_pp0_iter3_gmem2_addr_reg_1119;
reg   [31:0] ap_reg_pp0_iter4_gmem2_addr_reg_1119;
reg   [31:0] ap_reg_pp0_iter5_gmem2_addr_reg_1119;
reg   [31:0] ap_reg_pp0_iter6_gmem2_addr_reg_1119;
wire   [0:0] tmp_8_fu_627_p2;
wire   [10:0] j_fu_633_p2;
reg   [10:0] j_reg_1128;
reg   [10:0] ap_reg_pp0_iter1_j_reg_1128;
reg   [10:0] ap_reg_pp0_iter2_j_reg_1128;
reg   [10:0] ap_reg_pp0_iter3_j_reg_1128;
reg   [0:0] ap_reg_pp0_iter1_tmp_46_reg_1134;
reg   [0:0] ap_reg_pp0_iter2_tmp_46_reg_1134;
reg   [0:0] ap_reg_pp0_iter4_tmp_46_reg_1134;
reg   [0:0] ap_reg_pp0_iter5_tmp_46_reg_1134;
reg   [0:0] ap_reg_pp0_iter7_tmp_46_reg_1134;
reg   [0:0] ap_reg_pp0_iter8_tmp_46_reg_1134;
wire   [0:0] tmp_49_fu_651_p2;
reg   [0:0] ap_reg_pp0_iter1_tmp_49_reg_1138;
reg   [0:0] ap_reg_pp0_iter2_tmp_49_reg_1138;
reg   [0:0] ap_reg_pp0_iter4_tmp_49_reg_1138;
reg   [0:0] ap_reg_pp0_iter5_tmp_49_reg_1138;
reg   [0:0] ap_reg_pp0_iter7_tmp_49_reg_1138;
reg   [0:0] ap_reg_pp0_iter8_tmp_49_reg_1138;
wire   [10:0] tmp_10_fu_657_p2;
reg   [10:0] tmp_10_reg_1142;
reg   [10:0] ap_reg_pp0_iter1_tmp_10_reg_1142;
reg   [10:0] ap_reg_pp0_iter2_tmp_10_reg_1142;
reg   [10:0] ap_reg_pp0_iter3_tmp_10_reg_1142;
reg   [10:0] ap_reg_pp0_iter4_tmp_10_reg_1142;
reg   [10:0] lineBuffer_0_addr_2_reg_1147;
reg   [10:0] lineBuffer_1_addr_2_reg_1152;
reg   [10:0] lineBuffer_2_addr_2_reg_1157;
reg   [10:0] lineBuffer_3_addr_1_reg_1162;
wire    ap_block_state14_pp0_stage1_iter0;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_predicate_op149_readreq_state14;
reg    ap_block_state14_io;
wire    ap_block_state16_pp0_stage1_iter1;
wire    ap_block_state18_pp0_stage1_iter2;
wire    ap_block_state20_pp0_stage1_iter3;
wire    ap_block_state22_pp0_stage1_iter4;
wire    ap_block_state24_pp0_stage1_iter5;
wire    ap_block_state26_pp0_stage1_iter6;
reg    ap_sig_ioackin_gmem2_AWREADY;
reg    ap_predicate_op252_writereq_state26;
reg    ap_predicate_op253_writereq_state26;
reg    ap_block_state26_io;
wire    ap_block_state28_pp0_stage1_iter7;
wire    ap_block_state30_pp0_stage1_iter8;
reg    ap_predicate_op265_writeresp_state32;
reg    ap_predicate_op266_writeresp_state32;
reg    ap_block_state32_pp0_stage1_iter9;
reg    ap_block_pp0_stage1_flag00011001;
wire   [7:0] tmp_13_fu_677_p6;
reg   [7:0] tmp_13_reg_1208;
wire   [7:0] lineBuffer_0_q1;
reg   [7:0] lineBuffer_0_load_2_reg_1213;
wire   [7:0] lineBuffer_1_q1;
reg   [7:0] lineBuffer_1_load_2_reg_1220;
wire   [7:0] lineBuffer_2_q1;
reg   [7:0] lineBuffer_2_load_2_reg_1227;
wire   [7:0] lineBuffer_3_q1;
reg   [7:0] lineBuffer_3_load_2_reg_1234;
wire   [7:0] tmp_21_fu_690_p6;
reg   [7:0] tmp_21_reg_1241;
wire   [8:0] x_weight_0_2_fu_733_p2;
reg   [8:0] x_weight_0_2_reg_1246;
wire   [7:0] tmp_17_fu_739_p6;
reg   [7:0] tmp_17_reg_1251;
wire   [7:0] tmp_18_fu_752_p6;
reg   [7:0] tmp_18_reg_1256;
wire   [8:0] tmp2_fu_761_p2;
reg   [8:0] tmp2_reg_1261;
wire   [7:0] tmp_19_fu_767_p6;
reg   [7:0] tmp_19_reg_1266;
wire   [7:0] tmp_22_fu_780_p6;
reg   [7:0] tmp_22_reg_1271;
wire   [10:0] x_weight_2_2_fu_889_p2;
reg   [10:0] x_weight_2_2_reg_1277;
wire   [10:0] y_weight_2_2_fu_895_p2;
reg   [10:0] y_weight_2_2_reg_1282;
wire   [7:0] tmp_25_fu_901_p2;
reg   [7:0] tmp_25_reg_1287;
wire   [7:0] tmp_51_fu_906_p1;
reg   [7:0] tmp_51_reg_1293;
wire   [7:0] tmp_15_fu_944_p2;
reg   [7:0] tmp_15_reg_1299;
wire   [7:0] edge_val_1_i_fu_979_p3;
reg   [7:0] edge_val_1_i_reg_1306;
wire   [31:0] lastLine_2_fu_1002_p3;
wire    ap_CS_fsm_state33;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state13;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_flag00011011;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter8;
reg   [10:0] lineBuffer_0_address0;
reg    lineBuffer_0_ce0;
reg    lineBuffer_0_we0;
wire   [7:0] lineBuffer_0_q0;
reg   [10:0] lineBuffer_0_address1;
reg    lineBuffer_0_ce1;
reg   [10:0] lineBuffer_1_address0;
reg    lineBuffer_1_ce0;
reg    lineBuffer_1_we0;
wire   [7:0] lineBuffer_1_q0;
reg   [10:0] lineBuffer_1_address1;
reg    lineBuffer_1_ce1;
reg   [10:0] lineBuffer_2_address0;
reg    lineBuffer_2_ce0;
reg    lineBuffer_2_we0;
wire   [7:0] lineBuffer_2_q0;
reg   [10:0] lineBuffer_2_address1;
reg    lineBuffer_2_ce1;
reg   [10:0] lineBuffer_3_address0;
reg    lineBuffer_3_ce0;
wire   [7:0] lineBuffer_3_q0;
reg   [10:0] lineBuffer_3_address1;
reg    lineBuffer_3_ce1;
reg    lineBuffer_3_we1;
reg   [1:0] lastLine_reg_321;
reg   [10:0] i_reg_333;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
reg   [31:0] lastLine_1_reg_344;
wire   [10:0] i1_phi_fu_360_p4;
reg   [10:0] i1_reg_356;
reg   [10:0] row_assign_phi_fu_372_p4;
wire   [31:0] i_cast7_fu_478_p1;
wire   [31:0] tmp_28_0_2_cast_fu_663_p1;
wire   [31:0] tmp_281_cast_fu_670_p1;
wire   [31:0] tmp_34_fu_467_p2;
wire   [31:0] inter_pix2_sum1_fu_596_p2;
wire   [31:0] out_pix4_sum_fu_616_p2;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_block_pp0_stage1_flag00001001;
reg    ap_reg_ioackin_gmem2_AWREADY;
reg    ap_reg_ioackin_gmem2_WREADY;
reg    ap_block_pp0_stage0_flag00001001;
wire   [31:0] tmp_26_fu_987_p5;
reg   [10:0] grp_fu_379_p0;
reg   [10:0] grp_fu_386_p0;
wire   [0:0] grp_fu_379_p2;
wire   [0:0] grp_fu_386_p2;
wire   [29:0] out_pix3_fu_407_p4;
wire   [12:0] tmp_23_fu_421_p3;
wire   [8:0] tmp_24_fu_433_p3;
wire   [13:0] p_shl5_cast_fu_429_p1;
wire   [13:0] p_shl6_cast_fu_441_p1;
wire   [13:0] tmp_29_fu_445_p2;
wire  signed [31:0] tmp_33_fu_463_p1;
wire   [31:0] tmp_35_fu_497_p2;
wire   [31:0] tmp_36_fu_503_p2;
wire   [21:0] tmp_38_fu_515_p3;
wire   [17:0] tmp_39_fu_527_p3;
wire   [22:0] p_shl7_cast_fu_523_p1;
wire   [22:0] p_shl8_cast_fu_535_p1;
wire   [22:0] tmp_40_fu_539_p2;
wire   [31:0] tmp_42_fu_591_p2;
wire   [23:0] row_assign_cast5_cas_fu_587_p1;
wire   [23:0] tmp_43_fu_607_p2;
wire  signed [31:0] tmp_44_cast_fu_612_p1;
wire   [0:0] tmp_48_fu_645_p2;
wire   [0:0] tmp_47_fu_639_p2;
wire   [7:0] tmp_11_fu_703_p6;
wire   [7:0] tmp_14_fu_720_p6;
wire   [8:0] tmp_29_0_2_cast_fu_729_p1;
wire   [8:0] tmp_291_cast_fu_716_p1;
wire   [8:0] tmp_33_0_1_fu_789_p3;
wire   [8:0] p_shl1_fu_803_p3;
wire  signed [10:0] x_weight_0_2_cast_fu_800_p1;
wire   [10:0] p_shl1_cast_fu_810_p1;
wire   [8:0] tmp_31_1_2_fu_820_p3;
wire   [10:0] tmp_31_1_2_cast_fu_827_p1;
wire   [10:0] x_weight_1_1_fu_814_p2;
wire   [9:0] tmp_33_0_1_cast_fu_796_p1;
wire   [9:0] tmp2_cast_fu_837_p1;
wire   [9:0] y_weight_1_2_fu_840_p2;
wire   [10:0] x_weight_1_2_fu_831_p2;
wire   [10:0] tmp_29_2_cast_fu_850_p1;
wire   [10:0] y_weight_1_2_cast_fu_846_p1;
wire   [8:0] p_shl_fu_865_p3;
wire   [10:0] y_weight_2_fu_859_p2;
wire   [10:0] p_shl_cast_fu_872_p1;
wire   [10:0] x_weight_2_fu_853_p2;
wire   [10:0] tmp_29_2_2_cast_fu_882_p1;
wire   [10:0] y_weight_2_1_fu_876_p2;
wire   [7:0] tmp_50_fu_885_p1;
wire   [0:0] tmp_9_fu_910_p2;
wire   [7:0] tmp_27_fu_915_p2;
wire   [0:0] tmp_12_fu_927_p2;
wire   [7:0] tmp_30_fu_932_p2;
wire   [7:0] tmp_31_fu_937_p3;
wire   [7:0] tmp_28_fu_920_p3;
wire   [0:0] tmp_16_fu_955_p2;
wire   [0:0] tmp_20_fu_960_p2;
wire   [0:0] tmp_32_fu_973_p2;
wire   [7:0] p_i_fu_965_p3;
wire   [7:0] edge_val_fu_950_p2;
wire   [31:0] lastLine_3_fu_996_p2;
reg   [14:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_1391;
reg    ap_condition_837;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem2_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem2_WREADY = 1'b0;
end

sobel_filter_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
sobel_filter_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .inter_pix(inter_pix),
    .out_pix(out_pix)
);

sobel_filter_gmem_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
sobel_filter_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(8'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd0),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

sobel_filter_gmem2_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM2_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM2_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM2_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM2_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM2_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM2_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM2_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM2_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM2_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM2_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM2_CACHE_VALUE ))
sobel_filter_gmem2_m_axi_U(
    .AWVALID(m_axi_gmem2_AWVALID),
    .AWREADY(m_axi_gmem2_AWREADY),
    .AWADDR(m_axi_gmem2_AWADDR),
    .AWID(m_axi_gmem2_AWID),
    .AWLEN(m_axi_gmem2_AWLEN),
    .AWSIZE(m_axi_gmem2_AWSIZE),
    .AWBURST(m_axi_gmem2_AWBURST),
    .AWLOCK(m_axi_gmem2_AWLOCK),
    .AWCACHE(m_axi_gmem2_AWCACHE),
    .AWPROT(m_axi_gmem2_AWPROT),
    .AWQOS(m_axi_gmem2_AWQOS),
    .AWREGION(m_axi_gmem2_AWREGION),
    .AWUSER(m_axi_gmem2_AWUSER),
    .WVALID(m_axi_gmem2_WVALID),
    .WREADY(m_axi_gmem2_WREADY),
    .WDATA(m_axi_gmem2_WDATA),
    .WSTRB(m_axi_gmem2_WSTRB),
    .WLAST(m_axi_gmem2_WLAST),
    .WID(m_axi_gmem2_WID),
    .WUSER(m_axi_gmem2_WUSER),
    .ARVALID(m_axi_gmem2_ARVALID),
    .ARREADY(m_axi_gmem2_ARREADY),
    .ARADDR(m_axi_gmem2_ARADDR),
    .ARID(m_axi_gmem2_ARID),
    .ARLEN(m_axi_gmem2_ARLEN),
    .ARSIZE(m_axi_gmem2_ARSIZE),
    .ARBURST(m_axi_gmem2_ARBURST),
    .ARLOCK(m_axi_gmem2_ARLOCK),
    .ARCACHE(m_axi_gmem2_ARCACHE),
    .ARPROT(m_axi_gmem2_ARPROT),
    .ARQOS(m_axi_gmem2_ARQOS),
    .ARREGION(m_axi_gmem2_ARREGION),
    .ARUSER(m_axi_gmem2_ARUSER),
    .RVALID(m_axi_gmem2_RVALID),
    .RREADY(m_axi_gmem2_RREADY),
    .RDATA(m_axi_gmem2_RDATA),
    .RLAST(m_axi_gmem2_RLAST),
    .RID(m_axi_gmem2_RID),
    .RUSER(m_axi_gmem2_RUSER),
    .RRESP(m_axi_gmem2_RRESP),
    .BVALID(m_axi_gmem2_BVALID),
    .BREADY(m_axi_gmem2_BREADY),
    .BRESP(m_axi_gmem2_BRESP),
    .BID(m_axi_gmem2_BID),
    .BUSER(m_axi_gmem2_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(gmem2_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem2_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(gmem2_RDATA),
    .I_RID(gmem2_RID),
    .I_RUSER(gmem2_RUSER),
    .I_RRESP(gmem2_RRESP),
    .I_RLAST(gmem2_RLAST),
    .I_AWVALID(gmem2_AWVALID),
    .I_AWREADY(gmem2_AWREADY),
    .I_AWADDR(ap_reg_pp0_iter6_gmem2_addr_reg_1119),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem2_WVALID),
    .I_WREADY(gmem2_WREADY),
    .I_WDATA(gmem2_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem2_BVALID),
    .I_BREADY(gmem2_BREADY),
    .I_BRESP(gmem2_BRESP),
    .I_BID(gmem2_BID),
    .I_BUSER(gmem2_BUSER)
);

sobel_filter_linebkb #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
lineBuffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuffer_0_address0),
    .ce0(lineBuffer_0_ce0),
    .we0(lineBuffer_0_we0),
    .d0(reg_399),
    .q0(lineBuffer_0_q0),
    .address1(lineBuffer_0_address1),
    .ce1(lineBuffer_0_ce1),
    .q1(lineBuffer_0_q1)
);

sobel_filter_linebkb #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
lineBuffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuffer_1_address0),
    .ce0(lineBuffer_1_ce0),
    .we0(lineBuffer_1_we0),
    .d0(reg_399),
    .q0(lineBuffer_1_q0),
    .address1(lineBuffer_1_address1),
    .ce1(lineBuffer_1_ce1),
    .q1(lineBuffer_1_q1)
);

sobel_filter_linebkb #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
lineBuffer_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuffer_2_address0),
    .ce0(lineBuffer_2_ce0),
    .we0(lineBuffer_2_we0),
    .d0(reg_399),
    .q0(lineBuffer_2_q0),
    .address1(lineBuffer_2_address1),
    .ce1(lineBuffer_2_ce1),
    .q1(lineBuffer_2_q1)
);

sobel_filter_lineeOg #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
lineBuffer_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuffer_3_address0),
    .ce0(lineBuffer_3_ce0),
    .q0(lineBuffer_3_q0),
    .address1(lineBuffer_3_address1),
    .ce1(lineBuffer_3_ce1),
    .we1(lineBuffer_3_we1),
    .d1(reg_399),
    .q1(lineBuffer_3_q1)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U0(
    .din1(lineBuffer_0_q0),
    .din2(lineBuffer_1_q0),
    .din3(lineBuffer_2_q0),
    .din4(lineBuffer_3_q0),
    .din5(tmp_19_0_t_reg_1085),
    .dout(tmp_13_fu_677_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U1(
    .din1(lineBuffer_0_q0),
    .din2(lineBuffer_1_q0),
    .din3(lineBuffer_2_q0),
    .din4(lineBuffer_3_q0),
    .din5(tmp_19_2_t_reg_1098),
    .dout(tmp_21_fu_690_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U2(
    .din1(lineBuffer_0_q1),
    .din2(lineBuffer_1_q1),
    .din3(lineBuffer_2_q1),
    .din4(lineBuffer_3_q0),
    .din5(tmp_19_0_t_reg_1085),
    .dout(tmp_11_fu_703_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U3(
    .din1(lineBuffer_0_load_2_reg_1213),
    .din2(lineBuffer_1_load_2_reg_1220),
    .din3(lineBuffer_2_load_2_reg_1227),
    .din4(lineBuffer_3_load_2_reg_1234),
    .din5(tmp_19_0_t_reg_1085),
    .dout(tmp_14_fu_720_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U4(
    .din1(lineBuffer_0_q1),
    .din2(lineBuffer_1_q1),
    .din3(lineBuffer_2_q1),
    .din4(lineBuffer_3_q0),
    .din5(tmp_19_1_t_reg_1092),
    .dout(tmp_17_fu_739_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U5(
    .din1(lineBuffer_0_load_2_reg_1213),
    .din2(lineBuffer_1_load_2_reg_1220),
    .din3(lineBuffer_2_load_2_reg_1227),
    .din4(lineBuffer_3_load_2_reg_1234),
    .din5(tmp_19_1_t_reg_1092),
    .dout(tmp_18_fu_752_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U6(
    .din1(lineBuffer_0_q1),
    .din2(lineBuffer_1_q1),
    .din3(lineBuffer_2_q1),
    .din4(lineBuffer_3_q0),
    .din5(tmp_19_2_t_reg_1098),
    .dout(tmp_19_fu_767_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U7(
    .din1(lineBuffer_0_load_2_reg_1213),
    .din2(lineBuffer_1_load_2_reg_1220),
    .din3(lineBuffer_2_load_2_reg_1227),
    .din4(lineBuffer_3_load_2_reg_1234),
    .din5(tmp_19_2_t_reg_1098),
    .dout(tmp_22_fu_780_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state13))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state12) & (1'd0 == tmp_1_fu_549_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state13)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state13 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end else if (((1'b1 == ap_CS_fsm_state12) & (1'd0 == tmp_1_fu_549_p2))) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem2_AWREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter6) & (1'b1 == ap_predicate_op252_writereq_state26) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter6) & (1'b1 == ap_predicate_op253_writereq_state26) & (ap_block_pp0_stage1_flag00011001 == 1'b0)))) begin
            ap_reg_ioackin_gmem2_AWREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter6) & (1'b1 == ap_predicate_op252_writereq_state26) & (ap_block_pp0_stage1_flag00001001 == 1'b0) & (1'b1 == gmem2_AWREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter6) & (1'b1 == ap_predicate_op253_writereq_state26) & (ap_block_pp0_stage1_flag00001001 == 1'b0) & (1'b1 == gmem2_AWREADY)))) begin
            ap_reg_ioackin_gmem2_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem2_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter7) & (1'b1 == ap_predicate_op255_write_state27) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter7) & (1'b1 == ap_predicate_op256_write_state27) & (ap_block_pp0_stage0_flag00011001 == 1'b0)))) begin
            ap_reg_ioackin_gmem2_WREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter7) & (1'b1 == ap_predicate_op255_write_state27) & (1'b1 == gmem2_WREADY) & (ap_block_pp0_stage0_flag00001001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter7) & (1'b1 == ap_predicate_op256_write_state27) & (1'b1 == gmem2_WREADY) & (ap_block_pp0_stage0_flag00001001 == 1'b0)))) begin
            ap_reg_ioackin_gmem2_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state3) & (ap_sig_ioackin_gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_predicate_op149_readreq_state14) & (ap_block_pp0_stage1_flag00011001 == 1'b0)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == gmem_ARREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_predicate_op149_readreq_state14) & (1'b1 == gmem_ARREADY) & (ap_block_pp0_stage1_flag00001001 == 1'b0)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_fu_451_p2))) begin
        i1_reg_356 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        i1_reg_356 <= i_2_reg_1071;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_reg_333 <= i_1_reg_1037;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_333 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_fu_451_p2))) begin
        lastLine_1_reg_344 <= 32'd3;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        lastLine_1_reg_344 <= lastLine_2_fu_1002_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~((tmp_2_fu_485_p2 == 1'd0) & (1'b0 == gmem_RVALID)) & (tmp_2_fu_485_p2 == 1'd1))) begin
        lastLine_reg_321 <= tmp_6_reg_1023;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        lastLine_reg_321 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd0 == tmp_1_fu_549_p2))) begin
        row_assign_reg_368 <= 11'd0;
    end else if (((1'd0 == tmp_8_reg_1124) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        row_assign_reg_368 <= j_reg_1128;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_gmem2_addr_reg_1119 <= gmem2_addr_reg_1119;
        ap_reg_pp0_iter1_j_reg_1128 <= j_reg_1128;
        ap_reg_pp0_iter1_row_assign_cast5_reg_1105[10 : 0] <= row_assign_cast5_reg_1105[10 : 0];
        ap_reg_pp0_iter1_tmp_10_reg_1142 <= tmp_10_reg_1142;
        ap_reg_pp0_iter1_tmp_46_reg_1134 <= tmp_46_reg_1134;
        ap_reg_pp0_iter1_tmp_49_reg_1138 <= tmp_49_reg_1138;
        ap_reg_pp0_iter2_gmem2_addr_reg_1119 <= ap_reg_pp0_iter1_gmem2_addr_reg_1119;
        ap_reg_pp0_iter2_j_reg_1128 <= ap_reg_pp0_iter1_j_reg_1128;
        ap_reg_pp0_iter2_row_assign_cast5_reg_1105[10 : 0] <= ap_reg_pp0_iter1_row_assign_cast5_reg_1105[10 : 0];
        ap_reg_pp0_iter2_tmp_10_reg_1142 <= ap_reg_pp0_iter1_tmp_10_reg_1142;
        ap_reg_pp0_iter2_tmp_46_reg_1134 <= ap_reg_pp0_iter1_tmp_46_reg_1134;
        ap_reg_pp0_iter2_tmp_49_reg_1138 <= ap_reg_pp0_iter1_tmp_49_reg_1138;
        ap_reg_pp0_iter3_gmem2_addr_reg_1119 <= ap_reg_pp0_iter2_gmem2_addr_reg_1119;
        ap_reg_pp0_iter3_j_reg_1128 <= ap_reg_pp0_iter2_j_reg_1128;
        ap_reg_pp0_iter3_row_assign_cast5_reg_1105[10 : 0] <= ap_reg_pp0_iter2_row_assign_cast5_reg_1105[10 : 0];
        ap_reg_pp0_iter3_tmp_10_reg_1142 <= ap_reg_pp0_iter2_tmp_10_reg_1142;
        ap_reg_pp0_iter3_tmp_46_reg_1134 <= ap_reg_pp0_iter2_tmp_46_reg_1134;
        ap_reg_pp0_iter3_tmp_49_reg_1138 <= ap_reg_pp0_iter2_tmp_49_reg_1138;
        ap_reg_pp0_iter4_gmem2_addr_reg_1119 <= ap_reg_pp0_iter3_gmem2_addr_reg_1119;
        ap_reg_pp0_iter4_tmp_10_reg_1142 <= ap_reg_pp0_iter3_tmp_10_reg_1142;
        ap_reg_pp0_iter4_tmp_46_reg_1134 <= ap_reg_pp0_iter3_tmp_46_reg_1134;
        ap_reg_pp0_iter4_tmp_49_reg_1138 <= ap_reg_pp0_iter3_tmp_49_reg_1138;
        ap_reg_pp0_iter5_gmem2_addr_reg_1119 <= ap_reg_pp0_iter4_gmem2_addr_reg_1119;
        ap_reg_pp0_iter5_tmp_46_reg_1134 <= ap_reg_pp0_iter4_tmp_46_reg_1134;
        ap_reg_pp0_iter5_tmp_49_reg_1138 <= ap_reg_pp0_iter4_tmp_49_reg_1138;
        ap_reg_pp0_iter6_gmem2_addr_reg_1119 <= ap_reg_pp0_iter5_gmem2_addr_reg_1119;
        ap_reg_pp0_iter6_tmp_46_reg_1134 <= ap_reg_pp0_iter5_tmp_46_reg_1134;
        ap_reg_pp0_iter6_tmp_49_reg_1138 <= ap_reg_pp0_iter5_tmp_49_reg_1138;
        ap_reg_pp0_iter7_tmp_46_reg_1134 <= ap_reg_pp0_iter6_tmp_46_reg_1134;
        ap_reg_pp0_iter7_tmp_49_reg_1138 <= ap_reg_pp0_iter6_tmp_49_reg_1138;
        ap_reg_pp0_iter8_tmp_46_reg_1134 <= ap_reg_pp0_iter7_tmp_46_reg_1134;
        ap_reg_pp0_iter8_tmp_49_reg_1138 <= ap_reg_pp0_iter7_tmp_49_reg_1138;
        ap_reg_pp0_iter9_tmp_46_reg_1134 <= ap_reg_pp0_iter8_tmp_46_reg_1134;
        ap_reg_pp0_iter9_tmp_49_reg_1138 <= ap_reg_pp0_iter8_tmp_49_reg_1138;
        gmem2_addr_reg_1119 <= out_pix4_sum_fu_616_p2;
        gmem_addr_1_reg_1113 <= inter_pix2_sum1_fu_596_p2;
        row_assign_cast5_reg_1105[10 : 0] <= row_assign_cast5_fu_583_p1[10 : 0];
        tmp_8_reg_1124 <= tmp_8_fu_627_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_predicate_op252_writereq_state26) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        edge_val_1_i_reg_1306 <= edge_val_1_i_fu_979_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_451_p2))) begin
        gmem_addr_reg_1028 <= tmp_34_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~((tmp_2_fu_485_p2 == 1'd0) & (1'b0 == gmem_RVALID)))) begin
        i_1_reg_1037 <= i_1_fu_491_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_2_reg_1071 <= i_2_fu_555_p2;
        tmp_37_reg_1057[31 : 7] <= tmp_37_fu_509_p2[31 : 7];
        tmp_41_cast_reg_1062[23 : 7] <= tmp_41_cast_fu_545_p1[23 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        inter_pix_read_reg_1009 <= inter_pix;
        tmp_s_reg_1015[29 : 0] <= tmp_s_fu_417_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        j_reg_1128 <= j_fu_633_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_predicate_op173_read_state21) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        lineBuffer_0_addr_2_reg_1147 <= ap_reg_pp0_iter3_row_assign_cast5_reg_1105;
        lineBuffer_1_addr_2_reg_1152 <= ap_reg_pp0_iter3_row_assign_cast5_reg_1105;
        lineBuffer_2_addr_2_reg_1157 <= ap_reg_pp0_iter3_row_assign_cast5_reg_1105;
        lineBuffer_3_addr_1_reg_1162 <= ap_reg_pp0_iter3_row_assign_cast5_reg_1105;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_2_fu_485_p2 == 1'd0) & ~((tmp_2_fu_485_p2 == 1'd0) & (1'b0 == gmem_RVALID)))) begin
        lineBuffer_0_addr_reg_1042 <= i_cast7_fu_478_p1;
        lineBuffer_1_addr_reg_1047 <= i_cast7_fu_478_p1;
        lineBuffer_2_addr_reg_1052 <= i_cast7_fu_478_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter4_tmp_46_reg_1134) & (1'd0 == ap_reg_pp0_iter4_tmp_49_reg_1138))) begin
        lineBuffer_0_load_2_reg_1213 <= lineBuffer_0_q1;
        lineBuffer_1_load_2_reg_1220 <= lineBuffer_1_q1;
        lineBuffer_2_load_2_reg_1227 <= lineBuffer_2_q1;
        lineBuffer_3_load_2_reg_1234 <= lineBuffer_3_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd0 == tmp_1_fu_549_p2))) begin
        or_cond_reg_1076 <= grp_fu_393_p2;
        tmp_19_0_t_reg_1085 <= tmp_19_0_t_fu_565_p2;
        tmp_19_1_t_reg_1092 <= tmp_19_1_t_fu_571_p2;
        tmp_19_2_t_reg_1098 <= tmp_19_2_t_fu_577_p2;
        tmp_41_reg_1081 <= tmp_41_fu_561_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state10) & (tmp_2_fu_485_p2 == 1'd0) & ~((tmp_2_fu_485_p2 == 1'd0) & (1'b0 == gmem_RVALID))) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter4) & (1'b1 == ap_predicate_op173_read_state21) & (ap_block_pp0_stage0_flag00011001 == 1'b0)))) begin
        reg_399 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter4_tmp_46_reg_1134) & (1'd0 == ap_reg_pp0_iter4_tmp_49_reg_1138))) begin
        tmp2_reg_1261 <= tmp2_fu_761_p2;
        tmp_17_reg_1251 <= tmp_17_fu_739_p6;
        tmp_18_reg_1256 <= tmp_18_fu_752_p6;
        tmp_19_reg_1266 <= tmp_19_fu_767_p6;
        tmp_22_reg_1271 <= tmp_22_fu_780_p6;
        x_weight_0_2_reg_1246 <= x_weight_0_2_fu_733_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == tmp_8_fu_627_p2) & (1'd0 == grp_fu_393_p2) & (1'd0 == tmp_49_fu_651_p2))) begin
        tmp_10_reg_1142 <= tmp_10_fu_657_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter4_tmp_46_reg_1134) & (1'd0 == ap_reg_pp0_iter4_tmp_49_reg_1138))) begin
        tmp_13_reg_1208 <= tmp_13_fu_677_p6;
        tmp_21_reg_1241 <= tmp_21_fu_690_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter5_tmp_46_reg_1134) & (1'd0 == ap_reg_pp0_iter5_tmp_49_reg_1138))) begin
        tmp_15_reg_1299 <= tmp_15_fu_944_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter5_tmp_46_reg_1134) & (1'd0 == ap_reg_pp0_iter5_tmp_49_reg_1138))) begin
        tmp_25_reg_1287 <= tmp_25_fu_901_p2;
        tmp_51_reg_1293 <= tmp_51_fu_906_p1;
        x_weight_2_2_reg_1277 <= x_weight_2_2_fu_889_p2;
        y_weight_2_2_reg_1282 <= y_weight_2_2_fu_895_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == tmp_8_fu_627_p2))) begin
        tmp_46_reg_1134 <= grp_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == tmp_8_fu_627_p2) & (1'd0 == grp_fu_393_p2))) begin
        tmp_49_reg_1138 <= tmp_49_fu_651_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_6_reg_1023 <= tmp_6_fu_457_p2;
    end
end

always @ (*) begin
    if ((1'd1 == tmp_8_fu_627_p2)) begin
        ap_condition_pp0_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == tmp_1_fu_549_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter8) & (1'b0 == ap_enable_reg_pp0_iter9))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == tmp_1_fu_549_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem2_AWREADY)) begin
        ap_sig_ioackin_gmem2_AWREADY = gmem2_AWREADY;
    end else begin
        ap_sig_ioackin_gmem2_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem2_WREADY)) begin
        ap_sig_ioackin_gmem2_WREADY = gmem2_WREADY;
    end else begin
        ap_sig_ioackin_gmem2_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter6) & (1'b1 == ap_predicate_op252_writereq_state26) & (ap_block_pp0_stage1_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_gmem2_AWREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter6) & (1'b1 == ap_predicate_op253_writereq_state26) & (ap_block_pp0_stage1_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_gmem2_AWREADY)))) begin
        gmem2_AWVALID = 1'b1;
    end else begin
        gmem2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter9) & (1'b1 == ap_predicate_op265_writeresp_state32) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter9) & (1'b1 == ap_predicate_op266_writeresp_state32) & (ap_block_pp0_stage1_flag00011001 == 1'b0)))) begin
        gmem2_BREADY = 1'b1;
    end else begin
        gmem2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_condition_1391 == 1'b1)) begin
        if ((1'b1 == ap_predicate_op256_write_state27)) begin
            gmem2_WDATA = 32'd0;
        end else if ((1'b1 == ap_predicate_op255_write_state27)) begin
            gmem2_WDATA = tmp_26_fu_987_p5;
        end else begin
            gmem2_WDATA = 'bx;
        end
    end else begin
        gmem2_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter7) & (1'b1 == ap_predicate_op255_write_state27) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_gmem2_WREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter7) & (1'b1 == ap_predicate_op256_write_state27) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_gmem2_WREADY)))) begin
        gmem2_WVALID = 1'b1;
    end else begin
        gmem2_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter6) & ((ap_reg_pp0_iter6_tmp_46_reg_1134 == 1'd1) | (1'd1 == ap_reg_pp0_iter6_tmp_49_reg_1138))) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter6) & (1'd0 == ap_reg_pp0_iter6_tmp_46_reg_1134) & (1'd0 == ap_reg_pp0_iter6_tmp_49_reg_1138)))) begin
        gmem2_blk_n_AW = m_axi_gmem2_AWREADY;
    end else begin
        gmem2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter9) & ((1'd1 == ap_reg_pp0_iter9_tmp_46_reg_1134) | (1'd1 == ap_reg_pp0_iter9_tmp_49_reg_1138))) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter9) & (1'd0 == ap_reg_pp0_iter9_tmp_46_reg_1134) & (1'd0 == ap_reg_pp0_iter9_tmp_49_reg_1138)))) begin
        gmem2_blk_n_B = m_axi_gmem2_BVALID;
    end else begin
        gmem2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & ((ap_reg_pp0_iter6_tmp_46_reg_1134 == 1'd1) | (1'd1 == ap_reg_pp0_iter6_tmp_49_reg_1138)) & (1'b1 == ap_enable_reg_pp0_iter7)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter7) & (1'd0 == ap_reg_pp0_iter6_tmp_46_reg_1134) & (1'd0 == ap_reg_pp0_iter6_tmp_49_reg_1138)))) begin
        gmem2_blk_n_W = m_axi_gmem2_WREADY;
    end else begin
        gmem2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        if ((ap_condition_837 == 1'b1)) begin
            gmem_ARADDR = gmem_addr_1_reg_1113;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            gmem_ARADDR = gmem_addr_reg_1028;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        if ((ap_condition_837 == 1'b1)) begin
            gmem_ARLEN = 32'd1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            gmem_ARLEN = 32'd1920;
        end else begin
            gmem_ARLEN = 'bx;
        end
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_predicate_op149_readreq_state14) & (1'b0 == ap_reg_ioackin_gmem_ARREADY) & (ap_block_pp0_stage1_flag00001001 == 1'b0)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state10) & (tmp_2_fu_485_p2 == 1'd0) & ~((tmp_2_fu_485_p2 == 1'd0) & (1'b0 == gmem_RVALID))) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter4) & (1'b1 == ap_predicate_op173_read_state21) & (ap_block_pp0_stage0_flag00011001 == 1'b0)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00000000 == 1'b0) & (1'd0 == tmp_8_reg_1124) & (1'd0 == tmp_46_reg_1134) & (1'd0 == tmp_49_reg_1138)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state10) & (tmp_2_fu_485_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter3_tmp_46_reg_1134) & (1'd0 == ap_reg_pp0_iter3_tmp_49_reg_1138)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        grp_fu_379_p0 = i1_reg_356;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_379_p0 = i1_phi_fu_360_p4;
    end else begin
        grp_fu_379_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        grp_fu_386_p0 = i1_reg_356;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_386_p0 = i1_phi_fu_360_p4;
    end else begin
        grp_fu_386_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4))) begin
        lineBuffer_0_address0 = lineBuffer_0_addr_2_reg_1147;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        lineBuffer_0_address0 = ap_reg_pp0_iter3_row_assign_cast5_reg_1105;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        lineBuffer_0_address0 = lineBuffer_0_addr_reg_1042;
    end else begin
        lineBuffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter4)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            lineBuffer_0_address1 = tmp_281_cast_fu_670_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            lineBuffer_0_address1 = tmp_28_0_2_cast_fu_663_p1;
        end else begin
            lineBuffer_0_address1 = 'bx;
        end
    end else begin
        lineBuffer_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | (1'b1 == ap_CS_fsm_state11))) begin
        lineBuffer_0_ce0 = 1'b1;
    end else begin
        lineBuffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage1_flag00011001 == 1'b0)))) begin
        lineBuffer_0_ce1 = 1'b1;
    end else begin
        lineBuffer_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (2'd0 == lastLine_reg_321)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter4_tmp_46_reg_1134) & (1'd0 == ap_reg_pp0_iter4_tmp_49_reg_1138) & (tmp_41_reg_1081 == 2'd0)))) begin
        lineBuffer_0_we0 = 1'b1;
    end else begin
        lineBuffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4))) begin
        lineBuffer_1_address0 = lineBuffer_1_addr_2_reg_1152;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        lineBuffer_1_address0 = ap_reg_pp0_iter3_row_assign_cast5_reg_1105;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        lineBuffer_1_address0 = lineBuffer_1_addr_reg_1047;
    end else begin
        lineBuffer_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter4)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            lineBuffer_1_address1 = tmp_281_cast_fu_670_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            lineBuffer_1_address1 = tmp_28_0_2_cast_fu_663_p1;
        end else begin
            lineBuffer_1_address1 = 'bx;
        end
    end else begin
        lineBuffer_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | (1'b1 == ap_CS_fsm_state11))) begin
        lineBuffer_1_ce0 = 1'b1;
    end else begin
        lineBuffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage1_flag00011001 == 1'b0)))) begin
        lineBuffer_1_ce1 = 1'b1;
    end else begin
        lineBuffer_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (lastLine_reg_321 == 2'd1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter4_tmp_46_reg_1134) & (1'd0 == ap_reg_pp0_iter4_tmp_49_reg_1138) & (tmp_41_reg_1081 == 2'd1)))) begin
        lineBuffer_1_we0 = 1'b1;
    end else begin
        lineBuffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4))) begin
        lineBuffer_2_address0 = lineBuffer_2_addr_2_reg_1157;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        lineBuffer_2_address0 = ap_reg_pp0_iter3_row_assign_cast5_reg_1105;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        lineBuffer_2_address0 = lineBuffer_2_addr_reg_1052;
    end else begin
        lineBuffer_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter4)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            lineBuffer_2_address1 = tmp_281_cast_fu_670_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            lineBuffer_2_address1 = tmp_28_0_2_cast_fu_663_p1;
        end else begin
            lineBuffer_2_address1 = 'bx;
        end
    end else begin
        lineBuffer_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | (1'b1 == ap_CS_fsm_state11))) begin
        lineBuffer_2_ce0 = 1'b1;
    end else begin
        lineBuffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage1_flag00011001 == 1'b0)))) begin
        lineBuffer_2_ce1 = 1'b1;
    end else begin
        lineBuffer_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & ~(2'd0 == lastLine_reg_321) & ~(lastLine_reg_321 == 2'd1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter4_tmp_46_reg_1134) & (1'd0 == ap_reg_pp0_iter4_tmp_49_reg_1138) & (tmp_41_reg_1081 == 2'd2)))) begin
        lineBuffer_2_we0 = 1'b1;
    end else begin
        lineBuffer_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter4)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            lineBuffer_3_address0 = tmp_281_cast_fu_670_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            lineBuffer_3_address0 = ap_reg_pp0_iter3_row_assign_cast5_reg_1105;
        end else begin
            lineBuffer_3_address0 = 'bx;
        end
    end else begin
        lineBuffer_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter4)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            lineBuffer_3_address1 = lineBuffer_3_addr_1_reg_1162;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            lineBuffer_3_address1 = tmp_28_0_2_cast_fu_663_p1;
        end else begin
            lineBuffer_3_address1 = 'bx;
        end
    end else begin
        lineBuffer_3_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage1_flag00011001 == 1'b0)))) begin
        lineBuffer_3_ce0 = 1'b1;
    end else begin
        lineBuffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage1_flag00011001 == 1'b0)))) begin
        lineBuffer_3_ce1 = 1'b1;
    end else begin
        lineBuffer_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter4_tmp_46_reg_1134) & (1'd0 == ap_reg_pp0_iter4_tmp_49_reg_1138) & (tmp_41_reg_1081 == 2'd3))) begin
        lineBuffer_3_we1 = 1'b1;
    end else begin
        lineBuffer_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == tmp_8_reg_1124) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        row_assign_phi_fu_372_p4 = j_reg_1128;
    end else begin
        row_assign_phi_fu_372_p4 = row_assign_reg_368;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_fu_451_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (ap_sig_ioackin_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & ~((tmp_2_fu_485_p2 == 1'd0) & (1'b0 == gmem_RVALID)) & (tmp_2_fu_485_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == ap_CS_fsm_state10) & (tmp_2_fu_485_p2 == 1'd0) & ~((tmp_2_fu_485_p2 == 1'd0) & (1'b0 == gmem_RVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == tmp_1_fu_549_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd1 == tmp_8_fu_627_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd1 == tmp_8_fu_627_p2) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_block_pp0_stage1_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter9) & (ap_block_pp0_stage1_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter9) & (ap_block_pp0_stage1_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter4) & (1'b0 == gmem_RVALID) & (1'b1 == ap_predicate_op173_read_state21));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter4) & (1'b0 == gmem_RVALID) & (1'b1 == ap_predicate_op173_read_state21)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b1 == ap_block_state27_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter4) & (1'b0 == gmem_RVALID) & (1'b1 == ap_predicate_op173_read_state21)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b1 == ap_block_state27_io)));
end

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter9) & (((1'b0 == gmem2_BVALID) & (1'b1 == ap_predicate_op265_writeresp_state32)) | ((1'b0 == gmem2_BVALID) & (1'b1 == ap_predicate_op266_writeresp_state32))));
end

always @ (*) begin
    ap_block_pp0_stage1_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state14_io)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b1 == ap_block_state26_io)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (((1'b0 == gmem2_BVALID) & (1'b1 == ap_predicate_op265_writeresp_state32)) | ((1'b0 == gmem2_BVALID) & (1'b1 == ap_predicate_op266_writeresp_state32)))));
end

always @ (*) begin
    ap_block_pp0_stage1_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state14_io)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b1 == ap_block_state26_io)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (((1'b0 == gmem2_BVALID) & (1'b1 == ap_predicate_op265_writeresp_state32)) | ((1'b0 == gmem2_BVALID) & (1'b1 == ap_predicate_op266_writeresp_state32)))));
end

always @ (*) begin
    ap_block_state10 = ((tmp_2_fu_485_p2 == 1'd0) & (1'b0 == gmem_RVALID));
end

assign ap_block_state13_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = ((1'b0 == ap_sig_ioackin_gmem_ARREADY) & (1'b1 == ap_predicate_op149_readreq_state14));
end

assign ap_block_state14_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_pp0_stage0_iter4 = ((1'b0 == gmem_RVALID) & (1'b1 == ap_predicate_op173_read_state21));
end

assign ap_block_state22_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_io = (((1'b0 == ap_sig_ioackin_gmem2_AWREADY) & (1'b1 == ap_predicate_op252_writereq_state26)) | ((1'b0 == ap_sig_ioackin_gmem2_AWREADY) & (1'b1 == ap_predicate_op253_writereq_state26)));
end

assign ap_block_state26_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state27_io = (((1'b0 == ap_sig_ioackin_gmem2_WREADY) & (1'b1 == ap_predicate_op255_write_state27)) | ((1'b0 == ap_sig_ioackin_gmem2_WREADY) & (1'b1 == ap_predicate_op256_write_state27)));
end

assign ap_block_state27_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32_pp0_stage1_iter9 = (((1'b0 == gmem2_BVALID) & (1'b1 == ap_predicate_op265_writeresp_state32)) | ((1'b0 == gmem2_BVALID) & (1'b1 == ap_predicate_op266_writeresp_state32)));
end

always @ (*) begin
    ap_condition_1391 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter7) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_gmem2_WREADY));
end

always @ (*) begin
    ap_condition_837 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_predicate_op149_readreq_state14) & (ap_block_pp0_stage1_flag00001001 == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op149_readreq_state14 = ((1'd0 == tmp_8_reg_1124) & (1'd0 == tmp_46_reg_1134) & (1'd0 == tmp_49_reg_1138));
end

always @ (*) begin
    ap_predicate_op173_read_state21 = ((1'd0 == ap_reg_pp0_iter3_tmp_46_reg_1134) & (1'd0 == ap_reg_pp0_iter3_tmp_49_reg_1138));
end

always @ (*) begin
    ap_predicate_op252_writereq_state26 = ((1'd0 == ap_reg_pp0_iter6_tmp_46_reg_1134) & (1'd0 == ap_reg_pp0_iter6_tmp_49_reg_1138));
end

always @ (*) begin
    ap_predicate_op253_writereq_state26 = ((ap_reg_pp0_iter6_tmp_46_reg_1134 == 1'd1) | (1'd1 == ap_reg_pp0_iter6_tmp_49_reg_1138));
end

always @ (*) begin
    ap_predicate_op255_write_state27 = ((1'd0 == ap_reg_pp0_iter6_tmp_46_reg_1134) & (1'd0 == ap_reg_pp0_iter6_tmp_49_reg_1138));
end

always @ (*) begin
    ap_predicate_op256_write_state27 = ((ap_reg_pp0_iter6_tmp_46_reg_1134 == 1'd1) | (1'd1 == ap_reg_pp0_iter6_tmp_49_reg_1138));
end

always @ (*) begin
    ap_predicate_op265_writeresp_state32 = ((1'd0 == ap_reg_pp0_iter9_tmp_46_reg_1134) & (1'd0 == ap_reg_pp0_iter9_tmp_49_reg_1138));
end

always @ (*) begin
    ap_predicate_op266_writeresp_state32 = ((1'd1 == ap_reg_pp0_iter9_tmp_46_reg_1134) | (1'd1 == ap_reg_pp0_iter9_tmp_49_reg_1138));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign edge_val_1_i_fu_979_p3 = ((tmp_32_fu_973_p2[0:0] === 1'b1) ? p_i_fu_965_p3 : edge_val_fu_950_p2);

assign edge_val_fu_950_p2 = (tmp_15_reg_1299 ^ 8'd255);

assign grp_fu_379_p2 = ((grp_fu_379_p0 == 11'd0) ? 1'b1 : 1'b0);

assign grp_fu_386_p2 = ((grp_fu_386_p0 == 11'd1079) ? 1'b1 : 1'b0);

assign grp_fu_393_p2 = (grp_fu_379_p2 | grp_fu_386_p2);

assign i1_phi_fu_360_p4 = i1_reg_356;

assign i_1_fu_491_p2 = (i_reg_333 + 11'd1);

assign i_2_fu_555_p2 = (11'd1 + i1_reg_356);

assign i_cast7_fu_478_p1 = i_reg_333;

assign inter_pix2_sum1_fu_596_p2 = (inter_pix_read_reg_1009 + tmp_42_fu_591_p2);

assign j_fu_633_p2 = (row_assign_phi_fu_372_p4 + 11'd1);

assign lastLine_2_fu_1002_p3 = ((or_cond_reg_1076[0:0] === 1'b1) ? lastLine_1_reg_344 : lastLine_3_fu_996_p2);

assign lastLine_3_fu_996_p2 = (lastLine_1_reg_344 + 32'd1);

assign out_pix3_fu_407_p4 = {{out_pix[31:2]}};

assign out_pix4_sum_fu_616_p2 = ($signed(tmp_44_cast_fu_612_p1) + $signed(tmp_s_reg_1015));

assign p_i_fu_965_p3 = ((tmp_16_fu_955_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign p_shl1_cast_fu_810_p1 = p_shl1_fu_803_p3;

assign p_shl1_fu_803_p3 = {{tmp_17_reg_1251}, {1'd0}};

assign p_shl5_cast_fu_429_p1 = tmp_23_fu_421_p3;

assign p_shl6_cast_fu_441_p1 = tmp_24_fu_433_p3;

assign p_shl7_cast_fu_523_p1 = tmp_38_fu_515_p3;

assign p_shl8_cast_fu_535_p1 = tmp_39_fu_527_p3;

assign p_shl_cast_fu_872_p1 = p_shl_fu_865_p3;

assign p_shl_fu_865_p3 = {{tmp_21_reg_1241}, {1'd0}};

assign row_assign_cast5_cas_fu_587_p1 = row_assign_phi_fu_372_p4;

assign row_assign_cast5_fu_583_p1 = row_assign_phi_fu_372_p4;

assign tmp2_cast_fu_837_p1 = tmp2_reg_1261;

assign tmp2_fu_761_p2 = (tmp_29_0_2_cast_fu_729_p1 + tmp_291_cast_fu_716_p1);

assign tmp_10_fu_657_p2 = ($signed(11'd2047) + $signed(row_assign_phi_fu_372_p4));

assign tmp_12_fu_927_p2 = (($signed(y_weight_2_2_reg_1282) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign tmp_15_fu_944_p2 = (tmp_31_fu_937_p3 + tmp_28_fu_920_p3);

assign tmp_16_fu_955_p2 = ((tmp_15_reg_1299 < 8'd55) ? 1'b1 : 1'b0);

assign tmp_19_0_t_fu_565_p2 = (2'd1 + tmp_41_fu_561_p1);

assign tmp_19_1_t_fu_571_p2 = (tmp_41_fu_561_p1 ^ 2'd2);

assign tmp_19_2_t_fu_577_p2 = ($signed(2'd3) + $signed(tmp_41_fu_561_p1));

assign tmp_1_fu_549_p2 = ((i1_reg_356 == 11'd1080) ? 1'b1 : 1'b0);

assign tmp_20_fu_960_p2 = ((tmp_15_reg_1299 > 8'd155) ? 1'b1 : 1'b0);

assign tmp_23_fu_421_p3 = {{lastLine_reg_321}, {11'd0}};

assign tmp_24_fu_433_p3 = {{lastLine_reg_321}, {7'd0}};

assign tmp_25_fu_901_p2 = (tmp_50_fu_885_p1 + tmp_22_reg_1271);

assign tmp_26_fu_987_p5 = {{{{edge_val_1_i_reg_1306}, {edge_val_1_i_reg_1306}}, {edge_val_1_i_reg_1306}}, {edge_val_1_i_reg_1306}};

assign tmp_27_fu_915_p2 = (8'd0 - tmp_25_reg_1287);

assign tmp_281_cast_fu_670_p1 = ap_reg_pp0_iter4_tmp_10_reg_1142;

assign tmp_28_0_2_cast_fu_663_p1 = ap_reg_pp0_iter3_j_reg_1128;

assign tmp_28_fu_920_p3 = ((tmp_9_fu_910_p2[0:0] === 1'b1) ? tmp_25_reg_1287 : tmp_27_fu_915_p2);

assign tmp_291_cast_fu_716_p1 = tmp_11_fu_703_p6;

assign tmp_29_0_2_cast_fu_729_p1 = tmp_14_fu_720_p6;

assign tmp_29_2_2_cast_fu_882_p1 = tmp_22_reg_1271;

assign tmp_29_2_cast_fu_850_p1 = tmp_19_reg_1266;

assign tmp_29_fu_445_p2 = (p_shl5_cast_fu_429_p1 - p_shl6_cast_fu_441_p1);

assign tmp_2_fu_485_p2 = ((i_reg_333 == 11'd1920) ? 1'b1 : 1'b0);

assign tmp_30_fu_932_p2 = (8'd0 - tmp_51_reg_1293);

assign tmp_31_1_2_cast_fu_827_p1 = tmp_31_1_2_fu_820_p3;

assign tmp_31_1_2_fu_820_p3 = {{tmp_18_reg_1256}, {1'd0}};

assign tmp_31_fu_937_p3 = ((tmp_12_fu_927_p2[0:0] === 1'b1) ? tmp_51_reg_1293 : tmp_30_fu_932_p2);

assign tmp_32_fu_973_p2 = (tmp_16_fu_955_p2 | tmp_20_fu_960_p2);

assign tmp_33_0_1_cast_fu_796_p1 = tmp_33_0_1_fu_789_p3;

assign tmp_33_0_1_fu_789_p3 = {{tmp_13_reg_1208}, {1'd0}};

assign tmp_33_fu_463_p1 = $signed(tmp_29_fu_445_p2);

assign tmp_34_fu_467_p2 = ($signed(tmp_33_fu_463_p1) + $signed(inter_pix_read_reg_1009));

assign tmp_35_fu_497_p2 = lastLine_1_reg_344 << 32'd11;

assign tmp_36_fu_503_p2 = lastLine_1_reg_344 << 32'd7;

assign tmp_37_fu_509_p2 = (tmp_35_fu_497_p2 - tmp_36_fu_503_p2);

assign tmp_38_fu_515_p3 = {{i1_reg_356}, {11'd0}};

assign tmp_39_fu_527_p3 = {{i1_reg_356}, {7'd0}};

assign tmp_40_fu_539_p2 = (p_shl7_cast_fu_523_p1 - p_shl8_cast_fu_535_p1);

assign tmp_41_cast_fu_545_p1 = $signed(tmp_40_fu_539_p2);

assign tmp_41_fu_561_p1 = lastLine_1_reg_344[1:0];

assign tmp_42_fu_591_p2 = (tmp_37_reg_1057 + row_assign_cast5_fu_583_p1);

assign tmp_43_fu_607_p2 = ($signed(tmp_41_cast_reg_1062) + $signed(row_assign_cast5_cas_fu_587_p1));

assign tmp_44_cast_fu_612_p1 = $signed(tmp_43_fu_607_p2);

assign tmp_47_fu_639_p2 = ((row_assign_phi_fu_372_p4 == 11'd1919) ? 1'b1 : 1'b0);

assign tmp_48_fu_645_p2 = ((row_assign_phi_fu_372_p4 == 11'd0) ? 1'b1 : 1'b0);

assign tmp_49_fu_651_p2 = (tmp_48_fu_645_p2 | tmp_47_fu_639_p2);

assign tmp_50_fu_885_p1 = x_weight_2_fu_853_p2[7:0];

assign tmp_51_fu_906_p1 = y_weight_2_2_fu_895_p2[7:0];

assign tmp_6_fu_457_p2 = (lastLine_reg_321 + 2'd1);

assign tmp_8_fu_627_p2 = ((row_assign_phi_fu_372_p4 == 11'd1920) ? 1'b1 : 1'b0);

assign tmp_9_fu_910_p2 = (($signed(x_weight_2_2_reg_1277) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign tmp_fu_451_p2 = ((lastLine_reg_321 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_s_fu_417_p1 = out_pix3_fu_407_p4;

assign x_weight_0_2_cast_fu_800_p1 = $signed(x_weight_0_2_reg_1246);

assign x_weight_0_2_fu_733_p2 = (tmp_29_0_2_cast_fu_729_p1 - tmp_291_cast_fu_716_p1);

assign x_weight_1_1_fu_814_p2 = ($signed(x_weight_0_2_cast_fu_800_p1) - $signed(p_shl1_cast_fu_810_p1));

assign x_weight_1_2_fu_831_p2 = (tmp_31_1_2_cast_fu_827_p1 + x_weight_1_1_fu_814_p2);

assign x_weight_2_2_fu_889_p2 = (tmp_29_2_2_cast_fu_882_p1 + x_weight_2_fu_853_p2);

assign x_weight_2_fu_853_p2 = (x_weight_1_2_fu_831_p2 - tmp_29_2_cast_fu_850_p1);

assign y_weight_1_2_cast_fu_846_p1 = y_weight_1_2_fu_840_p2;

assign y_weight_1_2_fu_840_p2 = (tmp_33_0_1_cast_fu_796_p1 + tmp2_cast_fu_837_p1);

assign y_weight_2_1_fu_876_p2 = (y_weight_2_fu_859_p2 - p_shl_cast_fu_872_p1);

assign y_weight_2_2_fu_895_p2 = (y_weight_2_1_fu_876_p2 - tmp_29_2_2_cast_fu_882_p1);

assign y_weight_2_fu_859_p2 = (y_weight_1_2_cast_fu_846_p1 - tmp_29_2_cast_fu_850_p1);

always @ (posedge ap_clk) begin
    tmp_s_reg_1015[31:30] <= 2'b00;
    tmp_37_reg_1057[6:0] <= 7'b0000000;
    tmp_41_cast_reg_1062[6:0] <= 7'b0000000;
    row_assign_cast5_reg_1105[31:11] <= 21'b000000000000000000000;
    ap_reg_pp0_iter1_row_assign_cast5_reg_1105[31:11] <= 21'b000000000000000000000;
    ap_reg_pp0_iter2_row_assign_cast5_reg_1105[31:11] <= 21'b000000000000000000000;
    ap_reg_pp0_iter3_row_assign_cast5_reg_1105[31:11] <= 21'b000000000000000000000;
end

endmodule //sobel_filter
