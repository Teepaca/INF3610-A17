-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getVal is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    index : IN STD_LOGIC_VECTOR (22 downto 0);
    xDiff : IN STD_LOGIC_VECTOR (1 downto 0);
    yDiff : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Y_AWVALID : OUT STD_LOGIC;
    m_axi_Y_AWREADY : IN STD_LOGIC;
    m_axi_Y_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Y_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Y_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Y_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Y_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Y_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Y_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Y_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Y_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Y_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Y_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Y_WVALID : OUT STD_LOGIC;
    m_axi_Y_WREADY : IN STD_LOGIC;
    m_axi_Y_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_Y_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Y_WLAST : OUT STD_LOGIC;
    m_axi_Y_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Y_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Y_ARVALID : OUT STD_LOGIC;
    m_axi_Y_ARREADY : IN STD_LOGIC;
    m_axi_Y_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Y_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Y_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Y_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Y_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Y_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Y_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Y_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Y_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Y_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Y_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Y_RVALID : IN STD_LOGIC;
    m_axi_Y_RREADY : OUT STD_LOGIC;
    m_axi_Y_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_Y_RLAST : IN STD_LOGIC;
    m_axi_Y_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Y_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Y_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Y_BVALID : IN STD_LOGIC;
    m_axi_Y_BREADY : OUT STD_LOGIC;
    m_axi_Y_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Y_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Y_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inter_pix1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of getVal is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Y_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal Y_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp1_fu_108_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp1_reg_143 : STD_LOGIC_VECTOR (12 downto 0);
    signal Y_addr_reg_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sum1_fu_131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_axi_Y_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_Y_ARREADY : STD_LOGIC;
    signal p_shl2_fu_86_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_78_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl2_cast_fu_94_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_98_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal xDiff_cast_fu_104_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp1_cast_fu_114_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_52_fu_117_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sum_fu_121_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sum_cast_fu_127_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_Y_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_Y_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    if ((ap_sig_ioackin_m_axi_Y_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_Y_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_Y_ARREADY)) then 
                        ap_reg_ioackin_m_axi_Y_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                Y_addr_reg_148 <= sum1_fu_131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp1_reg_143 <= tmp1_fu_108_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_Y_RVALID, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_sig_ioackin_m_axi_Y_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sig_ioackin_m_axi_Y_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_Y_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    Y_blk_n_AR_assign_proc : process(m_axi_Y_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Y_blk_n_AR <= m_axi_Y_ARREADY;
        else 
            Y_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    Y_blk_n_R_assign_proc : process(m_axi_Y_RVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Y_blk_n_R <= m_axi_Y_RVALID;
        else 
            Y_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_Y_RVALID, ap_CS_fsm_state10)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_Y_RVALID = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_Y_RVALID, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_Y_RVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= m_axi_Y_RDATA;

    ap_sig_ioackin_m_axi_Y_ARREADY_assign_proc : process(m_axi_Y_ARREADY, ap_reg_ioackin_m_axi_Y_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_Y_ARREADY)) then 
            ap_sig_ioackin_m_axi_Y_ARREADY <= m_axi_Y_ARREADY;
        else 
            ap_sig_ioackin_m_axi_Y_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_Y_ARADDR <= Y_addr_reg_148;
    m_axi_Y_ARBURST <= ap_const_lv2_0;
    m_axi_Y_ARCACHE <= ap_const_lv4_0;
    m_axi_Y_ARID <= ap_const_lv1_0;
    m_axi_Y_ARLEN <= ap_const_lv32_1;
    m_axi_Y_ARLOCK <= ap_const_lv2_0;
    m_axi_Y_ARPROT <= ap_const_lv3_0;
    m_axi_Y_ARQOS <= ap_const_lv4_0;
    m_axi_Y_ARREGION <= ap_const_lv4_0;
    m_axi_Y_ARSIZE <= ap_const_lv3_0;
    m_axi_Y_ARUSER <= ap_const_lv1_0;

    m_axi_Y_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_reg_ioackin_m_axi_Y_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_Y_ARREADY))) then 
            m_axi_Y_ARVALID <= ap_const_logic_1;
        else 
            m_axi_Y_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_Y_AWADDR <= ap_const_lv32_0;
    m_axi_Y_AWBURST <= ap_const_lv2_0;
    m_axi_Y_AWCACHE <= ap_const_lv4_0;
    m_axi_Y_AWID <= ap_const_lv1_0;
    m_axi_Y_AWLEN <= ap_const_lv32_0;
    m_axi_Y_AWLOCK <= ap_const_lv2_0;
    m_axi_Y_AWPROT <= ap_const_lv3_0;
    m_axi_Y_AWQOS <= ap_const_lv4_0;
    m_axi_Y_AWREGION <= ap_const_lv4_0;
    m_axi_Y_AWSIZE <= ap_const_lv3_0;
    m_axi_Y_AWUSER <= ap_const_lv1_0;
    m_axi_Y_AWVALID <= ap_const_logic_0;
    m_axi_Y_BREADY <= ap_const_logic_0;

    m_axi_Y_RREADY_assign_proc : process(m_axi_Y_RVALID, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_Y_RVALID = ap_const_logic_1))) then 
            m_axi_Y_RREADY <= ap_const_logic_1;
        else 
            m_axi_Y_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_Y_WDATA <= ap_const_lv8_0;
    m_axi_Y_WID <= ap_const_lv1_0;
    m_axi_Y_WLAST <= ap_const_logic_0;
    m_axi_Y_WSTRB <= ap_const_lv1_0;
    m_axi_Y_WUSER <= ap_const_lv1_0;
    m_axi_Y_WVALID <= ap_const_logic_0;
        p_shl2_cast_fu_94_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl2_fu_86_p3),13));

    p_shl2_fu_86_p3 <= (yDiff & ap_const_lv7_0);
    p_shl_fu_78_p3 <= (yDiff & ap_const_lv11_0);
    sum1_fu_131_p2 <= std_logic_vector(unsigned(inter_pix1) + unsigned(sum_cast_fu_127_p1));
        sum_cast_fu_127_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_fu_121_p2),32));

    sum_fu_121_p2 <= std_logic_vector(signed(tmp1_cast_fu_114_p1) + signed(tmp_52_fu_117_p1));
        tmp1_cast_fu_114_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_reg_143),22));

    tmp1_fu_108_p2 <= std_logic_vector(unsigned(tmp_fu_98_p2) + unsigned(xDiff_cast_fu_104_p1));
    tmp_52_fu_117_p1 <= index(22 - 1 downto 0);
    tmp_fu_98_p2 <= std_logic_vector(unsigned(p_shl_fu_78_p3) - unsigned(p_shl2_cast_fu_94_p1));
        xDiff_cast_fu_104_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xDiff),13));

end behav;
