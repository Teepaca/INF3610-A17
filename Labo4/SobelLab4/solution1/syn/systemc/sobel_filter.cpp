// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sobel_filter.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sobel_filter::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sobel_filter::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<26> sobel_filter::ap_ST_fsm_state1 = "1";
const sc_lv<26> sobel_filter::ap_ST_fsm_state2 = "10";
const sc_lv<26> sobel_filter::ap_ST_fsm_state3 = "100";
const sc_lv<26> sobel_filter::ap_ST_fsm_state4 = "1000";
const sc_lv<26> sobel_filter::ap_ST_fsm_state5 = "10000";
const sc_lv<26> sobel_filter::ap_ST_fsm_state6 = "100000";
const sc_lv<26> sobel_filter::ap_ST_fsm_state7 = "1000000";
const sc_lv<26> sobel_filter::ap_ST_fsm_state8 = "10000000";
const sc_lv<26> sobel_filter::ap_ST_fsm_state9 = "100000000";
const sc_lv<26> sobel_filter::ap_ST_fsm_state10 = "1000000000";
const sc_lv<26> sobel_filter::ap_ST_fsm_state11 = "10000000000";
const sc_lv<26> sobel_filter::ap_ST_fsm_state12 = "100000000000";
const sc_lv<26> sobel_filter::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<26> sobel_filter::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<26> sobel_filter::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<26> sobel_filter::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<26> sobel_filter::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<26> sobel_filter::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<26> sobel_filter::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<26> sobel_filter::ap_ST_fsm_pp0_stage0 = "10000000000000000000";
const sc_lv<26> sobel_filter::ap_ST_fsm_pp0_stage1 = "100000000000000000000";
const sc_lv<26> sobel_filter::ap_ST_fsm_state26 = "1000000000000000000000";
const sc_lv<26> sobel_filter::ap_ST_fsm_state27 = "10000000000000000000000";
const sc_lv<26> sobel_filter::ap_ST_fsm_state28 = "100000000000000000000000";
const sc_lv<26> sobel_filter::ap_ST_fsm_state29 = "1000000000000000000000000";
const sc_lv<26> sobel_filter::ap_ST_fsm_state30 = "10000000000000000000000000";
const sc_lv<32> sobel_filter::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool sobel_filter::ap_const_boolean_1 = true;
const sc_lv<32> sobel_filter::ap_const_lv32_2 = "10";
const sc_lv<32> sobel_filter::ap_const_lv32_9 = "1001";
const sc_lv<1> sobel_filter::ap_const_lv1_0 = "0";
const sc_lv<32> sobel_filter::ap_const_lv32_C = "1100";
const sc_lv<32> sobel_filter::ap_const_lv32_14 = "10100";
const bool sobel_filter::ap_const_boolean_0 = false;
const sc_lv<32> sobel_filter::ap_const_lv32_12 = "10010";
const sc_lv<32> sobel_filter::ap_const_lv32_19 = "11001";
const int sobel_filter::C_S_AXI_DATA_WIDTH = "100000";
const int sobel_filter::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int sobel_filter::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int sobel_filter::C_M_AXI_GMEM_CACHE_VALUE = "11";
const int sobel_filter::C_M_AXI_DATA_WIDTH = "100000";
const int sobel_filter::C_M_AXI_GMEM2_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int sobel_filter::C_M_AXI_GMEM2_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int sobel_filter::C_M_AXI_GMEM2_CACHE_VALUE = "11";
const sc_lv<32> sobel_filter::ap_const_lv32_1 = "1";
const sc_lv<32> sobel_filter::ap_const_lv32_B = "1011";
const sc_lv<32> sobel_filter::ap_const_lv32_13 = "10011";
const sc_lv<32> sobel_filter::ap_const_lv32_15 = "10101";
const sc_lv<1> sobel_filter::ap_const_lv1_1 = "1";
const sc_lv<2> sobel_filter::ap_const_lv2_0 = "00";
const sc_lv<11> sobel_filter::ap_const_lv11_0 = "00000000000";
const sc_lv<32> sobel_filter::ap_const_lv32_8 = "1000";
const sc_lv<32> sobel_filter::ap_const_lv32_A = "1010";
const sc_lv<11> sobel_filter::ap_const_lv11_2 = "10";
const sc_lv<32> sobel_filter::ap_const_lv32_780 = "11110000000";
const sc_lv<3> sobel_filter::ap_const_lv3_0 = "000";
const sc_lv<4> sobel_filter::ap_const_lv4_0 = "0000";
const sc_lv<4> sobel_filter::ap_const_lv4_F = "1111";
const sc_lv<2> sobel_filter::ap_const_lv2_1 = "1";
const sc_lv<2> sobel_filter::ap_const_lv2_2 = "10";
const sc_lv<2> sobel_filter::ap_const_lv2_3 = "11";
const sc_lv<32> sobel_filter::ap_const_lv32_1F = "11111";
const sc_lv<7> sobel_filter::ap_const_lv7_0 = "0000000";
const sc_lv<11> sobel_filter::ap_const_lv11_780 = "11110000000";
const sc_lv<11> sobel_filter::ap_const_lv11_1 = "1";
const sc_lv<11> sobel_filter::ap_const_lv11_438 = "10000111000";
const sc_lv<11> sobel_filter::ap_const_lv11_437 = "10000110111";
const sc_lv<11> sobel_filter::ap_const_lv11_3C8 = "1111001000";
const sc_lv<11> sobel_filter::ap_const_lv11_77F = "11101111111";
const sc_lv<12> sobel_filter::ap_const_lv12_FFF = "111111111111";
const sc_lv<8> sobel_filter::ap_const_lv8_0 = "00000000";
const sc_lv<8> sobel_filter::ap_const_lv8_FF = "11111111";
const sc_lv<8> sobel_filter::ap_const_lv8_37 = "110111";
const sc_lv<8> sobel_filter::ap_const_lv8_9B = "10011011";

sobel_filter::sobel_filter(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sobel_filter_AXILiteS_s_axi_U = new sobel_filter_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("sobel_filter_AXILiteS_s_axi_U");
    sobel_filter_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    sobel_filter_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    sobel_filter_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    sobel_filter_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    sobel_filter_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    sobel_filter_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    sobel_filter_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    sobel_filter_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    sobel_filter_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    sobel_filter_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    sobel_filter_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    sobel_filter_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    sobel_filter_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    sobel_filter_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    sobel_filter_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    sobel_filter_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    sobel_filter_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    sobel_filter_AXILiteS_s_axi_U->ACLK(ap_clk);
    sobel_filter_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    sobel_filter_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    sobel_filter_AXILiteS_s_axi_U->ap_start(ap_start);
    sobel_filter_AXILiteS_s_axi_U->interrupt(interrupt);
    sobel_filter_AXILiteS_s_axi_U->ap_ready(ap_ready);
    sobel_filter_AXILiteS_s_axi_U->ap_done(ap_done);
    sobel_filter_AXILiteS_s_axi_U->ap_idle(ap_idle);
    sobel_filter_AXILiteS_s_axi_U->inter_pix(inter_pix);
    sobel_filter_AXILiteS_s_axi_U->out_pix(out_pix);
    sobel_filter_gmem_m_axi_U = new sobel_filter_gmem_m_axi<8,32,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>("sobel_filter_gmem_m_axi_U");
    sobel_filter_gmem_m_axi_U->AWVALID(m_axi_gmem_AWVALID);
    sobel_filter_gmem_m_axi_U->AWREADY(m_axi_gmem_AWREADY);
    sobel_filter_gmem_m_axi_U->AWADDR(m_axi_gmem_AWADDR);
    sobel_filter_gmem_m_axi_U->AWID(m_axi_gmem_AWID);
    sobel_filter_gmem_m_axi_U->AWLEN(m_axi_gmem_AWLEN);
    sobel_filter_gmem_m_axi_U->AWSIZE(m_axi_gmem_AWSIZE);
    sobel_filter_gmem_m_axi_U->AWBURST(m_axi_gmem_AWBURST);
    sobel_filter_gmem_m_axi_U->AWLOCK(m_axi_gmem_AWLOCK);
    sobel_filter_gmem_m_axi_U->AWCACHE(m_axi_gmem_AWCACHE);
    sobel_filter_gmem_m_axi_U->AWPROT(m_axi_gmem_AWPROT);
    sobel_filter_gmem_m_axi_U->AWQOS(m_axi_gmem_AWQOS);
    sobel_filter_gmem_m_axi_U->AWREGION(m_axi_gmem_AWREGION);
    sobel_filter_gmem_m_axi_U->AWUSER(m_axi_gmem_AWUSER);
    sobel_filter_gmem_m_axi_U->WVALID(m_axi_gmem_WVALID);
    sobel_filter_gmem_m_axi_U->WREADY(m_axi_gmem_WREADY);
    sobel_filter_gmem_m_axi_U->WDATA(m_axi_gmem_WDATA);
    sobel_filter_gmem_m_axi_U->WSTRB(m_axi_gmem_WSTRB);
    sobel_filter_gmem_m_axi_U->WLAST(m_axi_gmem_WLAST);
    sobel_filter_gmem_m_axi_U->WID(m_axi_gmem_WID);
    sobel_filter_gmem_m_axi_U->WUSER(m_axi_gmem_WUSER);
    sobel_filter_gmem_m_axi_U->ARVALID(m_axi_gmem_ARVALID);
    sobel_filter_gmem_m_axi_U->ARREADY(m_axi_gmem_ARREADY);
    sobel_filter_gmem_m_axi_U->ARADDR(m_axi_gmem_ARADDR);
    sobel_filter_gmem_m_axi_U->ARID(m_axi_gmem_ARID);
    sobel_filter_gmem_m_axi_U->ARLEN(m_axi_gmem_ARLEN);
    sobel_filter_gmem_m_axi_U->ARSIZE(m_axi_gmem_ARSIZE);
    sobel_filter_gmem_m_axi_U->ARBURST(m_axi_gmem_ARBURST);
    sobel_filter_gmem_m_axi_U->ARLOCK(m_axi_gmem_ARLOCK);
    sobel_filter_gmem_m_axi_U->ARCACHE(m_axi_gmem_ARCACHE);
    sobel_filter_gmem_m_axi_U->ARPROT(m_axi_gmem_ARPROT);
    sobel_filter_gmem_m_axi_U->ARQOS(m_axi_gmem_ARQOS);
    sobel_filter_gmem_m_axi_U->ARREGION(m_axi_gmem_ARREGION);
    sobel_filter_gmem_m_axi_U->ARUSER(m_axi_gmem_ARUSER);
    sobel_filter_gmem_m_axi_U->RVALID(m_axi_gmem_RVALID);
    sobel_filter_gmem_m_axi_U->RREADY(m_axi_gmem_RREADY);
    sobel_filter_gmem_m_axi_U->RDATA(m_axi_gmem_RDATA);
    sobel_filter_gmem_m_axi_U->RLAST(m_axi_gmem_RLAST);
    sobel_filter_gmem_m_axi_U->RID(m_axi_gmem_RID);
    sobel_filter_gmem_m_axi_U->RUSER(m_axi_gmem_RUSER);
    sobel_filter_gmem_m_axi_U->RRESP(m_axi_gmem_RRESP);
    sobel_filter_gmem_m_axi_U->BVALID(m_axi_gmem_BVALID);
    sobel_filter_gmem_m_axi_U->BREADY(m_axi_gmem_BREADY);
    sobel_filter_gmem_m_axi_U->BRESP(m_axi_gmem_BRESP);
    sobel_filter_gmem_m_axi_U->BID(m_axi_gmem_BID);
    sobel_filter_gmem_m_axi_U->BUSER(m_axi_gmem_BUSER);
    sobel_filter_gmem_m_axi_U->ACLK(ap_clk);
    sobel_filter_gmem_m_axi_U->ARESET(ap_rst_n_inv);
    sobel_filter_gmem_m_axi_U->ACLK_EN(ap_var_for_const0);
    sobel_filter_gmem_m_axi_U->I_ARVALID(gmem_ARVALID);
    sobel_filter_gmem_m_axi_U->I_ARREADY(gmem_ARREADY);
    sobel_filter_gmem_m_axi_U->I_ARADDR(gmem_ARADDR);
    sobel_filter_gmem_m_axi_U->I_ARID(ap_var_for_const1);
    sobel_filter_gmem_m_axi_U->I_ARLEN(ap_var_for_const2);
    sobel_filter_gmem_m_axi_U->I_ARSIZE(ap_var_for_const3);
    sobel_filter_gmem_m_axi_U->I_ARLOCK(ap_var_for_const4);
    sobel_filter_gmem_m_axi_U->I_ARCACHE(ap_var_for_const5);
    sobel_filter_gmem_m_axi_U->I_ARQOS(ap_var_for_const5);
    sobel_filter_gmem_m_axi_U->I_ARPROT(ap_var_for_const3);
    sobel_filter_gmem_m_axi_U->I_ARUSER(ap_var_for_const1);
    sobel_filter_gmem_m_axi_U->I_ARBURST(ap_var_for_const4);
    sobel_filter_gmem_m_axi_U->I_ARREGION(ap_var_for_const5);
    sobel_filter_gmem_m_axi_U->I_RVALID(gmem_RVALID);
    sobel_filter_gmem_m_axi_U->I_RREADY(gmem_RREADY);
    sobel_filter_gmem_m_axi_U->I_RDATA(gmem_RDATA);
    sobel_filter_gmem_m_axi_U->I_RID(gmem_RID);
    sobel_filter_gmem_m_axi_U->I_RUSER(gmem_RUSER);
    sobel_filter_gmem_m_axi_U->I_RRESP(gmem_RRESP);
    sobel_filter_gmem_m_axi_U->I_RLAST(gmem_RLAST);
    sobel_filter_gmem_m_axi_U->I_AWVALID(ap_var_for_const6);
    sobel_filter_gmem_m_axi_U->I_AWREADY(gmem_AWREADY);
    sobel_filter_gmem_m_axi_U->I_AWADDR(ap_var_for_const7);
    sobel_filter_gmem_m_axi_U->I_AWID(ap_var_for_const1);
    sobel_filter_gmem_m_axi_U->I_AWLEN(ap_var_for_const7);
    sobel_filter_gmem_m_axi_U->I_AWSIZE(ap_var_for_const3);
    sobel_filter_gmem_m_axi_U->I_AWLOCK(ap_var_for_const4);
    sobel_filter_gmem_m_axi_U->I_AWCACHE(ap_var_for_const5);
    sobel_filter_gmem_m_axi_U->I_AWQOS(ap_var_for_const5);
    sobel_filter_gmem_m_axi_U->I_AWPROT(ap_var_for_const3);
    sobel_filter_gmem_m_axi_U->I_AWUSER(ap_var_for_const1);
    sobel_filter_gmem_m_axi_U->I_AWBURST(ap_var_for_const4);
    sobel_filter_gmem_m_axi_U->I_AWREGION(ap_var_for_const5);
    sobel_filter_gmem_m_axi_U->I_WVALID(ap_var_for_const6);
    sobel_filter_gmem_m_axi_U->I_WREADY(gmem_WREADY);
    sobel_filter_gmem_m_axi_U->I_WDATA(ap_var_for_const8);
    sobel_filter_gmem_m_axi_U->I_WID(ap_var_for_const1);
    sobel_filter_gmem_m_axi_U->I_WUSER(ap_var_for_const1);
    sobel_filter_gmem_m_axi_U->I_WLAST(ap_var_for_const6);
    sobel_filter_gmem_m_axi_U->I_WSTRB(ap_var_for_const1);
    sobel_filter_gmem_m_axi_U->I_BVALID(gmem_BVALID);
    sobel_filter_gmem_m_axi_U->I_BREADY(ap_var_for_const6);
    sobel_filter_gmem_m_axi_U->I_BRESP(gmem_BRESP);
    sobel_filter_gmem_m_axi_U->I_BID(gmem_BID);
    sobel_filter_gmem_m_axi_U->I_BUSER(gmem_BUSER);
    sobel_filter_gmem2_m_axi_U = new sobel_filter_gmem2_m_axi<32,32,5,16,16,16,16,C_M_AXI_GMEM2_ID_WIDTH,C_M_AXI_GMEM2_ADDR_WIDTH,C_M_AXI_GMEM2_DATA_WIDTH,C_M_AXI_GMEM2_AWUSER_WIDTH,C_M_AXI_GMEM2_ARUSER_WIDTH,C_M_AXI_GMEM2_WUSER_WIDTH,C_M_AXI_GMEM2_RUSER_WIDTH,C_M_AXI_GMEM2_BUSER_WIDTH,C_M_AXI_GMEM2_USER_VALUE,C_M_AXI_GMEM2_PROT_VALUE,C_M_AXI_GMEM2_CACHE_VALUE>("sobel_filter_gmem2_m_axi_U");
    sobel_filter_gmem2_m_axi_U->AWVALID(m_axi_gmem2_AWVALID);
    sobel_filter_gmem2_m_axi_U->AWREADY(m_axi_gmem2_AWREADY);
    sobel_filter_gmem2_m_axi_U->AWADDR(m_axi_gmem2_AWADDR);
    sobel_filter_gmem2_m_axi_U->AWID(m_axi_gmem2_AWID);
    sobel_filter_gmem2_m_axi_U->AWLEN(m_axi_gmem2_AWLEN);
    sobel_filter_gmem2_m_axi_U->AWSIZE(m_axi_gmem2_AWSIZE);
    sobel_filter_gmem2_m_axi_U->AWBURST(m_axi_gmem2_AWBURST);
    sobel_filter_gmem2_m_axi_U->AWLOCK(m_axi_gmem2_AWLOCK);
    sobel_filter_gmem2_m_axi_U->AWCACHE(m_axi_gmem2_AWCACHE);
    sobel_filter_gmem2_m_axi_U->AWPROT(m_axi_gmem2_AWPROT);
    sobel_filter_gmem2_m_axi_U->AWQOS(m_axi_gmem2_AWQOS);
    sobel_filter_gmem2_m_axi_U->AWREGION(m_axi_gmem2_AWREGION);
    sobel_filter_gmem2_m_axi_U->AWUSER(m_axi_gmem2_AWUSER);
    sobel_filter_gmem2_m_axi_U->WVALID(m_axi_gmem2_WVALID);
    sobel_filter_gmem2_m_axi_U->WREADY(m_axi_gmem2_WREADY);
    sobel_filter_gmem2_m_axi_U->WDATA(m_axi_gmem2_WDATA);
    sobel_filter_gmem2_m_axi_U->WSTRB(m_axi_gmem2_WSTRB);
    sobel_filter_gmem2_m_axi_U->WLAST(m_axi_gmem2_WLAST);
    sobel_filter_gmem2_m_axi_U->WID(m_axi_gmem2_WID);
    sobel_filter_gmem2_m_axi_U->WUSER(m_axi_gmem2_WUSER);
    sobel_filter_gmem2_m_axi_U->ARVALID(m_axi_gmem2_ARVALID);
    sobel_filter_gmem2_m_axi_U->ARREADY(m_axi_gmem2_ARREADY);
    sobel_filter_gmem2_m_axi_U->ARADDR(m_axi_gmem2_ARADDR);
    sobel_filter_gmem2_m_axi_U->ARID(m_axi_gmem2_ARID);
    sobel_filter_gmem2_m_axi_U->ARLEN(m_axi_gmem2_ARLEN);
    sobel_filter_gmem2_m_axi_U->ARSIZE(m_axi_gmem2_ARSIZE);
    sobel_filter_gmem2_m_axi_U->ARBURST(m_axi_gmem2_ARBURST);
    sobel_filter_gmem2_m_axi_U->ARLOCK(m_axi_gmem2_ARLOCK);
    sobel_filter_gmem2_m_axi_U->ARCACHE(m_axi_gmem2_ARCACHE);
    sobel_filter_gmem2_m_axi_U->ARPROT(m_axi_gmem2_ARPROT);
    sobel_filter_gmem2_m_axi_U->ARQOS(m_axi_gmem2_ARQOS);
    sobel_filter_gmem2_m_axi_U->ARREGION(m_axi_gmem2_ARREGION);
    sobel_filter_gmem2_m_axi_U->ARUSER(m_axi_gmem2_ARUSER);
    sobel_filter_gmem2_m_axi_U->RVALID(m_axi_gmem2_RVALID);
    sobel_filter_gmem2_m_axi_U->RREADY(m_axi_gmem2_RREADY);
    sobel_filter_gmem2_m_axi_U->RDATA(m_axi_gmem2_RDATA);
    sobel_filter_gmem2_m_axi_U->RLAST(m_axi_gmem2_RLAST);
    sobel_filter_gmem2_m_axi_U->RID(m_axi_gmem2_RID);
    sobel_filter_gmem2_m_axi_U->RUSER(m_axi_gmem2_RUSER);
    sobel_filter_gmem2_m_axi_U->RRESP(m_axi_gmem2_RRESP);
    sobel_filter_gmem2_m_axi_U->BVALID(m_axi_gmem2_BVALID);
    sobel_filter_gmem2_m_axi_U->BREADY(m_axi_gmem2_BREADY);
    sobel_filter_gmem2_m_axi_U->BRESP(m_axi_gmem2_BRESP);
    sobel_filter_gmem2_m_axi_U->BID(m_axi_gmem2_BID);
    sobel_filter_gmem2_m_axi_U->BUSER(m_axi_gmem2_BUSER);
    sobel_filter_gmem2_m_axi_U->ACLK(ap_clk);
    sobel_filter_gmem2_m_axi_U->ARESET(ap_rst_n_inv);
    sobel_filter_gmem2_m_axi_U->ACLK_EN(ap_var_for_const0);
    sobel_filter_gmem2_m_axi_U->I_ARVALID(ap_var_for_const6);
    sobel_filter_gmem2_m_axi_U->I_ARREADY(gmem2_ARREADY);
    sobel_filter_gmem2_m_axi_U->I_ARADDR(ap_var_for_const7);
    sobel_filter_gmem2_m_axi_U->I_ARID(ap_var_for_const1);
    sobel_filter_gmem2_m_axi_U->I_ARLEN(ap_var_for_const7);
    sobel_filter_gmem2_m_axi_U->I_ARSIZE(ap_var_for_const3);
    sobel_filter_gmem2_m_axi_U->I_ARLOCK(ap_var_for_const4);
    sobel_filter_gmem2_m_axi_U->I_ARCACHE(ap_var_for_const5);
    sobel_filter_gmem2_m_axi_U->I_ARQOS(ap_var_for_const5);
    sobel_filter_gmem2_m_axi_U->I_ARPROT(ap_var_for_const3);
    sobel_filter_gmem2_m_axi_U->I_ARUSER(ap_var_for_const1);
    sobel_filter_gmem2_m_axi_U->I_ARBURST(ap_var_for_const4);
    sobel_filter_gmem2_m_axi_U->I_ARREGION(ap_var_for_const5);
    sobel_filter_gmem2_m_axi_U->I_RVALID(gmem2_RVALID);
    sobel_filter_gmem2_m_axi_U->I_RREADY(ap_var_for_const6);
    sobel_filter_gmem2_m_axi_U->I_RDATA(gmem2_RDATA);
    sobel_filter_gmem2_m_axi_U->I_RID(gmem2_RID);
    sobel_filter_gmem2_m_axi_U->I_RUSER(gmem2_RUSER);
    sobel_filter_gmem2_m_axi_U->I_RRESP(gmem2_RRESP);
    sobel_filter_gmem2_m_axi_U->I_RLAST(gmem2_RLAST);
    sobel_filter_gmem2_m_axi_U->I_AWVALID(gmem2_AWVALID);
    sobel_filter_gmem2_m_axi_U->I_AWREADY(gmem2_AWREADY);
    sobel_filter_gmem2_m_axi_U->I_AWADDR(gmem2_addr_reg_1169);
    sobel_filter_gmem2_m_axi_U->I_AWID(ap_var_for_const1);
    sobel_filter_gmem2_m_axi_U->I_AWLEN(ap_var_for_const2);
    sobel_filter_gmem2_m_axi_U->I_AWSIZE(ap_var_for_const3);
    sobel_filter_gmem2_m_axi_U->I_AWLOCK(ap_var_for_const4);
    sobel_filter_gmem2_m_axi_U->I_AWCACHE(ap_var_for_const5);
    sobel_filter_gmem2_m_axi_U->I_AWQOS(ap_var_for_const5);
    sobel_filter_gmem2_m_axi_U->I_AWPROT(ap_var_for_const3);
    sobel_filter_gmem2_m_axi_U->I_AWUSER(ap_var_for_const1);
    sobel_filter_gmem2_m_axi_U->I_AWBURST(ap_var_for_const4);
    sobel_filter_gmem2_m_axi_U->I_AWREGION(ap_var_for_const5);
    sobel_filter_gmem2_m_axi_U->I_WVALID(gmem2_WVALID);
    sobel_filter_gmem2_m_axi_U->I_WREADY(gmem2_WREADY);
    sobel_filter_gmem2_m_axi_U->I_WDATA(gmem2_WDATA);
    sobel_filter_gmem2_m_axi_U->I_WID(ap_var_for_const1);
    sobel_filter_gmem2_m_axi_U->I_WUSER(ap_var_for_const1);
    sobel_filter_gmem2_m_axi_U->I_WLAST(ap_var_for_const6);
    sobel_filter_gmem2_m_axi_U->I_WSTRB(ap_var_for_const9);
    sobel_filter_gmem2_m_axi_U->I_BVALID(gmem2_BVALID);
    sobel_filter_gmem2_m_axi_U->I_BREADY(gmem2_BREADY);
    sobel_filter_gmem2_m_axi_U->I_BRESP(gmem2_BRESP);
    sobel_filter_gmem2_m_axi_U->I_BID(gmem2_BID);
    sobel_filter_gmem2_m_axi_U->I_BUSER(gmem2_BUSER);
    lineBuffer_0_U = new sobel_filter_linebkb("lineBuffer_0_U");
    lineBuffer_0_U->clk(ap_clk);
    lineBuffer_0_U->reset(ap_rst_n_inv);
    lineBuffer_0_U->address0(lineBuffer_0_address0);
    lineBuffer_0_U->ce0(lineBuffer_0_ce0);
    lineBuffer_0_U->we0(lineBuffer_0_we0);
    lineBuffer_0_U->d0(gmem_addr_read_reg_1132);
    lineBuffer_0_U->q0(lineBuffer_0_q0);
    lineBuffer_0_U->address1(lineBuffer_0_address1);
    lineBuffer_0_U->ce1(lineBuffer_0_ce1);
    lineBuffer_0_U->we1(lineBuffer_0_we1);
    lineBuffer_0_U->d1(gmem_addr_1_read_reg_1294);
    lineBuffer_0_U->q1(lineBuffer_0_q1);
    lineBuffer_1_U = new sobel_filter_linebkb("lineBuffer_1_U");
    lineBuffer_1_U->clk(ap_clk);
    lineBuffer_1_U->reset(ap_rst_n_inv);
    lineBuffer_1_U->address0(lineBuffer_1_address0);
    lineBuffer_1_U->ce0(lineBuffer_1_ce0);
    lineBuffer_1_U->we0(lineBuffer_1_we0);
    lineBuffer_1_U->d0(gmem_addr_read_reg_1132);
    lineBuffer_1_U->q0(lineBuffer_1_q0);
    lineBuffer_1_U->address1(lineBuffer_1_address1);
    lineBuffer_1_U->ce1(lineBuffer_1_ce1);
    lineBuffer_1_U->we1(lineBuffer_1_we1);
    lineBuffer_1_U->d1(gmem_addr_1_read_reg_1294);
    lineBuffer_1_U->q1(lineBuffer_1_q1);
    lineBuffer_2_U = new sobel_filter_linedEe("lineBuffer_2_U");
    lineBuffer_2_U->clk(ap_clk);
    lineBuffer_2_U->reset(ap_rst_n_inv);
    lineBuffer_2_U->address0(lineBuffer_2_address0);
    lineBuffer_2_U->ce0(lineBuffer_2_ce0);
    lineBuffer_2_U->q0(lineBuffer_2_q0);
    lineBuffer_2_U->address1(lineBuffer_2_address1);
    lineBuffer_2_U->ce1(lineBuffer_2_ce1);
    lineBuffer_2_U->we1(lineBuffer_2_we1);
    lineBuffer_2_U->d1(gmem_addr_1_read_reg_1294);
    lineBuffer_2_U->q1(lineBuffer_2_q1);
    lineBuffer_3_U = new sobel_filter_linedEe("lineBuffer_3_U");
    lineBuffer_3_U->clk(ap_clk);
    lineBuffer_3_U->reset(ap_rst_n_inv);
    lineBuffer_3_U->address0(lineBuffer_3_address0);
    lineBuffer_3_U->ce0(lineBuffer_3_ce0);
    lineBuffer_3_U->q0(lineBuffer_3_q0);
    lineBuffer_3_U->address1(lineBuffer_3_address1);
    lineBuffer_3_U->ce1(lineBuffer_3_ce1);
    lineBuffer_3_U->we1(lineBuffer_3_we1);
    lineBuffer_3_U->d1(gmem_addr_1_read_reg_1294);
    lineBuffer_3_U->q1(lineBuffer_3_q1);
    sobel_filter_mux_fYi_U1 = new sobel_filter_mux_fYi<1,1,8,8,8,8,2,8>("sobel_filter_mux_fYi_U1");
    sobel_filter_mux_fYi_U1->din1(lineBuffer_0_q0);
    sobel_filter_mux_fYi_U1->din2(lineBuffer_1_q0);
    sobel_filter_mux_fYi_U1->din3(lineBuffer_2_q0);
    sobel_filter_mux_fYi_U1->din4(lineBuffer_3_q0);
    sobel_filter_mux_fYi_U1->din5(tmp_28_0_t_reg_1185);
    sobel_filter_mux_fYi_U1->dout(tmp_33_fu_741_p6);
    sobel_filter_mux_fYi_U2 = new sobel_filter_mux_fYi<1,1,8,8,8,8,2,8>("sobel_filter_mux_fYi_U2");
    sobel_filter_mux_fYi_U2->din1(lineBuffer_0_q0);
    sobel_filter_mux_fYi_U2->din2(lineBuffer_1_q0);
    sobel_filter_mux_fYi_U2->din3(lineBuffer_2_q0);
    sobel_filter_mux_fYi_U2->din4(lineBuffer_3_q0);
    sobel_filter_mux_fYi_U2->din5(tmp_28_2_t_reg_1192);
    sobel_filter_mux_fYi_U2->dout(tmp_43_fu_761_p6);
    sobel_filter_mux_fYi_U3 = new sobel_filter_mux_fYi<1,1,8,8,8,8,2,8>("sobel_filter_mux_fYi_U3");
    sobel_filter_mux_fYi_U3->din1(lineBuffer_0_q1);
    sobel_filter_mux_fYi_U3->din2(lineBuffer_1_q1);
    sobel_filter_mux_fYi_U3->din3(lineBuffer_2_q0);
    sobel_filter_mux_fYi_U3->din4(lineBuffer_3_q0);
    sobel_filter_mux_fYi_U3->din5(tmp_28_0_t_reg_1185);
    sobel_filter_mux_fYi_U3->dout(tmp_32_fu_774_p6);
    sobel_filter_mux_fYi_U4 = new sobel_filter_mux_fYi<1,1,8,8,8,8,2,8>("sobel_filter_mux_fYi_U4");
    sobel_filter_mux_fYi_U4->din1(lineBuffer_0_q0);
    sobel_filter_mux_fYi_U4->din2(lineBuffer_1_q0);
    sobel_filter_mux_fYi_U4->din3(lineBuffer_2_q1);
    sobel_filter_mux_fYi_U4->din4(lineBuffer_3_q1);
    sobel_filter_mux_fYi_U4->din5(tmp_28_0_t_reg_1185);
    sobel_filter_mux_fYi_U4->dout(tmp_37_fu_791_p6);
    sobel_filter_mux_fYi_U5 = new sobel_filter_mux_fYi<1,1,8,8,8,8,2,8>("sobel_filter_mux_fYi_U5");
    sobel_filter_mux_fYi_U5->din1(lineBuffer_0_q1);
    sobel_filter_mux_fYi_U5->din2(lineBuffer_1_q1);
    sobel_filter_mux_fYi_U5->din3(lineBuffer_2_q0);
    sobel_filter_mux_fYi_U5->din4(lineBuffer_3_q0);
    sobel_filter_mux_fYi_U5->din5(tmp_26_reg_1156);
    sobel_filter_mux_fYi_U5->dout(tmp_40_fu_814_p6);
    sobel_filter_mux_fYi_U6 = new sobel_filter_mux_fYi<1,1,8,8,8,8,2,8>("sobel_filter_mux_fYi_U6");
    sobel_filter_mux_fYi_U6->din1(lineBuffer_0_q1);
    sobel_filter_mux_fYi_U6->din2(lineBuffer_1_q1);
    sobel_filter_mux_fYi_U6->din3(lineBuffer_2_q0);
    sobel_filter_mux_fYi_U6->din4(lineBuffer_3_q0);
    sobel_filter_mux_fYi_U6->din5(tmp_28_2_t_reg_1192);
    sobel_filter_mux_fYi_U6->dout(tmp_42_fu_833_p6);
    sobel_filter_mux_fYi_U7 = new sobel_filter_mux_fYi<1,1,8,8,8,8,2,8>("sobel_filter_mux_fYi_U7");
    sobel_filter_mux_fYi_U7->din1(lineBuffer_0_load_2_reg_1302);
    sobel_filter_mux_fYi_U7->din2(lineBuffer_1_load_2_reg_1308);
    sobel_filter_mux_fYi_U7->din3(lineBuffer_2_load_2_reg_1314);
    sobel_filter_mux_fYi_U7->din4(lineBuffer_3_load_2_reg_1320);
    sobel_filter_mux_fYi_U7->din5(tmp_26_reg_1156);
    sobel_filter_mux_fYi_U7->dout(tmp_41_fu_877_p6);
    sobel_filter_mux_fYi_U8 = new sobel_filter_mux_fYi<1,1,8,8,8,8,2,8>("sobel_filter_mux_fYi_U8");
    sobel_filter_mux_fYi_U8->din1(lineBuffer_0_load_2_reg_1302);
    sobel_filter_mux_fYi_U8->din2(lineBuffer_1_load_2_reg_1308);
    sobel_filter_mux_fYi_U8->din3(lineBuffer_2_load_2_reg_1314);
    sobel_filter_mux_fYi_U8->din4(lineBuffer_3_load_2_reg_1320);
    sobel_filter_mux_fYi_U8->din5(tmp_28_2_t_reg_1192);
    sobel_filter_mux_fYi_U8->dout(tmp_44_fu_949_p6);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_01001);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_s_reg_1204 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp0_stage1_11001);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_s_reg_1204 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_sig_ioackin_gmem2_WREADY );

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_s_reg_1204 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_sig_ioackin_gmem2_WREADY );

    SC_METHOD(thread_ap_block_state10);
    sensitive << ( tmp_4_fu_485_p2 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_state20_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state21_pp0_stage1_iter0);
    sensitive << ( tmp_s_reg_1204 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_state22_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state23_pp0_stage1_iter1);

    SC_METHOD(thread_ap_block_state24_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state25_pp0_stage1_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state20);
    sensitive << ( tmp_s_fu_681_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_3_fu_503_p2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_row_assign_phi_fu_385_p4);
    sensitive << ( tmp_s_reg_1204 );
    sensitive << ( row_assign_reg_381 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( j_reg_1208 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_3_fu_503_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_gmem2_AWREADY);
    sensitive << ( gmem2_AWREADY );
    sensitive << ( ap_reg_ioackin_gmem2_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem2_WREADY);
    sensitive << ( gmem2_WREADY );
    sensitive << ( ap_reg_ioackin_gmem2_WREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_ARREADY);
    sensitive << ( gmem_ARREADY );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_cond_fu_456_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_410_p2 );
    sensitive << ( lastLine_reg_336 );

    SC_METHOD(thread_edge_val_1_i_cast_fu_1059_p3);
    sensitive << ( not_or_cond2_fu_1054_p2 );

    SC_METHOD(thread_edge_val_fu_1028_p2);
    sensitive << ( tmp_24_fu_1022_p2 );

    SC_METHOD(thread_gmem2_AWVALID);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_reg_ioackin_gmem2_AWREADY );

    SC_METHOD(thread_gmem2_BREADY);
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( gmem2_BVALID );

    SC_METHOD(thread_gmem2_WDATA);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( val_reg_1368 );
    sensitive << ( ap_reg_ioackin_gmem2_WREADY );
    sensitive << ( ap_block_pp0_stage1_01001 );

    SC_METHOD(thread_gmem2_WVALID);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_reg_ioackin_gmem2_WREADY );
    sensitive << ( ap_block_pp0_stage1_01001 );

    SC_METHOD(thread_gmem2_blk_n_AW);
    sensitive << ( m_axi_gmem2_AWREADY );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_gmem2_blk_n_B);
    sensitive << ( m_axi_gmem2_BVALID );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_gmem2_blk_n_W);
    sensitive << ( m_axi_gmem2_WREADY );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_gmem_ARADDR);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( gmem_addr_reg_1118 );
    sensitive << ( gmem_addr_1_reg_1175 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_gmem_ARVALID);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_gmem_RREADY);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_4_fu_485_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_s_reg_1204 );
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_gmem_blk_n_AR);
    sensitive << ( m_axi_gmem_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_gmem_blk_n_R);
    sensitive << ( m_axi_gmem_RVALID );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_4_fu_485_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( tmp_s_reg_1204 );

    SC_METHOD(thread_i_1_fu_491_p2);
    sensitive << ( i_reg_347 );

    SC_METHOD(thread_i_2_fu_509_p2);
    sensitive << ( i1_reg_370 );

    SC_METHOD(thread_inter_pix2_sum6_cast_fu_653_p1);
    sensitive << ( inter_pix2_sum6_fu_648_p2 );

    SC_METHOD(thread_inter_pix2_sum6_fu_648_p2);
    sensitive << ( tmp_22_cast_reg_1100 );
    sensitive << ( tmp_42_cast_fu_623_p1 );

    SC_METHOD(thread_inter_pix2_sum_cast_fu_475_p1);
    sensitive << ( inter_pix2_sum_fu_470_p2 );

    SC_METHOD(thread_inter_pix2_sum_fu_470_p2);
    sensitive << ( tmp_22_cast_reg_1100 );
    sensitive << ( tmp_26_cast_fu_466_p1 );

    SC_METHOD(thread_j_fu_687_p2);
    sensitive << ( ap_phi_mux_row_assign_phi_fu_385_p4 );

    SC_METHOD(thread_lastLine_2_fu_1089_p2);
    sensitive << ( lastLine_1_reg_358 );

    SC_METHOD(thread_lineBuffer_0_address0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( lineBuffer_0_addr_reg_1138 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_35_0_1_fu_716_p1 );
    sensitive << ( tmp_35_0_2_fu_754_p1 );

    SC_METHOD(thread_lineBuffer_0_address1);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( lineBuffer_0_addr_2_reg_1220 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_30_fu_733_p1 );

    SC_METHOD(thread_lineBuffer_0_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_lineBuffer_0_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_lineBuffer_0_we0);
    sensitive << ( cond_reg_1114 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_lineBuffer_0_we1);
    sensitive << ( tmp_23_reg_1181 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_lineBuffer_1_address0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( lineBuffer_1_addr_reg_1143 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_35_0_1_fu_716_p1 );
    sensitive << ( tmp_35_0_2_fu_754_p1 );

    SC_METHOD(thread_lineBuffer_1_address1);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( lineBuffer_1_addr_2_reg_1226 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_30_fu_733_p1 );

    SC_METHOD(thread_lineBuffer_1_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_lineBuffer_1_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_lineBuffer_1_we0);
    sensitive << ( cond_reg_1114 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_lineBuffer_1_we1);
    sensitive << ( tmp_23_reg_1181 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_lineBuffer_2_address0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_35_0_1_fu_716_p1 );
    sensitive << ( tmp_30_fu_733_p1 );

    SC_METHOD(thread_lineBuffer_2_address1);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( lineBuffer_2_addr_1_reg_1232 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_35_0_2_fu_754_p1 );

    SC_METHOD(thread_lineBuffer_2_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_lineBuffer_2_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_lineBuffer_2_we1);
    sensitive << ( tmp_23_reg_1181 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_lineBuffer_3_address0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_35_0_1_fu_716_p1 );
    sensitive << ( tmp_30_fu_733_p1 );

    SC_METHOD(thread_lineBuffer_3_address1);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( lineBuffer_3_addr_1_reg_1238 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_35_0_2_fu_754_p1 );

    SC_METHOD(thread_lineBuffer_3_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_lineBuffer_3_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_lineBuffer_3_we1);
    sensitive << ( tmp_23_reg_1181 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_not_or_cond2_fu_1054_p2);
    sensitive << ( ap_reg_pp0_iter1_or_cond2_reg_1214 );

    SC_METHOD(thread_or_cond2_fu_711_p2);
    sensitive << ( tmp1_reg_1164 );
    sensitive << ( tmp2_fu_705_p2 );

    SC_METHOD(thread_out_pix4_sum_cast_fu_638_p1);
    sensitive << ( out_pix4_sum_fu_633_p2 );

    SC_METHOD(thread_out_pix4_sum_fu_633_p2);
    sensitive << ( tmp_20_cast_reg_1095 );
    sensitive << ( tmp_30_cast_fu_615_p1 );

    SC_METHOD(thread_p_i_fu_1046_p3);
    sensitive << ( tmp_31_fu_1040_p2 );
    sensitive << ( edge_val_fu_1028_p2 );

    SC_METHOD(thread_p_shl1_cast_fu_867_p1);
    sensitive << ( p_shl1_fu_860_p3 );

    SC_METHOD(thread_p_shl1_fu_860_p3);
    sensitive << ( tmp_40_reg_1331 );

    SC_METHOD(thread_p_shl2_cast_fu_446_p1);
    sensitive << ( p_shl2_fu_438_p3 );

    SC_METHOD(thread_p_shl2_fu_438_p3);
    sensitive << ( tmp_13_fu_422_p1 );

    SC_METHOD(thread_p_shl3_cast_fu_585_p1);
    sensitive << ( p_shl3_fu_577_p3 );

    SC_METHOD(thread_p_shl3_fu_577_p3);
    sensitive << ( tmp_8_fu_569_p3 );

    SC_METHOD(thread_p_shl4_cast_fu_597_p1);
    sensitive << ( p_shl4_fu_589_p3 );

    SC_METHOD(thread_p_shl4_fu_589_p3);
    sensitive << ( tmp_8_fu_569_p3 );

    SC_METHOD(thread_p_shl5_cast_fu_535_p1);
    sensitive << ( p_shl5_fu_527_p3 );

    SC_METHOD(thread_p_shl5_fu_527_p3);
    sensitive << ( i1_reg_370 );

    SC_METHOD(thread_p_shl6_cast_fu_547_p1);
    sensitive << ( p_shl6_fu_539_p3 );

    SC_METHOD(thread_p_shl6_fu_539_p3);
    sensitive << ( i1_reg_370 );

    SC_METHOD(thread_p_shl7_cast_fu_939_p1);
    sensitive << ( p_shl7_fu_932_p3 );

    SC_METHOD(thread_p_shl7_fu_932_p3);
    sensitive << ( tmp_43_reg_1289 );

    SC_METHOD(thread_p_shl_cast_fu_434_p1);
    sensitive << ( p_shl_fu_426_p3 );

    SC_METHOD(thread_p_shl_fu_426_p3);
    sensitive << ( tmp_13_fu_422_p1 );

    SC_METHOD(thread_row_assign_cast_fu_677_p1);
    sensitive << ( ap_phi_mux_row_assign_phi_fu_385_p4 );

    SC_METHOD(thread_tmp1_fu_627_p2);
    sensitive << ( tmp_5_fu_515_p2 );
    sensitive << ( tmp_6_fu_521_p2 );

    SC_METHOD(thread_tmp2_fu_705_p2);
    sensitive << ( tmp_16_fu_693_p2 );
    sensitive << ( tmp_17_fu_699_p2 );

    SC_METHOD(thread_tmp3_cast_fu_904_p1);
    sensitive << ( tmp3_reg_1336 );

    SC_METHOD(thread_tmp3_fu_827_p2);
    sensitive << ( tmp_36_0_2_cast_fu_804_p1 );
    sensitive << ( tmp_361_cast_fu_787_p1 );

    SC_METHOD(thread_tmp_11_fu_416_p2);
    sensitive << ( lastLine_reg_336 );

    SC_METHOD(thread_tmp_12_fu_392_p4);
    sensitive << ( out_pix );

    SC_METHOD(thread_tmp_13_fu_422_p1);
    sensitive << ( lastLine_reg_336 );

    SC_METHOD(thread_tmp_14_fu_497_p1);
    sensitive << ( i_reg_347 );

    SC_METHOD(thread_tmp_16_fu_693_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_s_fu_681_p2 );
    sensitive << ( ap_phi_mux_row_assign_phi_fu_385_p4 );

    SC_METHOD(thread_tmp_17_fu_699_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_s_fu_681_p2 );
    sensitive << ( ap_phi_mux_row_assign_phi_fu_385_p4 );

    SC_METHOD(thread_tmp_18_fu_988_p2);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( x_weight_2_2_reg_1346 );

    SC_METHOD(thread_tmp_19_fu_462_p1);
    sensitive << ( tmp_1_fu_450_p2 );

    SC_METHOD(thread_tmp_1_fu_450_p2);
    sensitive << ( p_shl_cast_fu_434_p1 );
    sensitive << ( p_shl2_cast_fu_446_p1 );

    SC_METHOD(thread_tmp_20_cast_fu_402_p1);
    sensitive << ( tmp_12_fu_392_p4 );

    SC_METHOD(thread_tmp_20_fu_557_p2);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_3_fu_503_p2 );
    sensitive << ( lastLine_1_reg_358 );

    SC_METHOD(thread_tmp_21_fu_1005_p2);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( y_weight_2_2_reg_1351 );

    SC_METHOD(thread_tmp_22_cast_fu_406_p1);
    sensitive << ( inter_pix );

    SC_METHOD(thread_tmp_22_fu_563_p2);
    sensitive << ( lastLine_1_reg_358 );

    SC_METHOD(thread_tmp_23_fu_663_p1);
    sensitive << ( lastLine_1_reg_358 );

    SC_METHOD(thread_tmp_24_fu_1022_p2);
    sensitive << ( tmp_39_fu_1015_p3 );
    sensitive << ( tmp_36_fu_998_p3 );

    SC_METHOD(thread_tmp_25_fu_1034_p2);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_24_fu_1022_p2 );

    SC_METHOD(thread_tmp_26_cast_fu_466_p1);
    sensitive << ( tmp_19_fu_462_p1 );

    SC_METHOD(thread_tmp_26_fu_607_p1);
    sensitive << ( i1_reg_370 );

    SC_METHOD(thread_tmp_27_fu_611_p1);
    sensitive << ( tmp_7_fu_551_p2 );

    SC_METHOD(thread_tmp_28_0_t_fu_667_p2);
    sensitive << ( tmp_26_reg_1156 );

    SC_METHOD(thread_tmp_28_2_t_fu_672_p2);
    sensitive << ( tmp_26_reg_1156 );

    SC_METHOD(thread_tmp_28_fu_619_p1);
    sensitive << ( tmp_9_fu_601_p2 );

    SC_METHOD(thread_tmp_29_fu_724_p2);
    sensitive << ( row_assign_cast_reg_1199 );

    SC_METHOD(thread_tmp_30_cast_fu_615_p1);
    sensitive << ( tmp_27_fu_611_p1 );

    SC_METHOD(thread_tmp_30_fu_733_p1);
    sensitive << ( tmp_341_cast_fu_729_p1 );

    SC_METHOD(thread_tmp_31_fu_1040_p2);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_24_fu_1022_p2 );

    SC_METHOD(thread_tmp_341_cast_fu_729_p1);
    sensitive << ( tmp_29_fu_724_p2 );

    SC_METHOD(thread_tmp_34_fu_978_p2);
    sensitive << ( tmp_44_fu_949_p6 );
    sensitive << ( tmp_46_fu_962_p1 );

    SC_METHOD(thread_tmp_35_0_1_fu_716_p1);
    sensitive << ( ap_phi_mux_row_assign_phi_fu_385_p4 );

    SC_METHOD(thread_tmp_35_0_2_fu_754_p1);
    sensitive << ( j_reg_1208 );

    SC_METHOD(thread_tmp_35_fu_993_p2);
    sensitive << ( tmp_34_reg_1356 );

    SC_METHOD(thread_tmp_361_cast_fu_787_p1);
    sensitive << ( tmp_32_fu_774_p6 );

    SC_METHOD(thread_tmp_36_0_2_cast_fu_804_p1);
    sensitive << ( tmp_37_fu_791_p6 );

    SC_METHOD(thread_tmp_36_2_2_cast_fu_958_p1);
    sensitive << ( tmp_44_fu_949_p6 );

    SC_METHOD(thread_tmp_36_2_cast_fu_917_p1);
    sensitive << ( tmp_42_reg_1341 );

    SC_METHOD(thread_tmp_36_fu_998_p3);
    sensitive << ( tmp_34_reg_1356 );
    sensitive << ( tmp_18_fu_988_p2 );
    sensitive << ( tmp_35_fu_993_p2 );

    SC_METHOD(thread_tmp_38_fu_1010_p2);
    sensitive << ( tmp_47_reg_1362 );

    SC_METHOD(thread_tmp_39_1_2_cast_fu_894_p1);
    sensitive << ( tmp_39_1_2_fu_886_p3 );

    SC_METHOD(thread_tmp_39_1_2_fu_886_p3);
    sensitive << ( tmp_41_fu_877_p6 );

    SC_METHOD(thread_tmp_39_fu_1015_p3);
    sensitive << ( tmp_47_reg_1362 );
    sensitive << ( tmp_21_fu_1005_p2 );
    sensitive << ( tmp_38_fu_1010_p2 );

    SC_METHOD(thread_tmp_3_fu_503_p2);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( i1_reg_370 );

    SC_METHOD(thread_tmp_41_0_1_cast_fu_853_p1);
    sensitive << ( tmp_41_0_1_fu_846_p3 );

    SC_METHOD(thread_tmp_41_0_1_fu_846_p3);
    sensitive << ( tmp_33_reg_1264 );

    SC_METHOD(thread_tmp_42_cast_fu_623_p1);
    sensitive << ( tmp_28_fu_619_p1 );

    SC_METHOD(thread_tmp_46_fu_962_p1);
    sensitive << ( x_weight_2_fu_920_p2 );

    SC_METHOD(thread_tmp_47_fu_984_p1);
    sensitive << ( y_weight_2_2_fu_972_p2 );

    SC_METHOD(thread_tmp_48_fu_1067_p2);
    sensitive << ( ap_reg_pp0_iter1_or_cond2_reg_1214 );
    sensitive << ( tmp_25_fu_1034_p2 );

    SC_METHOD(thread_tmp_4_fu_485_p2);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_4_fu_485_p2 );
    sensitive << ( gmem_RVALID );
    sensitive << ( i_reg_347 );

    SC_METHOD(thread_tmp_5_fu_515_p2);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_3_fu_503_p2 );
    sensitive << ( i1_reg_370 );

    SC_METHOD(thread_tmp_6_fu_521_p2);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_3_fu_503_p2 );
    sensitive << ( i1_reg_370 );

    SC_METHOD(thread_tmp_7_fu_551_p2);
    sensitive << ( p_shl5_cast_fu_535_p1 );
    sensitive << ( p_shl6_cast_fu_547_p1 );

    SC_METHOD(thread_tmp_8_fu_569_p3);
    sensitive << ( lastLine_1_reg_358 );
    sensitive << ( tmp_20_fu_557_p2 );
    sensitive << ( tmp_22_fu_563_p2 );

    SC_METHOD(thread_tmp_9_fu_601_p2);
    sensitive << ( p_shl3_cast_fu_585_p1 );
    sensitive << ( p_shl4_cast_fu_597_p1 );

    SC_METHOD(thread_tmp_fu_410_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( lastLine_reg_336 );

    SC_METHOD(thread_tmp_s_fu_681_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_row_assign_phi_fu_385_p4 );

    SC_METHOD(thread_val_fu_1072_p3);
    sensitive << ( tmp_48_fu_1067_p2 );
    sensitive << ( edge_val_1_i_cast_fu_1059_p3 );
    sensitive << ( p_i_fu_1046_p3 );

    SC_METHOD(thread_x_weight_0_2_cast_fu_857_p1);
    sensitive << ( x_weight_0_2_reg_1326 );

    SC_METHOD(thread_x_weight_0_2_fu_808_p2);
    sensitive << ( tmp_36_0_2_cast_fu_804_p1 );
    sensitive << ( tmp_361_cast_fu_787_p1 );

    SC_METHOD(thread_x_weight_1_1_fu_871_p2);
    sensitive << ( x_weight_0_2_cast_fu_857_p1 );
    sensitive << ( p_shl1_cast_fu_867_p1 );

    SC_METHOD(thread_x_weight_1_2_fu_898_p2);
    sensitive << ( x_weight_1_1_fu_871_p2 );
    sensitive << ( tmp_39_1_2_cast_fu_894_p1 );

    SC_METHOD(thread_x_weight_2_2_fu_966_p2);
    sensitive << ( x_weight_2_fu_920_p2 );
    sensitive << ( tmp_36_2_2_cast_fu_958_p1 );

    SC_METHOD(thread_x_weight_2_fu_920_p2);
    sensitive << ( x_weight_1_2_fu_898_p2 );
    sensitive << ( tmp_36_2_cast_fu_917_p1 );

    SC_METHOD(thread_y_weight_1_2_cast_fu_913_p1);
    sensitive << ( y_weight_1_2_fu_907_p2 );

    SC_METHOD(thread_y_weight_1_2_fu_907_p2);
    sensitive << ( tmp_41_0_1_cast_fu_853_p1 );
    sensitive << ( tmp3_cast_fu_904_p1 );

    SC_METHOD(thread_y_weight_2_1_fu_943_p2);
    sensitive << ( y_weight_2_fu_926_p2 );
    sensitive << ( p_shl7_cast_fu_939_p1 );

    SC_METHOD(thread_y_weight_2_2_fu_972_p2);
    sensitive << ( tmp_36_2_2_cast_fu_958_p1 );
    sensitive << ( y_weight_2_1_fu_943_p2 );

    SC_METHOD(thread_y_weight_2_fu_926_p2);
    sensitive << ( tmp_36_2_cast_fu_917_p1 );
    sensitive << ( y_weight_1_2_cast_fu_913_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_4_fu_485_p2 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( gmem_RVALID );
    sensitive << ( gmem2_BVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_410_p2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_3_fu_503_p2 );
    sensitive << ( ap_sig_ioackin_gmem2_AWREADY );
    sensitive << ( tmp_s_fu_681_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_sig_ioackin_gmem_ARREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const9);

    SC_THREAD(thread_ap_var_for_const8);

    ap_CS_fsm = "00000000000000000000000001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_reg_ioackin_gmem_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem2_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem2_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sobel_filter_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, m_axi_gmem2_AWVALID, "(port)m_axi_gmem2_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem2_AWREADY, "(port)m_axi_gmem2_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem2_AWADDR, "(port)m_axi_gmem2_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem2_AWID, "(port)m_axi_gmem2_AWID");
    sc_trace(mVcdFile, m_axi_gmem2_AWLEN, "(port)m_axi_gmem2_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem2_AWSIZE, "(port)m_axi_gmem2_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem2_AWBURST, "(port)m_axi_gmem2_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem2_AWLOCK, "(port)m_axi_gmem2_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem2_AWCACHE, "(port)m_axi_gmem2_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem2_AWPROT, "(port)m_axi_gmem2_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem2_AWQOS, "(port)m_axi_gmem2_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem2_AWREGION, "(port)m_axi_gmem2_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem2_AWUSER, "(port)m_axi_gmem2_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem2_WVALID, "(port)m_axi_gmem2_WVALID");
    sc_trace(mVcdFile, m_axi_gmem2_WREADY, "(port)m_axi_gmem2_WREADY");
    sc_trace(mVcdFile, m_axi_gmem2_WDATA, "(port)m_axi_gmem2_WDATA");
    sc_trace(mVcdFile, m_axi_gmem2_WSTRB, "(port)m_axi_gmem2_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem2_WLAST, "(port)m_axi_gmem2_WLAST");
    sc_trace(mVcdFile, m_axi_gmem2_WID, "(port)m_axi_gmem2_WID");
    sc_trace(mVcdFile, m_axi_gmem2_WUSER, "(port)m_axi_gmem2_WUSER");
    sc_trace(mVcdFile, m_axi_gmem2_ARVALID, "(port)m_axi_gmem2_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem2_ARREADY, "(port)m_axi_gmem2_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem2_ARADDR, "(port)m_axi_gmem2_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem2_ARID, "(port)m_axi_gmem2_ARID");
    sc_trace(mVcdFile, m_axi_gmem2_ARLEN, "(port)m_axi_gmem2_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem2_ARSIZE, "(port)m_axi_gmem2_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem2_ARBURST, "(port)m_axi_gmem2_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem2_ARLOCK, "(port)m_axi_gmem2_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem2_ARCACHE, "(port)m_axi_gmem2_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem2_ARPROT, "(port)m_axi_gmem2_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem2_ARQOS, "(port)m_axi_gmem2_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem2_ARREGION, "(port)m_axi_gmem2_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem2_ARUSER, "(port)m_axi_gmem2_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem2_RVALID, "(port)m_axi_gmem2_RVALID");
    sc_trace(mVcdFile, m_axi_gmem2_RREADY, "(port)m_axi_gmem2_RREADY");
    sc_trace(mVcdFile, m_axi_gmem2_RDATA, "(port)m_axi_gmem2_RDATA");
    sc_trace(mVcdFile, m_axi_gmem2_RLAST, "(port)m_axi_gmem2_RLAST");
    sc_trace(mVcdFile, m_axi_gmem2_RID, "(port)m_axi_gmem2_RID");
    sc_trace(mVcdFile, m_axi_gmem2_RUSER, "(port)m_axi_gmem2_RUSER");
    sc_trace(mVcdFile, m_axi_gmem2_RRESP, "(port)m_axi_gmem2_RRESP");
    sc_trace(mVcdFile, m_axi_gmem2_BVALID, "(port)m_axi_gmem2_BVALID");
    sc_trace(mVcdFile, m_axi_gmem2_BREADY, "(port)m_axi_gmem2_BREADY");
    sc_trace(mVcdFile, m_axi_gmem2_BRESP, "(port)m_axi_gmem2_BRESP");
    sc_trace(mVcdFile, m_axi_gmem2_BID, "(port)m_axi_gmem2_BID");
    sc_trace(mVcdFile, m_axi_gmem2_BUSER, "(port)m_axi_gmem2_BUSER");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, inter_pix, "inter_pix");
    sc_trace(mVcdFile, out_pix, "out_pix");
    sc_trace(mVcdFile, gmem_blk_n_AR, "gmem_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, gmem_blk_n_R, "gmem_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_4_fu_485_p2, "tmp_4_fu_485_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, tmp_s_reg_1204, "tmp_s_reg_1204");
    sc_trace(mVcdFile, gmem2_blk_n_AW, "gmem2_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, gmem2_blk_n_W, "gmem2_blk_n_W");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, gmem2_blk_n_B, "gmem2_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, gmem_AWREADY, "gmem_AWREADY");
    sc_trace(mVcdFile, gmem_WREADY, "gmem_WREADY");
    sc_trace(mVcdFile, gmem_ARVALID, "gmem_ARVALID");
    sc_trace(mVcdFile, gmem_ARREADY, "gmem_ARREADY");
    sc_trace(mVcdFile, gmem_ARADDR, "gmem_ARADDR");
    sc_trace(mVcdFile, gmem_RVALID, "gmem_RVALID");
    sc_trace(mVcdFile, gmem_RREADY, "gmem_RREADY");
    sc_trace(mVcdFile, gmem_RDATA, "gmem_RDATA");
    sc_trace(mVcdFile, gmem_RLAST, "gmem_RLAST");
    sc_trace(mVcdFile, gmem_RID, "gmem_RID");
    sc_trace(mVcdFile, gmem_RUSER, "gmem_RUSER");
    sc_trace(mVcdFile, gmem_RRESP, "gmem_RRESP");
    sc_trace(mVcdFile, gmem_BVALID, "gmem_BVALID");
    sc_trace(mVcdFile, gmem_BRESP, "gmem_BRESP");
    sc_trace(mVcdFile, gmem_BID, "gmem_BID");
    sc_trace(mVcdFile, gmem_BUSER, "gmem_BUSER");
    sc_trace(mVcdFile, gmem2_AWVALID, "gmem2_AWVALID");
    sc_trace(mVcdFile, gmem2_AWREADY, "gmem2_AWREADY");
    sc_trace(mVcdFile, gmem2_WVALID, "gmem2_WVALID");
    sc_trace(mVcdFile, gmem2_WREADY, "gmem2_WREADY");
    sc_trace(mVcdFile, gmem2_WDATA, "gmem2_WDATA");
    sc_trace(mVcdFile, gmem2_ARREADY, "gmem2_ARREADY");
    sc_trace(mVcdFile, gmem2_RVALID, "gmem2_RVALID");
    sc_trace(mVcdFile, gmem2_RDATA, "gmem2_RDATA");
    sc_trace(mVcdFile, gmem2_RLAST, "gmem2_RLAST");
    sc_trace(mVcdFile, gmem2_RID, "gmem2_RID");
    sc_trace(mVcdFile, gmem2_RUSER, "gmem2_RUSER");
    sc_trace(mVcdFile, gmem2_RRESP, "gmem2_RRESP");
    sc_trace(mVcdFile, gmem2_BVALID, "gmem2_BVALID");
    sc_trace(mVcdFile, gmem2_BREADY, "gmem2_BREADY");
    sc_trace(mVcdFile, gmem2_BRESP, "gmem2_BRESP");
    sc_trace(mVcdFile, gmem2_BID, "gmem2_BID");
    sc_trace(mVcdFile, gmem2_BUSER, "gmem2_BUSER");
    sc_trace(mVcdFile, row_assign_reg_381, "row_assign_reg_381");
    sc_trace(mVcdFile, tmp_20_cast_fu_402_p1, "tmp_20_cast_fu_402_p1");
    sc_trace(mVcdFile, tmp_20_cast_reg_1095, "tmp_20_cast_reg_1095");
    sc_trace(mVcdFile, tmp_22_cast_fu_406_p1, "tmp_22_cast_fu_406_p1");
    sc_trace(mVcdFile, tmp_22_cast_reg_1100, "tmp_22_cast_reg_1100");
    sc_trace(mVcdFile, tmp_11_fu_416_p2, "tmp_11_fu_416_p2");
    sc_trace(mVcdFile, tmp_11_reg_1109, "tmp_11_reg_1109");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, cond_fu_456_p2, "cond_fu_456_p2");
    sc_trace(mVcdFile, cond_reg_1114, "cond_reg_1114");
    sc_trace(mVcdFile, tmp_fu_410_p2, "tmp_fu_410_p2");
    sc_trace(mVcdFile, gmem_addr_reg_1118, "gmem_addr_reg_1118");
    sc_trace(mVcdFile, i_1_fu_491_p2, "i_1_fu_491_p2");
    sc_trace(mVcdFile, i_1_reg_1127, "i_1_reg_1127");
    sc_trace(mVcdFile, ap_block_state10, "ap_block_state10");
    sc_trace(mVcdFile, gmem_addr_read_reg_1132, "gmem_addr_read_reg_1132");
    sc_trace(mVcdFile, lineBuffer_0_addr_reg_1138, "lineBuffer_0_addr_reg_1138");
    sc_trace(mVcdFile, lineBuffer_1_addr_reg_1143, "lineBuffer_1_addr_reg_1143");
    sc_trace(mVcdFile, i_2_fu_509_p2, "i_2_fu_509_p2");
    sc_trace(mVcdFile, i_2_reg_1151, "i_2_reg_1151");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, tmp_26_fu_607_p1, "tmp_26_fu_607_p1");
    sc_trace(mVcdFile, tmp_26_reg_1156, "tmp_26_reg_1156");
    sc_trace(mVcdFile, tmp_3_fu_503_p2, "tmp_3_fu_503_p2");
    sc_trace(mVcdFile, tmp1_fu_627_p2, "tmp1_fu_627_p2");
    sc_trace(mVcdFile, tmp1_reg_1164, "tmp1_reg_1164");
    sc_trace(mVcdFile, gmem2_addr_reg_1169, "gmem2_addr_reg_1169");
    sc_trace(mVcdFile, gmem_addr_1_reg_1175, "gmem_addr_1_reg_1175");
    sc_trace(mVcdFile, tmp_23_fu_663_p1, "tmp_23_fu_663_p1");
    sc_trace(mVcdFile, tmp_23_reg_1181, "tmp_23_reg_1181");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem2_AWREADY, "ap_sig_ioackin_gmem2_AWREADY");
    sc_trace(mVcdFile, tmp_28_0_t_fu_667_p2, "tmp_28_0_t_fu_667_p2");
    sc_trace(mVcdFile, tmp_28_0_t_reg_1185, "tmp_28_0_t_reg_1185");
    sc_trace(mVcdFile, tmp_28_2_t_fu_672_p2, "tmp_28_2_t_fu_672_p2");
    sc_trace(mVcdFile, tmp_28_2_t_reg_1192, "tmp_28_2_t_reg_1192");
    sc_trace(mVcdFile, row_assign_cast_fu_677_p1, "row_assign_cast_fu_677_p1");
    sc_trace(mVcdFile, row_assign_cast_reg_1199, "row_assign_cast_reg_1199");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state20_pp0_stage0_iter0, "ap_block_state20_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state22_pp0_stage0_iter1, "ap_block_state22_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state24_pp0_stage0_iter2, "ap_block_state24_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, tmp_s_fu_681_p2, "tmp_s_fu_681_p2");
    sc_trace(mVcdFile, j_fu_687_p2, "j_fu_687_p2");
    sc_trace(mVcdFile, j_reg_1208, "j_reg_1208");
    sc_trace(mVcdFile, or_cond2_fu_711_p2, "or_cond2_fu_711_p2");
    sc_trace(mVcdFile, or_cond2_reg_1214, "or_cond2_reg_1214");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_or_cond2_reg_1214, "ap_reg_pp0_iter1_or_cond2_reg_1214");
    sc_trace(mVcdFile, lineBuffer_0_addr_2_reg_1220, "lineBuffer_0_addr_2_reg_1220");
    sc_trace(mVcdFile, lineBuffer_1_addr_2_reg_1226, "lineBuffer_1_addr_2_reg_1226");
    sc_trace(mVcdFile, lineBuffer_2_addr_1_reg_1232, "lineBuffer_2_addr_1_reg_1232");
    sc_trace(mVcdFile, lineBuffer_3_addr_1_reg_1238, "lineBuffer_3_addr_1_reg_1238");
    sc_trace(mVcdFile, ap_block_state21_pp0_stage1_iter0, "ap_block_state21_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state23_pp0_stage1_iter1, "ap_block_state23_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_state25_pp0_stage1_iter2, "ap_block_state25_pp0_stage1_iter2");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem2_WREADY, "ap_sig_ioackin_gmem2_WREADY");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, tmp_33_fu_741_p6, "tmp_33_fu_741_p6");
    sc_trace(mVcdFile, tmp_33_reg_1264, "tmp_33_reg_1264");
    sc_trace(mVcdFile, tmp_43_fu_761_p6, "tmp_43_fu_761_p6");
    sc_trace(mVcdFile, tmp_43_reg_1289, "tmp_43_reg_1289");
    sc_trace(mVcdFile, gmem_addr_1_read_reg_1294, "gmem_addr_1_read_reg_1294");
    sc_trace(mVcdFile, lineBuffer_0_q0, "lineBuffer_0_q0");
    sc_trace(mVcdFile, lineBuffer_0_load_2_reg_1302, "lineBuffer_0_load_2_reg_1302");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, lineBuffer_1_q0, "lineBuffer_1_q0");
    sc_trace(mVcdFile, lineBuffer_1_load_2_reg_1308, "lineBuffer_1_load_2_reg_1308");
    sc_trace(mVcdFile, lineBuffer_2_q1, "lineBuffer_2_q1");
    sc_trace(mVcdFile, lineBuffer_2_load_2_reg_1314, "lineBuffer_2_load_2_reg_1314");
    sc_trace(mVcdFile, lineBuffer_3_q1, "lineBuffer_3_q1");
    sc_trace(mVcdFile, lineBuffer_3_load_2_reg_1320, "lineBuffer_3_load_2_reg_1320");
    sc_trace(mVcdFile, x_weight_0_2_fu_808_p2, "x_weight_0_2_fu_808_p2");
    sc_trace(mVcdFile, x_weight_0_2_reg_1326, "x_weight_0_2_reg_1326");
    sc_trace(mVcdFile, tmp_40_fu_814_p6, "tmp_40_fu_814_p6");
    sc_trace(mVcdFile, tmp_40_reg_1331, "tmp_40_reg_1331");
    sc_trace(mVcdFile, tmp3_fu_827_p2, "tmp3_fu_827_p2");
    sc_trace(mVcdFile, tmp3_reg_1336, "tmp3_reg_1336");
    sc_trace(mVcdFile, tmp_42_fu_833_p6, "tmp_42_fu_833_p6");
    sc_trace(mVcdFile, tmp_42_reg_1341, "tmp_42_reg_1341");
    sc_trace(mVcdFile, x_weight_2_2_fu_966_p2, "x_weight_2_2_fu_966_p2");
    sc_trace(mVcdFile, x_weight_2_2_reg_1346, "x_weight_2_2_reg_1346");
    sc_trace(mVcdFile, y_weight_2_2_fu_972_p2, "y_weight_2_2_fu_972_p2");
    sc_trace(mVcdFile, y_weight_2_2_reg_1351, "y_weight_2_2_reg_1351");
    sc_trace(mVcdFile, tmp_34_fu_978_p2, "tmp_34_fu_978_p2");
    sc_trace(mVcdFile, tmp_34_reg_1356, "tmp_34_reg_1356");
    sc_trace(mVcdFile, tmp_47_fu_984_p1, "tmp_47_fu_984_p1");
    sc_trace(mVcdFile, tmp_47_reg_1362, "tmp_47_reg_1362");
    sc_trace(mVcdFile, val_fu_1072_p3, "val_fu_1072_p3");
    sc_trace(mVcdFile, val_reg_1368, "val_reg_1368");
    sc_trace(mVcdFile, lastLine_2_fu_1089_p2, "lastLine_2_fu_1089_p2");
    sc_trace(mVcdFile, lastLine_2_reg_1376, "lastLine_2_reg_1376");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state20, "ap_condition_pp0_exit_iter0_state20");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, lineBuffer_0_address0, "lineBuffer_0_address0");
    sc_trace(mVcdFile, lineBuffer_0_ce0, "lineBuffer_0_ce0");
    sc_trace(mVcdFile, lineBuffer_0_we0, "lineBuffer_0_we0");
    sc_trace(mVcdFile, lineBuffer_0_address1, "lineBuffer_0_address1");
    sc_trace(mVcdFile, lineBuffer_0_ce1, "lineBuffer_0_ce1");
    sc_trace(mVcdFile, lineBuffer_0_we1, "lineBuffer_0_we1");
    sc_trace(mVcdFile, lineBuffer_0_q1, "lineBuffer_0_q1");
    sc_trace(mVcdFile, lineBuffer_1_address0, "lineBuffer_1_address0");
    sc_trace(mVcdFile, lineBuffer_1_ce0, "lineBuffer_1_ce0");
    sc_trace(mVcdFile, lineBuffer_1_we0, "lineBuffer_1_we0");
    sc_trace(mVcdFile, lineBuffer_1_address1, "lineBuffer_1_address1");
    sc_trace(mVcdFile, lineBuffer_1_ce1, "lineBuffer_1_ce1");
    sc_trace(mVcdFile, lineBuffer_1_we1, "lineBuffer_1_we1");
    sc_trace(mVcdFile, lineBuffer_1_q1, "lineBuffer_1_q1");
    sc_trace(mVcdFile, lineBuffer_2_address0, "lineBuffer_2_address0");
    sc_trace(mVcdFile, lineBuffer_2_ce0, "lineBuffer_2_ce0");
    sc_trace(mVcdFile, lineBuffer_2_q0, "lineBuffer_2_q0");
    sc_trace(mVcdFile, lineBuffer_2_address1, "lineBuffer_2_address1");
    sc_trace(mVcdFile, lineBuffer_2_ce1, "lineBuffer_2_ce1");
    sc_trace(mVcdFile, lineBuffer_2_we1, "lineBuffer_2_we1");
    sc_trace(mVcdFile, lineBuffer_3_address0, "lineBuffer_3_address0");
    sc_trace(mVcdFile, lineBuffer_3_ce0, "lineBuffer_3_ce0");
    sc_trace(mVcdFile, lineBuffer_3_q0, "lineBuffer_3_q0");
    sc_trace(mVcdFile, lineBuffer_3_address1, "lineBuffer_3_address1");
    sc_trace(mVcdFile, lineBuffer_3_ce1, "lineBuffer_3_ce1");
    sc_trace(mVcdFile, lineBuffer_3_we1, "lineBuffer_3_we1");
    sc_trace(mVcdFile, lastLine_reg_336, "lastLine_reg_336");
    sc_trace(mVcdFile, i_reg_347, "i_reg_347");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, lastLine_1_reg_358, "lastLine_1_reg_358");
    sc_trace(mVcdFile, i1_reg_370, "i1_reg_370");
    sc_trace(mVcdFile, ap_phi_mux_row_assign_phi_fu_385_p4, "ap_phi_mux_row_assign_phi_fu_385_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_14_fu_497_p1, "tmp_14_fu_497_p1");
    sc_trace(mVcdFile, tmp_35_0_1_fu_716_p1, "tmp_35_0_1_fu_716_p1");
    sc_trace(mVcdFile, tmp_30_fu_733_p1, "tmp_30_fu_733_p1");
    sc_trace(mVcdFile, tmp_35_0_2_fu_754_p1, "tmp_35_0_2_fu_754_p1");
    sc_trace(mVcdFile, inter_pix2_sum_cast_fu_475_p1, "inter_pix2_sum_cast_fu_475_p1");
    sc_trace(mVcdFile, out_pix4_sum_cast_fu_638_p1, "out_pix4_sum_cast_fu_638_p1");
    sc_trace(mVcdFile, inter_pix2_sum6_cast_fu_653_p1, "inter_pix2_sum6_cast_fu_653_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_ARREADY, "ap_reg_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_ARREADY, "ap_sig_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem2_AWREADY, "ap_reg_ioackin_gmem2_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem2_WREADY, "ap_reg_ioackin_gmem2_WREADY");
    sc_trace(mVcdFile, ap_block_pp0_stage1_01001, "ap_block_pp0_stage1_01001");
    sc_trace(mVcdFile, tmp_12_fu_392_p4, "tmp_12_fu_392_p4");
    sc_trace(mVcdFile, tmp_13_fu_422_p1, "tmp_13_fu_422_p1");
    sc_trace(mVcdFile, p_shl_fu_426_p3, "p_shl_fu_426_p3");
    sc_trace(mVcdFile, p_shl2_fu_438_p3, "p_shl2_fu_438_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_434_p1, "p_shl_cast_fu_434_p1");
    sc_trace(mVcdFile, p_shl2_cast_fu_446_p1, "p_shl2_cast_fu_446_p1");
    sc_trace(mVcdFile, tmp_1_fu_450_p2, "tmp_1_fu_450_p2");
    sc_trace(mVcdFile, tmp_19_fu_462_p1, "tmp_19_fu_462_p1");
    sc_trace(mVcdFile, tmp_26_cast_fu_466_p1, "tmp_26_cast_fu_466_p1");
    sc_trace(mVcdFile, inter_pix2_sum_fu_470_p2, "inter_pix2_sum_fu_470_p2");
    sc_trace(mVcdFile, p_shl5_fu_527_p3, "p_shl5_fu_527_p3");
    sc_trace(mVcdFile, p_shl6_fu_539_p3, "p_shl6_fu_539_p3");
    sc_trace(mVcdFile, p_shl5_cast_fu_535_p1, "p_shl5_cast_fu_535_p1");
    sc_trace(mVcdFile, p_shl6_cast_fu_547_p1, "p_shl6_cast_fu_547_p1");
    sc_trace(mVcdFile, tmp_20_fu_557_p2, "tmp_20_fu_557_p2");
    sc_trace(mVcdFile, tmp_22_fu_563_p2, "tmp_22_fu_563_p2");
    sc_trace(mVcdFile, tmp_8_fu_569_p3, "tmp_8_fu_569_p3");
    sc_trace(mVcdFile, p_shl3_fu_577_p3, "p_shl3_fu_577_p3");
    sc_trace(mVcdFile, p_shl4_fu_589_p3, "p_shl4_fu_589_p3");
    sc_trace(mVcdFile, p_shl3_cast_fu_585_p1, "p_shl3_cast_fu_585_p1");
    sc_trace(mVcdFile, p_shl4_cast_fu_597_p1, "p_shl4_cast_fu_597_p1");
    sc_trace(mVcdFile, tmp_7_fu_551_p2, "tmp_7_fu_551_p2");
    sc_trace(mVcdFile, tmp_27_fu_611_p1, "tmp_27_fu_611_p1");
    sc_trace(mVcdFile, tmp_9_fu_601_p2, "tmp_9_fu_601_p2");
    sc_trace(mVcdFile, tmp_28_fu_619_p1, "tmp_28_fu_619_p1");
    sc_trace(mVcdFile, tmp_5_fu_515_p2, "tmp_5_fu_515_p2");
    sc_trace(mVcdFile, tmp_6_fu_521_p2, "tmp_6_fu_521_p2");
    sc_trace(mVcdFile, tmp_30_cast_fu_615_p1, "tmp_30_cast_fu_615_p1");
    sc_trace(mVcdFile, out_pix4_sum_fu_633_p2, "out_pix4_sum_fu_633_p2");
    sc_trace(mVcdFile, tmp_42_cast_fu_623_p1, "tmp_42_cast_fu_623_p1");
    sc_trace(mVcdFile, inter_pix2_sum6_fu_648_p2, "inter_pix2_sum6_fu_648_p2");
    sc_trace(mVcdFile, tmp_16_fu_693_p2, "tmp_16_fu_693_p2");
    sc_trace(mVcdFile, tmp_17_fu_699_p2, "tmp_17_fu_699_p2");
    sc_trace(mVcdFile, tmp2_fu_705_p2, "tmp2_fu_705_p2");
    sc_trace(mVcdFile, tmp_29_fu_724_p2, "tmp_29_fu_724_p2");
    sc_trace(mVcdFile, tmp_341_cast_fu_729_p1, "tmp_341_cast_fu_729_p1");
    sc_trace(mVcdFile, tmp_32_fu_774_p6, "tmp_32_fu_774_p6");
    sc_trace(mVcdFile, tmp_37_fu_791_p6, "tmp_37_fu_791_p6");
    sc_trace(mVcdFile, tmp_36_0_2_cast_fu_804_p1, "tmp_36_0_2_cast_fu_804_p1");
    sc_trace(mVcdFile, tmp_361_cast_fu_787_p1, "tmp_361_cast_fu_787_p1");
    sc_trace(mVcdFile, tmp_41_0_1_fu_846_p3, "tmp_41_0_1_fu_846_p3");
    sc_trace(mVcdFile, p_shl1_fu_860_p3, "p_shl1_fu_860_p3");
    sc_trace(mVcdFile, x_weight_0_2_cast_fu_857_p1, "x_weight_0_2_cast_fu_857_p1");
    sc_trace(mVcdFile, p_shl1_cast_fu_867_p1, "p_shl1_cast_fu_867_p1");
    sc_trace(mVcdFile, tmp_41_fu_877_p6, "tmp_41_fu_877_p6");
    sc_trace(mVcdFile, tmp_39_1_2_fu_886_p3, "tmp_39_1_2_fu_886_p3");
    sc_trace(mVcdFile, x_weight_1_1_fu_871_p2, "x_weight_1_1_fu_871_p2");
    sc_trace(mVcdFile, tmp_39_1_2_cast_fu_894_p1, "tmp_39_1_2_cast_fu_894_p1");
    sc_trace(mVcdFile, tmp_41_0_1_cast_fu_853_p1, "tmp_41_0_1_cast_fu_853_p1");
    sc_trace(mVcdFile, tmp3_cast_fu_904_p1, "tmp3_cast_fu_904_p1");
    sc_trace(mVcdFile, y_weight_1_2_fu_907_p2, "y_weight_1_2_fu_907_p2");
    sc_trace(mVcdFile, x_weight_1_2_fu_898_p2, "x_weight_1_2_fu_898_p2");
    sc_trace(mVcdFile, tmp_36_2_cast_fu_917_p1, "tmp_36_2_cast_fu_917_p1");
    sc_trace(mVcdFile, y_weight_1_2_cast_fu_913_p1, "y_weight_1_2_cast_fu_913_p1");
    sc_trace(mVcdFile, p_shl7_fu_932_p3, "p_shl7_fu_932_p3");
    sc_trace(mVcdFile, y_weight_2_fu_926_p2, "y_weight_2_fu_926_p2");
    sc_trace(mVcdFile, p_shl7_cast_fu_939_p1, "p_shl7_cast_fu_939_p1");
    sc_trace(mVcdFile, tmp_44_fu_949_p6, "tmp_44_fu_949_p6");
    sc_trace(mVcdFile, x_weight_2_fu_920_p2, "x_weight_2_fu_920_p2");
    sc_trace(mVcdFile, tmp_36_2_2_cast_fu_958_p1, "tmp_36_2_2_cast_fu_958_p1");
    sc_trace(mVcdFile, y_weight_2_1_fu_943_p2, "y_weight_2_1_fu_943_p2");
    sc_trace(mVcdFile, tmp_46_fu_962_p1, "tmp_46_fu_962_p1");
    sc_trace(mVcdFile, tmp_18_fu_988_p2, "tmp_18_fu_988_p2");
    sc_trace(mVcdFile, tmp_35_fu_993_p2, "tmp_35_fu_993_p2");
    sc_trace(mVcdFile, tmp_21_fu_1005_p2, "tmp_21_fu_1005_p2");
    sc_trace(mVcdFile, tmp_38_fu_1010_p2, "tmp_38_fu_1010_p2");
    sc_trace(mVcdFile, tmp_39_fu_1015_p3, "tmp_39_fu_1015_p3");
    sc_trace(mVcdFile, tmp_36_fu_998_p3, "tmp_36_fu_998_p3");
    sc_trace(mVcdFile, tmp_24_fu_1022_p2, "tmp_24_fu_1022_p2");
    sc_trace(mVcdFile, tmp_31_fu_1040_p2, "tmp_31_fu_1040_p2");
    sc_trace(mVcdFile, edge_val_fu_1028_p2, "edge_val_fu_1028_p2");
    sc_trace(mVcdFile, not_or_cond2_fu_1054_p2, "not_or_cond2_fu_1054_p2");
    sc_trace(mVcdFile, tmp_25_fu_1034_p2, "tmp_25_fu_1034_p2");
    sc_trace(mVcdFile, tmp_48_fu_1067_p2, "tmp_48_fu_1067_p2");
    sc_trace(mVcdFile, edge_val_1_i_cast_fu_1059_p3, "edge_val_1_i_cast_fu_1059_p3");
    sc_trace(mVcdFile, p_i_fu_1046_p3, "p_i_fu_1046_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("sobel_filter.hdltvin.dat");
    mHdltvoutHandle.open("sobel_filter.hdltvout.dat");
}

sobel_filter::~sobel_filter() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sobel_filter_AXILiteS_s_axi_U;
    delete sobel_filter_gmem_m_axi_U;
    delete sobel_filter_gmem2_m_axi_U;
    delete lineBuffer_0_U;
    delete lineBuffer_1_U;
    delete lineBuffer_2_U;
    delete lineBuffer_3_U;
    delete sobel_filter_mux_fYi_U1;
    delete sobel_filter_mux_fYi_U2;
    delete sobel_filter_mux_fYi_U3;
    delete sobel_filter_mux_fYi_U4;
    delete sobel_filter_mux_fYi_U5;
    delete sobel_filter_mux_fYi_U6;
    delete sobel_filter_mux_fYi_U7;
    delete sobel_filter_mux_fYi_U8;
}

void sobel_filter::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void sobel_filter::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void sobel_filter::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv32_0;
}

void sobel_filter::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void sobel_filter::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void sobel_filter::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_780;
}

void sobel_filter::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void sobel_filter::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void sobel_filter::thread_ap_var_for_const9() {
    ap_var_for_const9 = ap_const_lv4_F;
}

void sobel_filter::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv8_0;
}

void sobel_filter::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state20.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
                    esl_seteq<1,1,1>(ap_sig_ioackin_gmem2_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0))) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state20.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state20.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
                    esl_seteq<1,1,1>(ap_sig_ioackin_gmem2_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem2_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_gmem2_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_gmem2_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, gmem2_AWREADY.read())) {
                ap_reg_ioackin_gmem2_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem2_WREADY = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_gmem2_WREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, gmem2_WREADY.read()) && 
                        esl_seteq<1,1,1>(ap_block_pp0_stage1_01001.read(), ap_const_boolean_0))) {
                ap_reg_ioackin_gmem2_WREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())))) {
            ap_reg_ioackin_gmem_ARREADY = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_410_p2.read(), ap_const_lv1_1))) {
        i1_reg_370 = ap_const_lv11_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
                esl_seteq<1,1,1>(gmem2_BVALID.read(), ap_const_logic_1))) {
        i1_reg_370 = i_2_reg_1151.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        i_reg_347 = i_1_reg_1127.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i_reg_347 = ap_const_lv11_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_410_p2.read(), ap_const_lv1_1))) {
        lastLine_1_reg_358 = ap_const_lv11_2;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
                esl_seteq<1,1,1>(gmem2_BVALID.read(), ap_const_logic_1))) {
        lastLine_1_reg_358 = lastLine_2_reg_1376.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         !(esl_seteq<1,1,1>(tmp_4_fu_485_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())) && 
         esl_seteq<1,1,1>(tmp_4_fu_485_p2.read(), ap_const_lv1_1))) {
        lastLine_reg_336 = tmp_11_reg_1109.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        lastLine_reg_336 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_1204.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        row_assign_reg_381 = j_reg_1208.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
                esl_seteq<1,1,1>(ap_sig_ioackin_gmem2_AWREADY.read(), ap_const_logic_1))) {
        row_assign_reg_381 = ap_const_lv11_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_reg_pp0_iter1_or_cond2_reg_1214 = or_cond2_reg_1214.read();
        row_assign_cast_reg_1199 = row_assign_cast_fu_677_p1.read();
        tmp3_reg_1336 = tmp3_fu_827_p2.read();
        tmp_40_reg_1331 = tmp_40_fu_814_p6.read();
        tmp_42_reg_1341 = tmp_42_fu_833_p6.read();
        tmp_s_reg_1204 = tmp_s_fu_681_p2.read();
        val_reg_1368 = val_fu_1072_p3.read();
        x_weight_0_2_reg_1326 = x_weight_0_2_fu_808_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_410_p2.read()))) {
        cond_reg_1114 = cond_fu_456_p2.read();
        gmem_addr_reg_1118 =  (sc_lv<32>) (inter_pix2_sum_cast_fu_475_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_503_p2.read()))) {
        gmem2_addr_reg_1169 =  (sc_lv<32>) (out_pix4_sum_cast_fu_638_p1.read());
        gmem_addr_1_reg_1175 =  (sc_lv<32>) (inter_pix2_sum6_cast_fu_653_p1.read());
        tmp1_reg_1164 = tmp1_fu_627_p2.read();
        tmp_26_reg_1156 = tmp_26_fu_607_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_1204.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        gmem_addr_1_read_reg_1294 = gmem_RDATA.read();
        tmp_33_reg_1264 = tmp_33_fu_741_p6.read();
        tmp_43_reg_1289 = tmp_43_fu_761_p6.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(tmp_4_fu_485_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(tmp_4_fu_485_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())))) {
        gmem_addr_read_reg_1132 = gmem_RDATA.read();
        lineBuffer_0_addr_reg_1138 =  (sc_lv<11>) (tmp_14_fu_497_p1.read());
        lineBuffer_1_addr_reg_1143 =  (sc_lv<11>) (tmp_14_fu_497_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && !(esl_seteq<1,1,1>(tmp_4_fu_485_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())))) {
        i_1_reg_1127 = i_1_fu_491_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        i_2_reg_1151 = i_2_fu_509_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        j_reg_1208 = j_fu_687_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        lastLine_2_reg_1376 = lastLine_2_fu_1089_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_681_p2.read()))) {
        lineBuffer_0_addr_2_reg_1220 =  (sc_lv<11>) (tmp_35_0_1_fu_716_p1.read());
        lineBuffer_1_addr_2_reg_1226 =  (sc_lv<11>) (tmp_35_0_1_fu_716_p1.read());
        lineBuffer_2_addr_1_reg_1232 =  (sc_lv<11>) (tmp_35_0_1_fu_716_p1.read());
        lineBuffer_3_addr_1_reg_1238 =  (sc_lv<11>) (tmp_35_0_1_fu_716_p1.read());
        or_cond2_reg_1214 = or_cond2_fu_711_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        lineBuffer_0_load_2_reg_1302 = lineBuffer_0_q0.read();
        lineBuffer_1_load_2_reg_1308 = lineBuffer_1_q0.read();
        lineBuffer_2_load_2_reg_1314 = lineBuffer_2_q1.read();
        lineBuffer_3_load_2_reg_1320 = lineBuffer_3_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        tmp_11_reg_1109 = tmp_11_fu_416_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_20_cast_reg_1095 = tmp_20_cast_fu_402_p1.read();
        tmp_22_cast_reg_1100 = tmp_22_cast_fu_406_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem2_AWREADY.read(), ap_const_logic_1))) {
        tmp_23_reg_1181 = tmp_23_fu_663_p1.read();
        tmp_28_0_t_reg_1185 = tmp_28_0_t_fu_667_p2.read();
        tmp_28_2_t_reg_1192 = tmp_28_2_t_fu_672_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        tmp_34_reg_1356 = tmp_34_fu_978_p2.read();
        tmp_47_reg_1362 = tmp_47_fu_984_p1.read();
        x_weight_2_2_reg_1346 = x_weight_2_2_fu_966_p2.read();
        y_weight_2_2_reg_1351 = y_weight_2_2_fu_972_p2.read();
    }
}

void sobel_filter::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[19];
}

void sobel_filter::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[20];
}

void sobel_filter::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sobel_filter::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void sobel_filter::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void sobel_filter::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void sobel_filter::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void sobel_filter::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void sobel_filter::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sobel_filter::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[21];
}

void sobel_filter::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sobel_filter::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[25];
}

void sobel_filter::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void sobel_filter::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sobel_filter::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sobel_filter::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sobel_filter::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sobel_filter::thread_ap_block_pp0_stage1_01001() {
    ap_block_pp0_stage1_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_1204.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void sobel_filter::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_1204.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem2_WREADY.read())));
}

void sobel_filter::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_1204.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem2_WREADY.read())));
}

void sobel_filter::thread_ap_block_state10() {
    ap_block_state10 = (esl_seteq<1,1,1>(tmp_4_fu_485_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void sobel_filter::thread_ap_block_state20_pp0_stage0_iter0() {
    ap_block_state20_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sobel_filter::thread_ap_block_state21_pp0_stage1_iter0() {
    ap_block_state21_pp0_stage1_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_1204.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void sobel_filter::thread_ap_block_state22_pp0_stage0_iter1() {
    ap_block_state22_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sobel_filter::thread_ap_block_state23_pp0_stage1_iter1() {
    ap_block_state23_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sobel_filter::thread_ap_block_state24_pp0_stage0_iter2() {
    ap_block_state24_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sobel_filter::thread_ap_block_state25_pp0_stage1_iter2() {
    ap_block_state25_pp0_stage1_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sobel_filter::thread_ap_condition_pp0_exit_iter0_state20() {
    if (esl_seteq<1,1,1>(tmp_s_fu_681_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state20 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state20 = ap_const_logic_0;
    }
}

void sobel_filter::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(tmp_3_fu_503_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sobel_filter::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void sobel_filter::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sobel_filter::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void sobel_filter::thread_ap_phi_mux_row_assign_phi_fu_385_p4() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_1204.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_row_assign_phi_fu_385_p4 = j_reg_1208.read();
    } else {
        ap_phi_mux_row_assign_phi_fu_385_p4 = row_assign_reg_381.read();
    }
}

void sobel_filter::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(tmp_3_fu_503_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sobel_filter::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void sobel_filter::thread_ap_sig_ioackin_gmem2_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem2_AWREADY.read())) {
        ap_sig_ioackin_gmem2_AWREADY = gmem2_AWREADY.read();
    } else {
        ap_sig_ioackin_gmem2_AWREADY = ap_const_logic_1;
    }
}

void sobel_filter::thread_ap_sig_ioackin_gmem2_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem2_WREADY.read())) {
        ap_sig_ioackin_gmem2_WREADY = gmem2_WREADY.read();
    } else {
        ap_sig_ioackin_gmem2_WREADY = ap_const_logic_1;
    }
}

void sobel_filter::thread_ap_sig_ioackin_gmem_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) {
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY.read();
    } else {
        ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1;
    }
}

void sobel_filter::thread_cond_fu_456_p2() {
    cond_fu_456_p2 = (!lastLine_reg_336.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(lastLine_reg_336.read() == ap_const_lv2_0);
}

void sobel_filter::thread_edge_val_1_i_cast_fu_1059_p3() {
    edge_val_1_i_cast_fu_1059_p3 = (!not_or_cond2_fu_1054_p2.read()[0].is_01())? sc_lv<8>(): ((not_or_cond2_fu_1054_p2.read()[0].to_bool())? ap_const_lv8_FF: ap_const_lv8_0);
}

void sobel_filter::thread_edge_val_fu_1028_p2() {
    edge_val_fu_1028_p2 = (tmp_24_fu_1022_p2.read() ^ ap_const_lv8_FF);
}

void sobel_filter::thread_gmem2_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem2_AWREADY.read()))) {
        gmem2_AWVALID = ap_const_logic_1;
    } else {
        gmem2_AWVALID = ap_const_logic_0;
    }
}

void sobel_filter::thread_gmem2_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
         esl_seteq<1,1,1>(gmem2_BVALID.read(), ap_const_logic_1))) {
        gmem2_BREADY = ap_const_logic_1;
    } else {
        gmem2_BREADY = ap_const_logic_0;
    }
}

void sobel_filter::thread_gmem2_WDATA() {
    gmem2_WDATA = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(val_reg_1368.read(), val_reg_1368.read()), val_reg_1368.read()), val_reg_1368.read());
}

void sobel_filter::thread_gmem2_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem2_WREADY.read()))) {
        gmem2_WVALID = ap_const_logic_1;
    } else {
        gmem2_WVALID = ap_const_logic_0;
    }
}

void sobel_filter::thread_gmem2_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        gmem2_blk_n_AW = m_axi_gmem2_AWREADY.read();
    } else {
        gmem2_blk_n_AW = ap_const_logic_1;
    }
}

void sobel_filter::thread_gmem2_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        gmem2_blk_n_B = m_axi_gmem2_BVALID.read();
    } else {
        gmem2_blk_n_B = ap_const_logic_1;
    }
}

void sobel_filter::thread_gmem2_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        gmem2_blk_n_W = m_axi_gmem2_WREADY.read();
    } else {
        gmem2_blk_n_W = ap_const_logic_1;
    }
}

void sobel_filter::thread_gmem_ARADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
            gmem_ARADDR = gmem_addr_1_reg_1175.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            gmem_ARADDR = gmem_addr_reg_1118.read();
        } else {
            gmem_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        gmem_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void sobel_filter::thread_gmem_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())))) {
        gmem_ARVALID = ap_const_logic_1;
    } else {
        gmem_ARVALID = ap_const_logic_0;
    }
}

void sobel_filter::thread_gmem_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(tmp_4_fu_485_p2.read(), ap_const_lv1_0) && 
          !(esl_seteq<1,1,1>(tmp_4_fu_485_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_1204.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)))) {
        gmem_RREADY = ap_const_logic_1;
    } else {
        gmem_RREADY = ap_const_logic_0;
    }
}

void sobel_filter::thread_gmem_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        gmem_blk_n_AR = m_axi_gmem_ARREADY.read();
    } else {
        gmem_blk_n_AR = ap_const_logic_1;
    }
}

void sobel_filter::thread_gmem_blk_n_R() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(tmp_4_fu_485_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_1204.read())))) {
        gmem_blk_n_R = m_axi_gmem_RVALID.read();
    } else {
        gmem_blk_n_R = ap_const_logic_1;
    }
}

void sobel_filter::thread_i_1_fu_491_p2() {
    i_1_fu_491_p2 = (!i_reg_347.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i_reg_347.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void sobel_filter::thread_i_2_fu_509_p2() {
    i_2_fu_509_p2 = (!i1_reg_370.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i1_reg_370.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void sobel_filter::thread_inter_pix2_sum6_cast_fu_653_p1() {
    inter_pix2_sum6_cast_fu_653_p1 = esl_sext<64,34>(inter_pix2_sum6_fu_648_p2.read());
}

void sobel_filter::thread_inter_pix2_sum6_fu_648_p2() {
    inter_pix2_sum6_fu_648_p2 = (!tmp_22_cast_reg_1100.read().is_01() || !tmp_42_cast_fu_623_p1.read().is_01())? sc_lv<34>(): (sc_bigint<34>(tmp_22_cast_reg_1100.read()) + sc_biguint<34>(tmp_42_cast_fu_623_p1.read()));
}

void sobel_filter::thread_inter_pix2_sum_cast_fu_475_p1() {
    inter_pix2_sum_cast_fu_475_p1 = esl_sext<64,34>(inter_pix2_sum_fu_470_p2.read());
}

void sobel_filter::thread_inter_pix2_sum_fu_470_p2() {
    inter_pix2_sum_fu_470_p2 = (!tmp_22_cast_reg_1100.read().is_01() || !tmp_26_cast_fu_466_p1.read().is_01())? sc_lv<34>(): (sc_bigint<34>(tmp_22_cast_reg_1100.read()) + sc_biguint<34>(tmp_26_cast_fu_466_p1.read()));
}

void sobel_filter::thread_j_fu_687_p2() {
    j_fu_687_p2 = (!ap_phi_mux_row_assign_phi_fu_385_p4.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(ap_phi_mux_row_assign_phi_fu_385_p4.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void sobel_filter::thread_lastLine_2_fu_1089_p2() {
    lastLine_2_fu_1089_p2 = (!lastLine_1_reg_358.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(lastLine_1_reg_358.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void sobel_filter::thread_lineBuffer_0_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        lineBuffer_0_address0 =  (sc_lv<11>) (tmp_35_0_2_fu_754_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        lineBuffer_0_address0 =  (sc_lv<11>) (tmp_35_0_1_fu_716_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        lineBuffer_0_address0 = lineBuffer_0_addr_reg_1138.read();
    } else {
        lineBuffer_0_address0 =  (sc_lv<11>) ("XXXXXXXXXXX");
    }
}

void sobel_filter::thread_lineBuffer_0_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        lineBuffer_0_address1 = lineBuffer_0_addr_2_reg_1220.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        lineBuffer_0_address1 =  (sc_lv<11>) (tmp_30_fu_733_p1.read());
    } else {
        lineBuffer_0_address1 =  (sc_lv<11>) ("XXXXXXXXXXX");
    }
}

void sobel_filter::thread_lineBuffer_0_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)))) {
        lineBuffer_0_ce0 = ap_const_logic_1;
    } else {
        lineBuffer_0_ce0 = ap_const_logic_0;
    }
}

void sobel_filter::thread_lineBuffer_0_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)))) {
        lineBuffer_0_ce1 = ap_const_logic_1;
    } else {
        lineBuffer_0_ce1 = ap_const_logic_0;
    }
}

void sobel_filter::thread_lineBuffer_0_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(cond_reg_1114.read(), ap_const_lv1_1))) {
        lineBuffer_0_we0 = ap_const_logic_1;
    } else {
        lineBuffer_0_we0 = ap_const_logic_0;
    }
}

void sobel_filter::thread_lineBuffer_0_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,2,2>(tmp_23_reg_1181.read(), ap_const_lv2_0))) {
        lineBuffer_0_we1 = ap_const_logic_1;
    } else {
        lineBuffer_0_we1 = ap_const_logic_0;
    }
}

void sobel_filter::thread_lineBuffer_1_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        lineBuffer_1_address0 =  (sc_lv<11>) (tmp_35_0_2_fu_754_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        lineBuffer_1_address0 =  (sc_lv<11>) (tmp_35_0_1_fu_716_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        lineBuffer_1_address0 = lineBuffer_1_addr_reg_1143.read();
    } else {
        lineBuffer_1_address0 =  (sc_lv<11>) ("XXXXXXXXXXX");
    }
}

void sobel_filter::thread_lineBuffer_1_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        lineBuffer_1_address1 = lineBuffer_1_addr_2_reg_1226.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        lineBuffer_1_address1 =  (sc_lv<11>) (tmp_30_fu_733_p1.read());
    } else {
        lineBuffer_1_address1 =  (sc_lv<11>) ("XXXXXXXXXXX");
    }
}

void sobel_filter::thread_lineBuffer_1_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)))) {
        lineBuffer_1_ce0 = ap_const_logic_1;
    } else {
        lineBuffer_1_ce0 = ap_const_logic_0;
    }
}

void sobel_filter::thread_lineBuffer_1_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)))) {
        lineBuffer_1_ce1 = ap_const_logic_1;
    } else {
        lineBuffer_1_ce1 = ap_const_logic_0;
    }
}

void sobel_filter::thread_lineBuffer_1_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, cond_reg_1114.read()))) {
        lineBuffer_1_we0 = ap_const_logic_1;
    } else {
        lineBuffer_1_we0 = ap_const_logic_0;
    }
}

void sobel_filter::thread_lineBuffer_1_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,2,2>(tmp_23_reg_1181.read(), ap_const_lv2_1))) {
        lineBuffer_1_we1 = ap_const_logic_1;
    } else {
        lineBuffer_1_we1 = ap_const_logic_0;
    }
}

void sobel_filter::thread_lineBuffer_2_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            lineBuffer_2_address0 =  (sc_lv<11>) (tmp_30_fu_733_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            lineBuffer_2_address0 =  (sc_lv<11>) (tmp_35_0_1_fu_716_p1.read());
        } else {
            lineBuffer_2_address0 =  (sc_lv<11>) ("XXXXXXXXXXX");
        }
    } else {
        lineBuffer_2_address0 =  (sc_lv<11>) ("XXXXXXXXXXX");
    }
}

void sobel_filter::thread_lineBuffer_2_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        lineBuffer_2_address1 = lineBuffer_2_addr_1_reg_1232.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        lineBuffer_2_address1 =  (sc_lv<11>) (tmp_35_0_2_fu_754_p1.read());
    } else {
        lineBuffer_2_address1 =  (sc_lv<11>) ("XXXXXXXXXXX");
    }
}

void sobel_filter::thread_lineBuffer_2_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)))) {
        lineBuffer_2_ce0 = ap_const_logic_1;
    } else {
        lineBuffer_2_ce0 = ap_const_logic_0;
    }
}

void sobel_filter::thread_lineBuffer_2_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)))) {
        lineBuffer_2_ce1 = ap_const_logic_1;
    } else {
        lineBuffer_2_ce1 = ap_const_logic_0;
    }
}

void sobel_filter::thread_lineBuffer_2_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,2,2>(tmp_23_reg_1181.read(), ap_const_lv2_2))) {
        lineBuffer_2_we1 = ap_const_logic_1;
    } else {
        lineBuffer_2_we1 = ap_const_logic_0;
    }
}

void sobel_filter::thread_lineBuffer_3_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            lineBuffer_3_address0 =  (sc_lv<11>) (tmp_30_fu_733_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            lineBuffer_3_address0 =  (sc_lv<11>) (tmp_35_0_1_fu_716_p1.read());
        } else {
            lineBuffer_3_address0 =  (sc_lv<11>) ("XXXXXXXXXXX");
        }
    } else {
        lineBuffer_3_address0 =  (sc_lv<11>) ("XXXXXXXXXXX");
    }
}

void sobel_filter::thread_lineBuffer_3_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        lineBuffer_3_address1 = lineBuffer_3_addr_1_reg_1238.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        lineBuffer_3_address1 =  (sc_lv<11>) (tmp_35_0_2_fu_754_p1.read());
    } else {
        lineBuffer_3_address1 =  (sc_lv<11>) ("XXXXXXXXXXX");
    }
}

void sobel_filter::thread_lineBuffer_3_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)))) {
        lineBuffer_3_ce0 = ap_const_logic_1;
    } else {
        lineBuffer_3_ce0 = ap_const_logic_0;
    }
}

void sobel_filter::thread_lineBuffer_3_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)))) {
        lineBuffer_3_ce1 = ap_const_logic_1;
    } else {
        lineBuffer_3_ce1 = ap_const_logic_0;
    }
}

void sobel_filter::thread_lineBuffer_3_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,2,2>(tmp_23_reg_1181.read(), ap_const_lv2_3))) {
        lineBuffer_3_we1 = ap_const_logic_1;
    } else {
        lineBuffer_3_we1 = ap_const_logic_0;
    }
}

void sobel_filter::thread_not_or_cond2_fu_1054_p2() {
    not_or_cond2_fu_1054_p2 = (ap_reg_pp0_iter1_or_cond2_reg_1214.read() ^ ap_const_lv1_1);
}

void sobel_filter::thread_or_cond2_fu_711_p2() {
    or_cond2_fu_711_p2 = (tmp2_fu_705_p2.read() | tmp1_reg_1164.read());
}

void sobel_filter::thread_out_pix4_sum_cast_fu_638_p1() {
    out_pix4_sum_cast_fu_638_p1 = esl_zext<64,33>(out_pix4_sum_fu_633_p2.read());
}

void sobel_filter::thread_out_pix4_sum_fu_633_p2() {
    out_pix4_sum_fu_633_p2 = (!tmp_20_cast_reg_1095.read().is_01() || !tmp_30_cast_fu_615_p1.read().is_01())? sc_lv<33>(): (sc_biguint<33>(tmp_20_cast_reg_1095.read()) + sc_biguint<33>(tmp_30_cast_fu_615_p1.read()));
}

void sobel_filter::thread_p_i_fu_1046_p3() {
    p_i_fu_1046_p3 = (!tmp_31_fu_1040_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_31_fu_1040_p2.read()[0].to_bool())? ap_const_lv8_0: edge_val_fu_1028_p2.read());
}

void sobel_filter::thread_p_shl1_cast_fu_867_p1() {
    p_shl1_cast_fu_867_p1 = esl_zext<11,9>(p_shl1_fu_860_p3.read());
}

void sobel_filter::thread_p_shl1_fu_860_p3() {
    p_shl1_fu_860_p3 = esl_concat<8,1>(tmp_40_reg_1331.read(), ap_const_lv1_0);
}

void sobel_filter::thread_p_shl2_cast_fu_446_p1() {
    p_shl2_cast_fu_446_p1 = esl_zext<13,8>(p_shl2_fu_438_p3.read());
}

void sobel_filter::thread_p_shl2_fu_438_p3() {
    p_shl2_fu_438_p3 = esl_concat<1,7>(tmp_13_fu_422_p1.read(), ap_const_lv7_0);
}

void sobel_filter::thread_p_shl3_cast_fu_585_p1() {
    p_shl3_cast_fu_585_p1 = esl_zext<23,22>(p_shl3_fu_577_p3.read());
}

void sobel_filter::thread_p_shl3_fu_577_p3() {
    p_shl3_fu_577_p3 = esl_concat<11,11>(tmp_8_fu_569_p3.read(), ap_const_lv11_0);
}

void sobel_filter::thread_p_shl4_cast_fu_597_p1() {
    p_shl4_cast_fu_597_p1 = esl_zext<23,18>(p_shl4_fu_589_p3.read());
}

void sobel_filter::thread_p_shl4_fu_589_p3() {
    p_shl4_fu_589_p3 = esl_concat<11,7>(tmp_8_fu_569_p3.read(), ap_const_lv7_0);
}

void sobel_filter::thread_p_shl5_cast_fu_535_p1() {
    p_shl5_cast_fu_535_p1 = esl_zext<23,22>(p_shl5_fu_527_p3.read());
}

void sobel_filter::thread_p_shl5_fu_527_p3() {
    p_shl5_fu_527_p3 = esl_concat<11,11>(i1_reg_370.read(), ap_const_lv11_0);
}

void sobel_filter::thread_p_shl6_cast_fu_547_p1() {
    p_shl6_cast_fu_547_p1 = esl_zext<23,18>(p_shl6_fu_539_p3.read());
}

void sobel_filter::thread_p_shl6_fu_539_p3() {
    p_shl6_fu_539_p3 = esl_concat<11,7>(i1_reg_370.read(), ap_const_lv7_0);
}

void sobel_filter::thread_p_shl7_cast_fu_939_p1() {
    p_shl7_cast_fu_939_p1 = esl_zext<11,9>(p_shl7_fu_932_p3.read());
}

void sobel_filter::thread_p_shl7_fu_932_p3() {
    p_shl7_fu_932_p3 = esl_concat<8,1>(tmp_43_reg_1289.read(), ap_const_lv1_0);
}

void sobel_filter::thread_p_shl_cast_fu_434_p1() {
    p_shl_cast_fu_434_p1 = esl_zext<13,12>(p_shl_fu_426_p3.read());
}

void sobel_filter::thread_p_shl_fu_426_p3() {
    p_shl_fu_426_p3 = esl_concat<1,11>(tmp_13_fu_422_p1.read(), ap_const_lv11_0);
}

void sobel_filter::thread_row_assign_cast_fu_677_p1() {
    row_assign_cast_fu_677_p1 = esl_zext<12,11>(ap_phi_mux_row_assign_phi_fu_385_p4.read());
}

void sobel_filter::thread_tmp1_fu_627_p2() {
    tmp1_fu_627_p2 = (tmp_5_fu_515_p2.read() | tmp_6_fu_521_p2.read());
}

void sobel_filter::thread_tmp2_fu_705_p2() {
    tmp2_fu_705_p2 = (tmp_16_fu_693_p2.read() | tmp_17_fu_699_p2.read());
}

void sobel_filter::thread_tmp3_cast_fu_904_p1() {
    tmp3_cast_fu_904_p1 = esl_zext<10,9>(tmp3_reg_1336.read());
}

void sobel_filter::thread_tmp3_fu_827_p2() {
    tmp3_fu_827_p2 = (!tmp_36_0_2_cast_fu_804_p1.read().is_01() || !tmp_361_cast_fu_787_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_36_0_2_cast_fu_804_p1.read()) + sc_biguint<9>(tmp_361_cast_fu_787_p1.read()));
}

void sobel_filter::thread_tmp_11_fu_416_p2() {
    tmp_11_fu_416_p2 = (!lastLine_reg_336.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(lastLine_reg_336.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void sobel_filter::thread_tmp_12_fu_392_p4() {
    tmp_12_fu_392_p4 = out_pix.read().range(31, 2);
}

void sobel_filter::thread_tmp_13_fu_422_p1() {
    tmp_13_fu_422_p1 = lastLine_reg_336.read().range(1-1, 0);
}

void sobel_filter::thread_tmp_14_fu_497_p1() {
    tmp_14_fu_497_p1 = esl_zext<64,11>(i_reg_347.read());
}

void sobel_filter::thread_tmp_16_fu_693_p2() {
    tmp_16_fu_693_p2 = (!ap_phi_mux_row_assign_phi_fu_385_p4.read().is_01() || !ap_const_lv11_0.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_row_assign_phi_fu_385_p4.read() == ap_const_lv11_0);
}

void sobel_filter::thread_tmp_17_fu_699_p2() {
    tmp_17_fu_699_p2 = (!ap_phi_mux_row_assign_phi_fu_385_p4.read().is_01() || !ap_const_lv11_77F.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_row_assign_phi_fu_385_p4.read() == ap_const_lv11_77F);
}

void sobel_filter::thread_tmp_18_fu_988_p2() {
    tmp_18_fu_988_p2 = (!x_weight_2_2_reg_1346.read().is_01() || !ap_const_lv11_0.is_01())? sc_lv<1>(): (sc_bigint<11>(x_weight_2_2_reg_1346.read()) > sc_bigint<11>(ap_const_lv11_0));
}

void sobel_filter::thread_tmp_19_fu_462_p1() {
    tmp_19_fu_462_p1 = esl_sext<32,13>(tmp_1_fu_450_p2.read());
}

void sobel_filter::thread_tmp_1_fu_450_p2() {
    tmp_1_fu_450_p2 = (!p_shl_cast_fu_434_p1.read().is_01() || !p_shl2_cast_fu_446_p1.read().is_01())? sc_lv<13>(): (sc_biguint<13>(p_shl_cast_fu_434_p1.read()) - sc_biguint<13>(p_shl2_cast_fu_446_p1.read()));
}

void sobel_filter::thread_tmp_20_cast_fu_402_p1() {
    tmp_20_cast_fu_402_p1 = esl_zext<33,30>(tmp_12_fu_392_p4.read());
}

void sobel_filter::thread_tmp_20_fu_557_p2() {
    tmp_20_fu_557_p2 = (!lastLine_1_reg_358.read().is_01() || !ap_const_lv11_438.is_01())? sc_lv<1>(): (sc_biguint<11>(lastLine_1_reg_358.read()) < sc_biguint<11>(ap_const_lv11_438));
}

void sobel_filter::thread_tmp_21_fu_1005_p2() {
    tmp_21_fu_1005_p2 = (!y_weight_2_2_reg_1351.read().is_01() || !ap_const_lv11_0.is_01())? sc_lv<1>(): (sc_bigint<11>(y_weight_2_2_reg_1351.read()) > sc_bigint<11>(ap_const_lv11_0));
}

void sobel_filter::thread_tmp_22_cast_fu_406_p1() {
    tmp_22_cast_fu_406_p1 = esl_sext<34,32>(inter_pix.read());
}

void sobel_filter::thread_tmp_22_fu_563_p2() {
    tmp_22_fu_563_p2 = (!ap_const_lv11_3C8.is_01() || !lastLine_1_reg_358.read().is_01())? sc_lv<11>(): (sc_biguint<11>(ap_const_lv11_3C8) + sc_biguint<11>(lastLine_1_reg_358.read()));
}

void sobel_filter::thread_tmp_23_fu_663_p1() {
    tmp_23_fu_663_p1 = lastLine_1_reg_358.read().range(2-1, 0);
}

void sobel_filter::thread_tmp_24_fu_1022_p2() {
    tmp_24_fu_1022_p2 = (!tmp_39_fu_1015_p3.read().is_01() || !tmp_36_fu_998_p3.read().is_01())? sc_lv<8>(): (sc_biguint<8>(tmp_39_fu_1015_p3.read()) + sc_biguint<8>(tmp_36_fu_998_p3.read()));
}

void sobel_filter::thread_tmp_25_fu_1034_p2() {
    tmp_25_fu_1034_p2 = (!tmp_24_fu_1022_p2.read().is_01() || !ap_const_lv8_37.is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_24_fu_1022_p2.read()) < sc_biguint<8>(ap_const_lv8_37));
}

void sobel_filter::thread_tmp_26_cast_fu_466_p1() {
    tmp_26_cast_fu_466_p1 = esl_zext<34,32>(tmp_19_fu_462_p1.read());
}

void sobel_filter::thread_tmp_26_fu_607_p1() {
    tmp_26_fu_607_p1 = i1_reg_370.read().range(2-1, 0);
}

void sobel_filter::thread_tmp_27_fu_611_p1() {
    tmp_27_fu_611_p1 = esl_sext<32,23>(tmp_7_fu_551_p2.read());
}

void sobel_filter::thread_tmp_28_0_t_fu_667_p2() {
    tmp_28_0_t_fu_667_p2 = (!ap_const_lv2_3.is_01() || !tmp_26_reg_1156.read().is_01())? sc_lv<2>(): (sc_bigint<2>(ap_const_lv2_3) + sc_biguint<2>(tmp_26_reg_1156.read()));
}

void sobel_filter::thread_tmp_28_2_t_fu_672_p2() {
    tmp_28_2_t_fu_672_p2 = (!ap_const_lv2_1.is_01() || !tmp_26_reg_1156.read().is_01())? sc_lv<2>(): (sc_biguint<2>(ap_const_lv2_1) + sc_biguint<2>(tmp_26_reg_1156.read()));
}

void sobel_filter::thread_tmp_28_fu_619_p1() {
    tmp_28_fu_619_p1 = esl_sext<32,23>(tmp_9_fu_601_p2.read());
}

void sobel_filter::thread_tmp_29_fu_724_p2() {
    tmp_29_fu_724_p2 = (!ap_const_lv12_FFF.is_01() || !row_assign_cast_reg_1199.read().is_01())? sc_lv<12>(): (sc_bigint<12>(ap_const_lv12_FFF) + sc_biguint<12>(row_assign_cast_reg_1199.read()));
}

void sobel_filter::thread_tmp_30_cast_fu_615_p1() {
    tmp_30_cast_fu_615_p1 = esl_zext<33,32>(tmp_27_fu_611_p1.read());
}

void sobel_filter::thread_tmp_30_fu_733_p1() {
    tmp_30_fu_733_p1 = esl_zext<64,32>(tmp_341_cast_fu_729_p1.read());
}

void sobel_filter::thread_tmp_31_fu_1040_p2() {
    tmp_31_fu_1040_p2 = (!tmp_24_fu_1022_p2.read().is_01() || !ap_const_lv8_9B.is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_24_fu_1022_p2.read()) > sc_biguint<8>(ap_const_lv8_9B));
}

void sobel_filter::thread_tmp_341_cast_fu_729_p1() {
    tmp_341_cast_fu_729_p1 = esl_sext<32,12>(tmp_29_fu_724_p2.read());
}

void sobel_filter::thread_tmp_34_fu_978_p2() {
    tmp_34_fu_978_p2 = (!tmp_44_fu_949_p6.read().is_01() || !tmp_46_fu_962_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(tmp_44_fu_949_p6.read()) + sc_biguint<8>(tmp_46_fu_962_p1.read()));
}

void sobel_filter::thread_tmp_35_0_1_fu_716_p1() {
    tmp_35_0_1_fu_716_p1 = esl_zext<64,11>(ap_phi_mux_row_assign_phi_fu_385_p4.read());
}

void sobel_filter::thread_tmp_35_0_2_fu_754_p1() {
    tmp_35_0_2_fu_754_p1 = esl_zext<64,11>(j_reg_1208.read());
}

void sobel_filter::thread_tmp_35_fu_993_p2() {
    tmp_35_fu_993_p2 = (!ap_const_lv8_0.is_01() || !tmp_34_reg_1356.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_0) - sc_biguint<8>(tmp_34_reg_1356.read()));
}

void sobel_filter::thread_tmp_361_cast_fu_787_p1() {
    tmp_361_cast_fu_787_p1 = esl_zext<9,8>(tmp_32_fu_774_p6.read());
}

void sobel_filter::thread_tmp_36_0_2_cast_fu_804_p1() {
    tmp_36_0_2_cast_fu_804_p1 = esl_zext<9,8>(tmp_37_fu_791_p6.read());
}

void sobel_filter::thread_tmp_36_2_2_cast_fu_958_p1() {
    tmp_36_2_2_cast_fu_958_p1 = esl_zext<11,8>(tmp_44_fu_949_p6.read());
}

void sobel_filter::thread_tmp_36_2_cast_fu_917_p1() {
    tmp_36_2_cast_fu_917_p1 = esl_zext<11,8>(tmp_42_reg_1341.read());
}

void sobel_filter::thread_tmp_36_fu_998_p3() {
    tmp_36_fu_998_p3 = (!tmp_18_fu_988_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_18_fu_988_p2.read()[0].to_bool())? tmp_34_reg_1356.read(): tmp_35_fu_993_p2.read());
}

void sobel_filter::thread_tmp_38_fu_1010_p2() {
    tmp_38_fu_1010_p2 = (!ap_const_lv8_0.is_01() || !tmp_47_reg_1362.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_0) - sc_biguint<8>(tmp_47_reg_1362.read()));
}

void sobel_filter::thread_tmp_39_1_2_cast_fu_894_p1() {
    tmp_39_1_2_cast_fu_894_p1 = esl_zext<11,9>(tmp_39_1_2_fu_886_p3.read());
}

void sobel_filter::thread_tmp_39_1_2_fu_886_p3() {
    tmp_39_1_2_fu_886_p3 = esl_concat<8,1>(tmp_41_fu_877_p6.read(), ap_const_lv1_0);
}

void sobel_filter::thread_tmp_39_fu_1015_p3() {
    tmp_39_fu_1015_p3 = (!tmp_21_fu_1005_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_21_fu_1005_p2.read()[0].to_bool())? tmp_47_reg_1362.read(): tmp_38_fu_1010_p2.read());
}

void sobel_filter::thread_tmp_3_fu_503_p2() {
    tmp_3_fu_503_p2 = (!i1_reg_370.read().is_01() || !ap_const_lv11_438.is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_370.read() == ap_const_lv11_438);
}

void sobel_filter::thread_tmp_41_0_1_cast_fu_853_p1() {
    tmp_41_0_1_cast_fu_853_p1 = esl_zext<10,9>(tmp_41_0_1_fu_846_p3.read());
}

void sobel_filter::thread_tmp_41_0_1_fu_846_p3() {
    tmp_41_0_1_fu_846_p3 = esl_concat<8,1>(tmp_33_reg_1264.read(), ap_const_lv1_0);
}

void sobel_filter::thread_tmp_42_cast_fu_623_p1() {
    tmp_42_cast_fu_623_p1 = esl_zext<34,32>(tmp_28_fu_619_p1.read());
}

void sobel_filter::thread_tmp_46_fu_962_p1() {
    tmp_46_fu_962_p1 = x_weight_2_fu_920_p2.read().range(8-1, 0);
}

void sobel_filter::thread_tmp_47_fu_984_p1() {
    tmp_47_fu_984_p1 = y_weight_2_2_fu_972_p2.read().range(8-1, 0);
}

void sobel_filter::thread_tmp_48_fu_1067_p2() {
    tmp_48_fu_1067_p2 = (ap_reg_pp0_iter1_or_cond2_reg_1214.read() | tmp_25_fu_1034_p2.read());
}

void sobel_filter::thread_tmp_4_fu_485_p2() {
    tmp_4_fu_485_p2 = (!i_reg_347.read().is_01() || !ap_const_lv11_780.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_347.read() == ap_const_lv11_780);
}

void sobel_filter::thread_tmp_5_fu_515_p2() {
    tmp_5_fu_515_p2 = (!i1_reg_370.read().is_01() || !ap_const_lv11_0.is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_370.read() == ap_const_lv11_0);
}

void sobel_filter::thread_tmp_6_fu_521_p2() {
    tmp_6_fu_521_p2 = (!i1_reg_370.read().is_01() || !ap_const_lv11_437.is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_370.read() == ap_const_lv11_437);
}

void sobel_filter::thread_tmp_7_fu_551_p2() {
    tmp_7_fu_551_p2 = (!p_shl5_cast_fu_535_p1.read().is_01() || !p_shl6_cast_fu_547_p1.read().is_01())? sc_lv<23>(): (sc_biguint<23>(p_shl5_cast_fu_535_p1.read()) - sc_biguint<23>(p_shl6_cast_fu_547_p1.read()));
}

void sobel_filter::thread_tmp_8_fu_569_p3() {
    tmp_8_fu_569_p3 = (!tmp_20_fu_557_p2.read()[0].is_01())? sc_lv<11>(): ((tmp_20_fu_557_p2.read()[0].to_bool())? lastLine_1_reg_358.read(): tmp_22_fu_563_p2.read());
}

void sobel_filter::thread_tmp_9_fu_601_p2() {
    tmp_9_fu_601_p2 = (!p_shl3_cast_fu_585_p1.read().is_01() || !p_shl4_cast_fu_597_p1.read().is_01())? sc_lv<23>(): (sc_biguint<23>(p_shl3_cast_fu_585_p1.read()) - sc_biguint<23>(p_shl4_cast_fu_597_p1.read()));
}

void sobel_filter::thread_tmp_fu_410_p2() {
    tmp_fu_410_p2 = (!lastLine_reg_336.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(lastLine_reg_336.read() == ap_const_lv2_2);
}

void sobel_filter::thread_tmp_s_fu_681_p2() {
    tmp_s_fu_681_p2 = (!ap_phi_mux_row_assign_phi_fu_385_p4.read().is_01() || !ap_const_lv11_780.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_row_assign_phi_fu_385_p4.read() == ap_const_lv11_780);
}

void sobel_filter::thread_val_fu_1072_p3() {
    val_fu_1072_p3 = (!tmp_48_fu_1067_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_48_fu_1067_p2.read()[0].to_bool())? edge_val_1_i_cast_fu_1059_p3.read(): p_i_fu_1046_p3.read());
}

void sobel_filter::thread_x_weight_0_2_cast_fu_857_p1() {
    x_weight_0_2_cast_fu_857_p1 = esl_sext<11,9>(x_weight_0_2_reg_1326.read());
}

void sobel_filter::thread_x_weight_0_2_fu_808_p2() {
    x_weight_0_2_fu_808_p2 = (!tmp_36_0_2_cast_fu_804_p1.read().is_01() || !tmp_361_cast_fu_787_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_36_0_2_cast_fu_804_p1.read()) - sc_biguint<9>(tmp_361_cast_fu_787_p1.read()));
}

void sobel_filter::thread_x_weight_1_1_fu_871_p2() {
    x_weight_1_1_fu_871_p2 = (!x_weight_0_2_cast_fu_857_p1.read().is_01() || !p_shl1_cast_fu_867_p1.read().is_01())? sc_lv<11>(): (sc_bigint<11>(x_weight_0_2_cast_fu_857_p1.read()) - sc_biguint<11>(p_shl1_cast_fu_867_p1.read()));
}

void sobel_filter::thread_x_weight_1_2_fu_898_p2() {
    x_weight_1_2_fu_898_p2 = (!x_weight_1_1_fu_871_p2.read().is_01() || !tmp_39_1_2_cast_fu_894_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(x_weight_1_1_fu_871_p2.read()) + sc_biguint<11>(tmp_39_1_2_cast_fu_894_p1.read()));
}

void sobel_filter::thread_x_weight_2_2_fu_966_p2() {
    x_weight_2_2_fu_966_p2 = (!tmp_36_2_2_cast_fu_958_p1.read().is_01() || !x_weight_2_fu_920_p2.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_36_2_2_cast_fu_958_p1.read()) + sc_biguint<11>(x_weight_2_fu_920_p2.read()));
}

void sobel_filter::thread_x_weight_2_fu_920_p2() {
    x_weight_2_fu_920_p2 = (!x_weight_1_2_fu_898_p2.read().is_01() || !tmp_36_2_cast_fu_917_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(x_weight_1_2_fu_898_p2.read()) - sc_biguint<11>(tmp_36_2_cast_fu_917_p1.read()));
}

void sobel_filter::thread_y_weight_1_2_cast_fu_913_p1() {
    y_weight_1_2_cast_fu_913_p1 = esl_zext<11,10>(y_weight_1_2_fu_907_p2.read());
}

void sobel_filter::thread_y_weight_1_2_fu_907_p2() {
    y_weight_1_2_fu_907_p2 = (!tmp_41_0_1_cast_fu_853_p1.read().is_01() || !tmp3_cast_fu_904_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_41_0_1_cast_fu_853_p1.read()) + sc_biguint<10>(tmp3_cast_fu_904_p1.read()));
}

void sobel_filter::thread_y_weight_2_1_fu_943_p2() {
    y_weight_2_1_fu_943_p2 = (!y_weight_2_fu_926_p2.read().is_01() || !p_shl7_cast_fu_939_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(y_weight_2_fu_926_p2.read()) - sc_biguint<11>(p_shl7_cast_fu_939_p1.read()));
}

void sobel_filter::thread_y_weight_2_2_fu_972_p2() {
    y_weight_2_2_fu_972_p2 = (!y_weight_2_1_fu_943_p2.read().is_01() || !tmp_36_2_2_cast_fu_958_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(y_weight_2_1_fu_943_p2.read()) - sc_biguint<11>(tmp_36_2_2_cast_fu_958_p1.read()));
}

void sobel_filter::thread_y_weight_2_fu_926_p2() {
    y_weight_2_fu_926_p2 = (!y_weight_1_2_cast_fu_913_p1.read().is_01() || !tmp_36_2_cast_fu_917_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(y_weight_1_2_cast_fu_913_p1.read()) - sc_biguint<11>(tmp_36_2_cast_fu_917_p1.read()));
}

void sobel_filter::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_410_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && !(esl_seteq<1,1,1>(tmp_4_fu_485_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())) && esl_seteq<1,1,1>(tmp_4_fu_485_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(tmp_4_fu_485_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(tmp_4_fu_485_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(tmp_3_fu_503_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem2_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        case 524288 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_s_fu_681_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_s_fu_681_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 1048576 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 33554432 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && esl_seteq<1,1,1>(gmem2_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state30;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<26>) ("XXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void sobel_filter::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_AWVALID\" :  \"" << m_axi_gmem2_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem2_AWREADY\" :  \"" << m_axi_gmem2_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_AWADDR\" :  \"" << m_axi_gmem2_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_AWID\" :  \"" << m_axi_gmem2_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_AWLEN\" :  \"" << m_axi_gmem2_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_AWSIZE\" :  \"" << m_axi_gmem2_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_AWBURST\" :  \"" << m_axi_gmem2_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_AWLOCK\" :  \"" << m_axi_gmem2_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_AWCACHE\" :  \"" << m_axi_gmem2_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_AWPROT\" :  \"" << m_axi_gmem2_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_AWQOS\" :  \"" << m_axi_gmem2_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_AWREGION\" :  \"" << m_axi_gmem2_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_AWUSER\" :  \"" << m_axi_gmem2_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_WVALID\" :  \"" << m_axi_gmem2_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem2_WREADY\" :  \"" << m_axi_gmem2_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_WDATA\" :  \"" << m_axi_gmem2_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_WSTRB\" :  \"" << m_axi_gmem2_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_WLAST\" :  \"" << m_axi_gmem2_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_WID\" :  \"" << m_axi_gmem2_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_WUSER\" :  \"" << m_axi_gmem2_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_ARVALID\" :  \"" << m_axi_gmem2_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem2_ARREADY\" :  \"" << m_axi_gmem2_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_ARADDR\" :  \"" << m_axi_gmem2_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_ARID\" :  \"" << m_axi_gmem2_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_ARLEN\" :  \"" << m_axi_gmem2_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_ARSIZE\" :  \"" << m_axi_gmem2_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_ARBURST\" :  \"" << m_axi_gmem2_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_ARLOCK\" :  \"" << m_axi_gmem2_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_ARCACHE\" :  \"" << m_axi_gmem2_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_ARPROT\" :  \"" << m_axi_gmem2_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_ARQOS\" :  \"" << m_axi_gmem2_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_ARREGION\" :  \"" << m_axi_gmem2_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_ARUSER\" :  \"" << m_axi_gmem2_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem2_RVALID\" :  \"" << m_axi_gmem2_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_RREADY\" :  \"" << m_axi_gmem2_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem2_RDATA\" :  \"" << m_axi_gmem2_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem2_RLAST\" :  \"" << m_axi_gmem2_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem2_RID\" :  \"" << m_axi_gmem2_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem2_RUSER\" :  \"" << m_axi_gmem2_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem2_RRESP\" :  \"" << m_axi_gmem2_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem2_BVALID\" :  \"" << m_axi_gmem2_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem2_BREADY\" :  \"" << m_axi_gmem2_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem2_BRESP\" :  \"" << m_axi_gmem2_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem2_BID\" :  \"" << m_axi_gmem2_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem2_BUSER\" :  \"" << m_axi_gmem2_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

