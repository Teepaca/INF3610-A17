// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel_filter,hls_ip_2017_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=4173260,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=1653,HLS_SYN_LUT=2733}" *)

module sobel_filter (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY,
        m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY,
        m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST,
        m_axi_gmem2_WID,
        m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST,
        m_axi_gmem2_RID,
        m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID,
        m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP,
        m_axi_gmem2_BID,
        m_axi_gmem2_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_state9 = 26'd256;
parameter    ap_ST_fsm_state10 = 26'd512;
parameter    ap_ST_fsm_state11 = 26'd1024;
parameter    ap_ST_fsm_state12 = 26'd2048;
parameter    ap_ST_fsm_state13 = 26'd4096;
parameter    ap_ST_fsm_state14 = 26'd8192;
parameter    ap_ST_fsm_state15 = 26'd16384;
parameter    ap_ST_fsm_state16 = 26'd32768;
parameter    ap_ST_fsm_state17 = 26'd65536;
parameter    ap_ST_fsm_state18 = 26'd131072;
parameter    ap_ST_fsm_state19 = 26'd262144;
parameter    ap_ST_fsm_pp0_stage0 = 26'd524288;
parameter    ap_ST_fsm_pp0_stage1 = 26'd1048576;
parameter    ap_ST_fsm_state26 = 26'd2097152;
parameter    ap_ST_fsm_state27 = 26'd4194304;
parameter    ap_ST_fsm_state28 = 26'd8388608;
parameter    ap_ST_fsm_state29 = 26'd16777216;
parameter    ap_ST_fsm_state30 = 26'd33554432;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM2_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM2_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM2_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM2_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_USER_VALUE = 0;
parameter    C_M_AXI_GMEM2_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM2_CACHE_VALUE = 3;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM2_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output   m_axi_gmem2_AWVALID;
input   m_axi_gmem2_AWREADY;
output  [C_M_AXI_GMEM2_ADDR_WIDTH - 1:0] m_axi_gmem2_AWADDR;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_AWID;
output  [7:0] m_axi_gmem2_AWLEN;
output  [2:0] m_axi_gmem2_AWSIZE;
output  [1:0] m_axi_gmem2_AWBURST;
output  [1:0] m_axi_gmem2_AWLOCK;
output  [3:0] m_axi_gmem2_AWCACHE;
output  [2:0] m_axi_gmem2_AWPROT;
output  [3:0] m_axi_gmem2_AWQOS;
output  [3:0] m_axi_gmem2_AWREGION;
output  [C_M_AXI_GMEM2_AWUSER_WIDTH - 1:0] m_axi_gmem2_AWUSER;
output   m_axi_gmem2_WVALID;
input   m_axi_gmem2_WREADY;
output  [C_M_AXI_GMEM2_DATA_WIDTH - 1:0] m_axi_gmem2_WDATA;
output  [C_M_AXI_GMEM2_WSTRB_WIDTH - 1:0] m_axi_gmem2_WSTRB;
output   m_axi_gmem2_WLAST;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_WID;
output  [C_M_AXI_GMEM2_WUSER_WIDTH - 1:0] m_axi_gmem2_WUSER;
output   m_axi_gmem2_ARVALID;
input   m_axi_gmem2_ARREADY;
output  [C_M_AXI_GMEM2_ADDR_WIDTH - 1:0] m_axi_gmem2_ARADDR;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_ARID;
output  [7:0] m_axi_gmem2_ARLEN;
output  [2:0] m_axi_gmem2_ARSIZE;
output  [1:0] m_axi_gmem2_ARBURST;
output  [1:0] m_axi_gmem2_ARLOCK;
output  [3:0] m_axi_gmem2_ARCACHE;
output  [2:0] m_axi_gmem2_ARPROT;
output  [3:0] m_axi_gmem2_ARQOS;
output  [3:0] m_axi_gmem2_ARREGION;
output  [C_M_AXI_GMEM2_ARUSER_WIDTH - 1:0] m_axi_gmem2_ARUSER;
input   m_axi_gmem2_RVALID;
output   m_axi_gmem2_RREADY;
input  [C_M_AXI_GMEM2_DATA_WIDTH - 1:0] m_axi_gmem2_RDATA;
input   m_axi_gmem2_RLAST;
input  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_RID;
input  [C_M_AXI_GMEM2_RUSER_WIDTH - 1:0] m_axi_gmem2_RUSER;
input  [1:0] m_axi_gmem2_RRESP;
input   m_axi_gmem2_BVALID;
output   m_axi_gmem2_BREADY;
input  [1:0] m_axi_gmem2_BRESP;
input  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_BID;
input  [C_M_AXI_GMEM2_BUSER_WIDTH - 1:0] m_axi_gmem2_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] inter_pix;
wire   [31:0] out_pix;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_3_fu_475_p2;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] tmp_11_reg_1171;
reg    gmem2_blk_n_AW;
wire    ap_CS_fsm_state19;
reg    gmem2_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
reg    gmem2_blk_n_B;
wire    ap_CS_fsm_state30;
wire    gmem_AWREADY;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [7:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg    gmem2_AWVALID;
wire    gmem2_AWREADY;
wire   [31:0] gmem2_AWADDR;
reg    gmem2_WVALID;
wire    gmem2_WREADY;
wire   [31:0] gmem2_WDATA;
wire    gmem2_ARREADY;
wire    gmem2_RVALID;
wire   [31:0] gmem2_RDATA;
wire    gmem2_RLAST;
wire   [0:0] gmem2_RID;
wire   [0:0] gmem2_RUSER;
wire   [1:0] gmem2_RRESP;
wire    gmem2_BVALID;
reg    gmem2_BREADY;
wire   [1:0] gmem2_BRESP;
wire   [0:0] gmem2_BID;
wire   [0:0] gmem2_BUSER;
reg   [10:0] row_assign_reg_379;
wire   [31:0] tmp_1_cast_fu_400_p1;
reg   [31:0] tmp_1_cast_reg_1057;
wire  signed [32:0] tmp_6_cast_fu_404_p1;
reg  signed [32:0] tmp_6_cast_reg_1062;
wire   [1:0] tmp_s_fu_414_p2;
reg   [1:0] tmp_s_reg_1071;
wire    ap_CS_fsm_state2;
wire   [0:0] cond_fu_450_p2;
reg   [0:0] cond_reg_1076;
wire   [0:0] tmp_fu_408_p2;
reg   [31:0] gmem_addr_reg_1080;
wire   [10:0] i_1_fu_481_p2;
reg   [10:0] i_1_reg_1089;
reg    ap_block_state10;
reg   [7:0] gmem_addr_read_reg_1094;
reg   [10:0] lineBuffer_0_addr_reg_1100;
reg   [10:0] lineBuffer_1_addr_reg_1105;
wire   [10:0] i_2_fu_499_p2;
reg   [10:0] i_2_reg_1113;
wire    ap_CS_fsm_state12;
wire   [1:0] tmp_48_fu_577_p1;
reg   [1:0] tmp_48_reg_1118;
wire   [0:0] tmp_2_fu_493_p2;
wire   [0:0] tmp1_fu_581_p2;
reg   [0:0] tmp1_reg_1126;
wire   [31:0] tmp_50_fu_591_p2;
reg   [31:0] tmp_50_reg_1131;
reg   [31:0] gmem_addr_1_reg_1136;
wire   [1:0] tmp_47_fu_615_p1;
reg   [1:0] tmp_47_reg_1142;
reg    ap_sig_ioackin_gmem2_AWREADY;
wire   [1:0] tmp_24_0_t_fu_619_p2;
reg   [1:0] tmp_24_0_t_reg_1146;
wire   [1:0] tmp_24_2_t_fu_624_p2;
reg   [1:0] tmp_24_2_t_reg_1153;
wire   [11:0] row_assign_cast_fu_639_p1;
reg   [11:0] row_assign_cast_reg_1166;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state20_pp0_stage0_iter0;
wire    ap_block_state22_pp0_stage0_iter1;
wire    ap_block_state24_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_11_fu_643_p2;
wire   [10:0] j_fu_649_p2;
reg   [10:0] j_reg_1175;
wire   [0:0] or_cond2_fu_673_p2;
reg   [0:0] or_cond2_reg_1181;
reg   [0:0] ap_reg_pp0_iter1_or_cond2_reg_1181;
reg   [10:0] lineBuffer_0_addr_2_reg_1187;
reg   [10:0] lineBuffer_1_addr_2_reg_1193;
reg   [10:0] lineBuffer_2_addr_1_reg_1199;
reg   [10:0] lineBuffer_3_addr_1_reg_1205;
reg    ap_block_state21_pp0_stage1_iter0;
wire    ap_block_state23_pp0_stage1_iter1;
wire    ap_block_state25_pp0_stage1_iter2;
reg    ap_sig_ioackin_gmem2_WREADY;
reg    ap_block_pp0_stage1_11001;
wire   [7:0] tmp_23_fu_703_p6;
reg   [7:0] tmp_23_reg_1231;
wire   [7:0] tmp_29_fu_723_p6;
reg   [7:0] tmp_29_reg_1256;
reg   [7:0] gmem_addr_1_read_reg_1261;
wire   [7:0] lineBuffer_0_q0;
reg   [7:0] lineBuffer_0_load_2_reg_1269;
reg    ap_enable_reg_pp0_iter1;
wire   [7:0] lineBuffer_1_q0;
reg   [7:0] lineBuffer_1_load_2_reg_1275;
wire   [7:0] lineBuffer_2_q1;
reg   [7:0] lineBuffer_2_load_2_reg_1281;
wire   [7:0] lineBuffer_3_q1;
reg   [7:0] lineBuffer_3_load_2_reg_1287;
wire   [8:0] x_weight_0_2_fu_770_p2;
reg   [8:0] x_weight_0_2_reg_1293;
wire   [7:0] tmp_25_fu_776_p6;
reg   [7:0] tmp_25_reg_1298;
wire   [8:0] tmp3_fu_789_p2;
reg   [8:0] tmp3_reg_1303;
wire   [7:0] tmp_28_fu_795_p6;
reg   [7:0] tmp_28_reg_1308;
wire   [10:0] x_weight_2_2_fu_928_p2;
reg   [10:0] x_weight_2_2_reg_1313;
wire   [10:0] y_weight_2_2_fu_934_p2;
reg   [10:0] y_weight_2_2_reg_1318;
wire   [7:0] tmp_31_fu_940_p2;
reg   [7:0] tmp_31_reg_1323;
wire   [7:0] tmp_56_fu_946_p1;
reg   [7:0] tmp_56_reg_1329;
wire   [7:0] val_fu_1034_p3;
reg   [7:0] val_reg_1335;
wire   [10:0] lastLine_2_fu_1051_p2;
reg   [10:0] lastLine_2_reg_1343;
wire    ap_CS_fsm_state26;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state20;
reg    ap_block_pp0_stage1_subdone;
reg   [10:0] lineBuffer_0_address0;
reg    lineBuffer_0_ce0;
reg    lineBuffer_0_we0;
reg   [10:0] lineBuffer_0_address1;
reg    lineBuffer_0_ce1;
reg    lineBuffer_0_we1;
wire   [7:0] lineBuffer_0_q1;
reg   [10:0] lineBuffer_1_address0;
reg    lineBuffer_1_ce0;
reg    lineBuffer_1_we0;
reg   [10:0] lineBuffer_1_address1;
reg    lineBuffer_1_ce1;
reg    lineBuffer_1_we1;
wire   [7:0] lineBuffer_1_q1;
reg   [10:0] lineBuffer_2_address0;
reg    lineBuffer_2_ce0;
wire   [7:0] lineBuffer_2_q0;
reg   [10:0] lineBuffer_2_address1;
reg    lineBuffer_2_ce1;
reg    lineBuffer_2_we1;
reg   [10:0] lineBuffer_3_address0;
reg    lineBuffer_3_ce0;
wire   [7:0] lineBuffer_3_q0;
reg   [10:0] lineBuffer_3_address1;
reg    lineBuffer_3_ce1;
reg    lineBuffer_3_we1;
reg   [1:0] lastLine_reg_334;
reg   [10:0] i_reg_345;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
reg   [10:0] lastLine_1_reg_356;
reg   [10:0] i1_reg_368;
reg   [10:0] ap_phi_mux_row_assign_phi_fu_383_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_10_fu_487_p1;
wire   [63:0] tmp_31_0_1_fu_678_p1;
wire   [63:0] tmp_19_fu_695_p1;
wire   [63:0] tmp_31_0_2_fu_716_p1;
wire  signed [63:0] tmp_39_fu_465_p1;
wire  signed [63:0] tmp_54_fu_605_p1;
wire  signed [63:0] tmp_51_fu_629_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem2_AWREADY;
reg    ap_reg_ioackin_gmem2_WREADY;
reg    ap_block_pp0_stage1_01001;
wire   [29:0] tmp_1_fu_390_p4;
wire   [12:0] tmp_7_fu_420_p3;
wire   [8:0] tmp_6_fu_432_p3;
wire   [13:0] p_shl5_cast_fu_428_p1;
wire   [13:0] p_shl6_cast_fu_440_p1;
wire   [13:0] tmp_16_fu_444_p2;
wire  signed [32:0] tmp_30_fu_456_p1;
wire   [32:0] tmp_34_fu_460_p2;
wire   [21:0] tmp_40_fu_517_p3;
wire   [17:0] tmp_41_fu_529_p3;
wire   [22:0] p_shl9_cast_fu_525_p1;
wire   [22:0] p_shl2_cast_fu_537_p1;
wire   [21:0] tmp_44_fu_547_p3;
wire   [17:0] tmp_45_fu_559_p3;
wire   [22:0] p_shl7_cast_fu_555_p1;
wire   [22:0] p_shl8_cast_fu_567_p1;
wire   [0:0] tmp_4_fu_505_p2;
wire   [0:0] tmp_5_fu_511_p2;
wire   [22:0] tmp_43_fu_541_p2;
wire  signed [31:0] tmp_49_fu_587_p1;
wire   [22:0] tmp_46_fu_571_p2;
wire  signed [32:0] tmp_52_fu_596_p1;
wire   [32:0] tmp_53_fu_600_p2;
wire   [0:0] tmp_12_fu_655_p2;
wire   [0:0] tmp_13_fu_661_p2;
wire   [0:0] tmp2_fu_667_p2;
wire   [11:0] tmp_18_fu_686_p2;
wire  signed [31:0] tmp_301_cast_fu_691_p1;
wire   [7:0] tmp_22_fu_736_p6;
wire   [7:0] tmp_24_fu_753_p6;
wire   [8:0] tmp_32_0_2_cast_fu_766_p1;
wire   [8:0] tmp_321_cast_fu_749_p1;
wire   [8:0] tmp_37_0_1_fu_808_p3;
wire   [8:0] p_shl1_fu_822_p3;
wire  signed [10:0] x_weight_0_2_cast_fu_819_p1;
wire   [10:0] p_shl1_cast_fu_829_p1;
wire   [7:0] tmp_26_fu_839_p6;
wire   [8:0] tmp_35_1_2_fu_848_p3;
wire   [10:0] x_weight_1_1_fu_833_p2;
wire   [10:0] tmp_35_1_2_cast_fu_856_p1;
wire   [9:0] tmp_37_0_1_cast_fu_815_p1;
wire   [9:0] tmp3_cast_fu_866_p1;
wire   [9:0] y_weight_1_2_fu_869_p2;
wire   [10:0] x_weight_1_2_fu_860_p2;
wire   [10:0] tmp_32_2_cast_fu_879_p1;
wire   [10:0] y_weight_1_2_cast_fu_875_p1;
wire   [8:0] p_shl_fu_894_p3;
wire   [10:0] y_weight_2_fu_888_p2;
wire   [10:0] p_shl_cast_fu_901_p1;
wire   [7:0] tmp_37_fu_911_p6;
wire   [10:0] x_weight_2_fu_882_p2;
wire   [10:0] tmp_32_2_2_cast_fu_920_p1;
wire   [10:0] y_weight_2_1_fu_905_p2;
wire   [7:0] tmp_55_fu_924_p1;
wire   [0:0] tmp_14_fu_950_p2;
wire   [7:0] tmp_32_fu_955_p2;
wire   [0:0] tmp_17_fu_967_p2;
wire   [7:0] tmp_35_fu_972_p2;
wire   [7:0] tmp_36_fu_977_p3;
wire   [7:0] tmp_33_fu_960_p3;
wire   [7:0] tmp_20_fu_984_p2;
wire   [0:0] tmp_27_fu_1002_p2;
wire   [7:0] edge_val_fu_990_p2;
wire   [0:0] not_or_cond2_fu_1016_p2;
wire   [0:0] tmp_21_fu_996_p2;
wire   [0:0] tmp_38_fu_1029_p2;
wire   [7:0] edge_val_1_i_cast_fu_1021_p3;
wire   [7:0] p_i_fu_1008_p3;
reg   [25:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 26'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem2_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem2_WREADY = 1'b0;
end

sobel_filter_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
sobel_filter_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .inter_pix(inter_pix),
    .out_pix(out_pix)
);

sobel_filter_gmem_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
sobel_filter_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1920),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(8'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd0),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

sobel_filter_gmem2_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM2_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM2_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM2_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM2_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM2_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM2_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM2_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM2_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM2_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM2_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM2_CACHE_VALUE ))
sobel_filter_gmem2_m_axi_U(
    .AWVALID(m_axi_gmem2_AWVALID),
    .AWREADY(m_axi_gmem2_AWREADY),
    .AWADDR(m_axi_gmem2_AWADDR),
    .AWID(m_axi_gmem2_AWID),
    .AWLEN(m_axi_gmem2_AWLEN),
    .AWSIZE(m_axi_gmem2_AWSIZE),
    .AWBURST(m_axi_gmem2_AWBURST),
    .AWLOCK(m_axi_gmem2_AWLOCK),
    .AWCACHE(m_axi_gmem2_AWCACHE),
    .AWPROT(m_axi_gmem2_AWPROT),
    .AWQOS(m_axi_gmem2_AWQOS),
    .AWREGION(m_axi_gmem2_AWREGION),
    .AWUSER(m_axi_gmem2_AWUSER),
    .WVALID(m_axi_gmem2_WVALID),
    .WREADY(m_axi_gmem2_WREADY),
    .WDATA(m_axi_gmem2_WDATA),
    .WSTRB(m_axi_gmem2_WSTRB),
    .WLAST(m_axi_gmem2_WLAST),
    .WID(m_axi_gmem2_WID),
    .WUSER(m_axi_gmem2_WUSER),
    .ARVALID(m_axi_gmem2_ARVALID),
    .ARREADY(m_axi_gmem2_ARREADY),
    .ARADDR(m_axi_gmem2_ARADDR),
    .ARID(m_axi_gmem2_ARID),
    .ARLEN(m_axi_gmem2_ARLEN),
    .ARSIZE(m_axi_gmem2_ARSIZE),
    .ARBURST(m_axi_gmem2_ARBURST),
    .ARLOCK(m_axi_gmem2_ARLOCK),
    .ARCACHE(m_axi_gmem2_ARCACHE),
    .ARPROT(m_axi_gmem2_ARPROT),
    .ARQOS(m_axi_gmem2_ARQOS),
    .ARREGION(m_axi_gmem2_ARREGION),
    .ARUSER(m_axi_gmem2_ARUSER),
    .RVALID(m_axi_gmem2_RVALID),
    .RREADY(m_axi_gmem2_RREADY),
    .RDATA(m_axi_gmem2_RDATA),
    .RLAST(m_axi_gmem2_RLAST),
    .RID(m_axi_gmem2_RID),
    .RUSER(m_axi_gmem2_RUSER),
    .RRESP(m_axi_gmem2_RRESP),
    .BVALID(m_axi_gmem2_BVALID),
    .BREADY(m_axi_gmem2_BREADY),
    .BRESP(m_axi_gmem2_BRESP),
    .BID(m_axi_gmem2_BID),
    .BUSER(m_axi_gmem2_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(gmem2_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem2_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(gmem2_RDATA),
    .I_RID(gmem2_RID),
    .I_RUSER(gmem2_RUSER),
    .I_RRESP(gmem2_RRESP),
    .I_RLAST(gmem2_RLAST),
    .I_AWVALID(gmem2_AWVALID),
    .I_AWREADY(gmem2_AWREADY),
    .I_AWADDR(gmem2_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1920),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem2_WVALID),
    .I_WREADY(gmem2_WREADY),
    .I_WDATA(gmem2_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem2_BVALID),
    .I_BREADY(gmem2_BREADY),
    .I_BRESP(gmem2_BRESP),
    .I_BID(gmem2_BID),
    .I_BUSER(gmem2_BUSER)
);

sobel_filter_linebkb #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
lineBuffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuffer_0_address0),
    .ce0(lineBuffer_0_ce0),
    .we0(lineBuffer_0_we0),
    .d0(gmem_addr_read_reg_1094),
    .q0(lineBuffer_0_q0),
    .address1(lineBuffer_0_address1),
    .ce1(lineBuffer_0_ce1),
    .we1(lineBuffer_0_we1),
    .d1(gmem_addr_1_read_reg_1261),
    .q1(lineBuffer_0_q1)
);

sobel_filter_linebkb #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
lineBuffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuffer_1_address0),
    .ce0(lineBuffer_1_ce0),
    .we0(lineBuffer_1_we0),
    .d0(gmem_addr_read_reg_1094),
    .q0(lineBuffer_1_q0),
    .address1(lineBuffer_1_address1),
    .ce1(lineBuffer_1_ce1),
    .we1(lineBuffer_1_we1),
    .d1(gmem_addr_1_read_reg_1261),
    .q1(lineBuffer_1_q1)
);

sobel_filter_linedEe #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
lineBuffer_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuffer_2_address0),
    .ce0(lineBuffer_2_ce0),
    .q0(lineBuffer_2_q0),
    .address1(lineBuffer_2_address1),
    .ce1(lineBuffer_2_ce1),
    .we1(lineBuffer_2_we1),
    .d1(gmem_addr_1_read_reg_1261),
    .q1(lineBuffer_2_q1)
);

sobel_filter_linedEe #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
lineBuffer_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuffer_3_address0),
    .ce0(lineBuffer_3_ce0),
    .q0(lineBuffer_3_q0),
    .address1(lineBuffer_3_address1),
    .ce1(lineBuffer_3_ce1),
    .we1(lineBuffer_3_we1),
    .d1(gmem_addr_1_read_reg_1261),
    .q1(lineBuffer_3_q1)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U1(
    .din1(lineBuffer_0_q0),
    .din2(lineBuffer_1_q0),
    .din3(lineBuffer_2_q0),
    .din4(lineBuffer_3_q0),
    .din5(tmp_24_0_t_reg_1146),
    .dout(tmp_23_fu_703_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U2(
    .din1(lineBuffer_0_q0),
    .din2(lineBuffer_1_q0),
    .din3(lineBuffer_2_q0),
    .din4(lineBuffer_3_q0),
    .din5(tmp_24_2_t_reg_1153),
    .dout(tmp_29_fu_723_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U3(
    .din1(lineBuffer_0_q1),
    .din2(lineBuffer_1_q1),
    .din3(lineBuffer_2_q0),
    .din4(lineBuffer_3_q0),
    .din5(tmp_24_0_t_reg_1146),
    .dout(tmp_22_fu_736_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U4(
    .din1(lineBuffer_0_q0),
    .din2(lineBuffer_1_q0),
    .din3(lineBuffer_2_q1),
    .din4(lineBuffer_3_q1),
    .din5(tmp_24_0_t_reg_1146),
    .dout(tmp_24_fu_753_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U5(
    .din1(lineBuffer_0_q1),
    .din2(lineBuffer_1_q1),
    .din3(lineBuffer_2_q0),
    .din4(lineBuffer_3_q0),
    .din5(tmp_48_reg_1118),
    .dout(tmp_25_fu_776_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U6(
    .din1(lineBuffer_0_q1),
    .din2(lineBuffer_1_q1),
    .din3(lineBuffer_2_q0),
    .din4(lineBuffer_3_q0),
    .din5(tmp_24_2_t_reg_1153),
    .dout(tmp_28_fu_795_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U7(
    .din1(lineBuffer_0_load_2_reg_1269),
    .din2(lineBuffer_1_load_2_reg_1275),
    .din3(lineBuffer_2_load_2_reg_1281),
    .din4(lineBuffer_3_load_2_reg_1287),
    .din5(tmp_48_reg_1118),
    .dout(tmp_26_fu_839_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U8(
    .din1(lineBuffer_0_load_2_reg_1269),
    .din2(lineBuffer_1_load_2_reg_1275),
    .din3(lineBuffer_2_load_2_reg_1281),
    .din4(lineBuffer_3_load_2_reg_1287),
    .din5(tmp_24_2_t_reg_1153),
    .dout(tmp_37_fu_911_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state20) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_sig_ioackin_gmem2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage1_subdone == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state20)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state20 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage1_subdone == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_sig_ioackin_gmem2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem2_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state19)) begin
            if ((ap_sig_ioackin_gmem2_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem2_AWREADY <= 1'b0;
            end else if ((1'b1 == gmem2_AWREADY)) begin
                ap_reg_ioackin_gmem2_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem2_WREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            if ((ap_block_pp0_stage1_11001 == 1'b0)) begin
                ap_reg_ioackin_gmem2_WREADY <= 1'b0;
            end else if (((ap_block_pp0_stage1_01001 == 1'b0) & (1'b1 == gmem2_WREADY))) begin
                ap_reg_ioackin_gmem2_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((1'b1 == gmem_ARREADY) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == gmem_ARREADY) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_408_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_reg_368 <= 11'd0;
    end else if (((gmem2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        i1_reg_368 <= i_2_reg_1113;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_reg_345 <= i_1_reg_1089;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_345 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_408_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        lastLine_1_reg_356 <= 11'd2;
    end else if (((gmem2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        lastLine_1_reg_356 <= lastLine_2_reg_1343;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == gmem_RVALID) & (tmp_3_fu_475_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state10) & (tmp_3_fu_475_p2 == 1'd1))) begin
        lastLine_reg_334 <= tmp_s_reg_1071;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lastLine_reg_334 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == tmp_11_reg_1171))) begin
        row_assign_reg_379 <= j_reg_1175;
    end else if (((ap_sig_ioackin_gmem2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        row_assign_reg_379 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_or_cond2_reg_1181 <= or_cond2_reg_1181;
        row_assign_cast_reg_1166[10 : 0] <= row_assign_cast_fu_639_p1[10 : 0];
        tmp3_reg_1303 <= tmp3_fu_789_p2;
        tmp_11_reg_1171 <= tmp_11_fu_643_p2;
        tmp_25_reg_1298 <= tmp_25_fu_776_p6;
        tmp_28_reg_1308 <= tmp_28_fu_795_p6;
        val_reg_1335 <= val_fu_1034_p3;
        x_weight_0_2_reg_1293 <= x_weight_0_2_fu_770_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_408_p2))) begin
        cond_reg_1076 <= cond_fu_450_p2;
        gmem_addr_reg_1080 <= tmp_39_fu_465_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage1_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd0 == tmp_11_reg_1171))) begin
        gmem_addr_1_read_reg_1261 <= gmem_RDATA;
        tmp_23_reg_1231 <= tmp_23_fu_703_p6;
        tmp_29_reg_1256 <= tmp_29_fu_723_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd0 == tmp_2_fu_493_p2))) begin
        gmem_addr_1_reg_1136 <= tmp_54_fu_605_p1;
        tmp1_reg_1126 <= tmp1_fu_581_p2;
        tmp_48_reg_1118 <= tmp_48_fu_577_p1;
        tmp_50_reg_1131 <= tmp_50_fu_591_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == gmem_RVALID) & (tmp_3_fu_475_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state10) & (tmp_3_fu_475_p2 == 1'd0))) begin
        gmem_addr_read_reg_1094 <= gmem_RDATA;
        lineBuffer_0_addr_reg_1100 <= tmp_10_fu_487_p1;
        lineBuffer_1_addr_reg_1105 <= tmp_10_fu_487_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == gmem_RVALID) & (tmp_3_fu_475_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state10))) begin
        i_1_reg_1089 <= i_1_fu_481_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_2_reg_1113 <= i_2_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        j_reg_1175 <= j_fu_649_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        lastLine_2_reg_1343 <= lastLine_2_fu_1051_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == tmp_11_fu_643_p2))) begin
        lineBuffer_0_addr_2_reg_1187 <= tmp_31_0_1_fu_678_p1;
        lineBuffer_1_addr_2_reg_1193 <= tmp_31_0_1_fu_678_p1;
        lineBuffer_2_addr_1_reg_1199 <= tmp_31_0_1_fu_678_p1;
        lineBuffer_3_addr_1_reg_1205 <= tmp_31_0_1_fu_678_p1;
        or_cond2_reg_1181 <= or_cond2_fu_673_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lineBuffer_0_load_2_reg_1269 <= lineBuffer_0_q0;
        lineBuffer_1_load_2_reg_1275 <= lineBuffer_1_q0;
        lineBuffer_2_load_2_reg_1281 <= lineBuffer_2_q1;
        lineBuffer_3_load_2_reg_1287 <= lineBuffer_3_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_1_cast_reg_1057[29 : 0] <= tmp_1_cast_fu_400_p1[29 : 0];
        tmp_6_cast_reg_1062 <= tmp_6_cast_fu_404_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_gmem2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        tmp_24_0_t_reg_1146 <= tmp_24_0_t_fu_619_p2;
        tmp_24_2_t_reg_1153 <= tmp_24_2_t_fu_624_p2;
        tmp_47_reg_1142 <= tmp_47_fu_615_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage1_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_31_reg_1323 <= tmp_31_fu_940_p2;
        tmp_56_reg_1329 <= tmp_56_fu_946_p1;
        x_weight_2_2_reg_1313 <= x_weight_2_2_fu_928_p2;
        y_weight_2_2_reg_1318 <= y_weight_2_2_fu_934_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_s_reg_1071 <= tmp_s_fu_414_p2;
    end
end

always @ (*) begin
    if ((tmp_11_fu_643_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state20 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state20 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == tmp_11_reg_1171))) begin
        ap_phi_mux_row_assign_phi_fu_383_p4 = j_reg_1175;
    end else begin
        ap_phi_mux_row_assign_phi_fu_383_p4 = row_assign_reg_379;
    end
end

always @ (*) begin
    if (((tmp_2_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem2_AWREADY)) begin
        ap_sig_ioackin_gmem2_AWREADY = gmem2_AWREADY;
    end else begin
        ap_sig_ioackin_gmem2_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem2_WREADY)) begin
        ap_sig_ioackin_gmem2_WREADY = gmem2_WREADY;
    end else begin
        ap_sig_ioackin_gmem2_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_reg_ioackin_gmem2_AWREADY) & (1'b1 == ap_CS_fsm_state19))) begin
        gmem2_AWVALID = 1'b1;
    end else begin
        gmem2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        gmem2_BREADY = 1'b1;
    end else begin
        gmem2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage1_01001 == 1'b0) & (1'b0 == ap_reg_ioackin_gmem2_WREADY) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem2_WVALID = 1'b1;
    end else begin
        gmem2_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        gmem2_blk_n_AW = m_axi_gmem2_AWREADY;
    end else begin
        gmem2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        gmem2_blk_n_B = m_axi_gmem2_BVALID;
    end else begin
        gmem2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1 == 1'b0))) begin
        gmem2_blk_n_W = m_axi_gmem2_WREADY;
    end else begin
        gmem2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            gmem_ARADDR = gmem_addr_1_reg_1136;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            gmem_ARADDR = gmem_addr_reg_1080;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_reg_ioackin_gmem_ARREADY) & (1'b1 == ap_CS_fsm_state13)) | ((1'b0 == ap_reg_ioackin_gmem_ARREADY) & (1'b1 == ap_CS_fsm_state3)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage1_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd0 == tmp_11_reg_1171)) | (~((1'b0 == gmem_RVALID) & (tmp_3_fu_475_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state10) & (tmp_3_fu_475_p2 == 1'd0)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state3))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1 == 1'b0) & (1'd0 == tmp_11_reg_1171)) | ((1'b1 == ap_CS_fsm_state10) & (tmp_3_fu_475_p2 == 1'd0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1 == 1'b0))) begin
        lineBuffer_0_address0 = tmp_31_0_2_fu_716_p1;
    end else if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        lineBuffer_0_address0 = tmp_31_0_1_fu_678_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        lineBuffer_0_address0 = lineBuffer_0_addr_reg_1100;
    end else begin
        lineBuffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lineBuffer_0_address1 = lineBuffer_0_addr_2_reg_1187;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1 == 1'b0))) begin
        lineBuffer_0_address1 = tmp_19_fu_695_p1;
    end else begin
        lineBuffer_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lineBuffer_0_ce0 = 1'b1;
    end else begin
        lineBuffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lineBuffer_0_ce1 = 1'b1;
    end else begin
        lineBuffer_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((cond_reg_1076 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        lineBuffer_0_we0 = 1'b1;
    end else begin
        lineBuffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (tmp_47_reg_1142 == 2'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lineBuffer_0_we1 = 1'b1;
    end else begin
        lineBuffer_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1 == 1'b0))) begin
        lineBuffer_1_address0 = tmp_31_0_2_fu_716_p1;
    end else if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        lineBuffer_1_address0 = tmp_31_0_1_fu_678_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        lineBuffer_1_address0 = lineBuffer_1_addr_reg_1105;
    end else begin
        lineBuffer_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lineBuffer_1_address1 = lineBuffer_1_addr_2_reg_1193;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1 == 1'b0))) begin
        lineBuffer_1_address1 = tmp_19_fu_695_p1;
    end else begin
        lineBuffer_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lineBuffer_1_ce0 = 1'b1;
    end else begin
        lineBuffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lineBuffer_1_ce1 = 1'b1;
    end else begin
        lineBuffer_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'd0 == cond_reg_1076))) begin
        lineBuffer_1_we0 = 1'b1;
    end else begin
        lineBuffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (tmp_47_reg_1142 == 2'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lineBuffer_1_we1 = 1'b1;
    end else begin
        lineBuffer_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1 == 1'b0))) begin
            lineBuffer_2_address0 = tmp_19_fu_695_p1;
        end else if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lineBuffer_2_address0 = tmp_31_0_1_fu_678_p1;
        end else begin
            lineBuffer_2_address0 = 'bx;
        end
    end else begin
        lineBuffer_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lineBuffer_2_address1 = lineBuffer_2_addr_1_reg_1199;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1 == 1'b0))) begin
        lineBuffer_2_address1 = tmp_31_0_2_fu_716_p1;
    end else begin
        lineBuffer_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lineBuffer_2_ce0 = 1'b1;
    end else begin
        lineBuffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lineBuffer_2_ce1 = 1'b1;
    end else begin
        lineBuffer_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (tmp_47_reg_1142 == 2'd2) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lineBuffer_2_we1 = 1'b1;
    end else begin
        lineBuffer_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1 == 1'b0))) begin
            lineBuffer_3_address0 = tmp_19_fu_695_p1;
        end else if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lineBuffer_3_address0 = tmp_31_0_1_fu_678_p1;
        end else begin
            lineBuffer_3_address0 = 'bx;
        end
    end else begin
        lineBuffer_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lineBuffer_3_address1 = lineBuffer_3_addr_1_reg_1205;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1 == 1'b0))) begin
        lineBuffer_3_address1 = tmp_31_0_2_fu_716_p1;
    end else begin
        lineBuffer_3_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lineBuffer_3_ce0 = 1'b1;
    end else begin
        lineBuffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lineBuffer_3_ce1 = 1'b1;
    end else begin
        lineBuffer_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (tmp_47_reg_1142 == 2'd3) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lineBuffer_3_we1 = 1'b1;
    end else begin
        lineBuffer_3_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_408_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if ((~((1'b0 == gmem_RVALID) & (tmp_3_fu_475_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state10) & (tmp_3_fu_475_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((1'b0 == gmem_RVALID) & (tmp_3_fu_475_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state10) & (tmp_3_fu_475_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            if (((tmp_2_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((ap_sig_ioackin_gmem2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_block_pp0_stage0_subdone == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_11_fu_643_p2 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter0)) & (ap_block_pp0_stage0_subdone == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_block_pp0_stage0_subdone == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_11_fu_643_p2 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_block_pp0_stage1_subdone == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_block_pp0_stage1_subdone == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((gmem2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((1'b0 == gmem_RVALID) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == tmp_11_reg_1171));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((1'b0 == ap_sig_ioackin_gmem2_WREADY) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((1'b0 == gmem_RVALID) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == tmp_11_reg_1171)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((1'b0 == ap_sig_ioackin_gmem2_WREADY) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((1'b0 == gmem_RVALID) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == tmp_11_reg_1171)));
end

always @ (*) begin
    ap_block_state10 = ((1'b0 == gmem_RVALID) & (tmp_3_fu_475_p2 == 1'd0));
end

assign ap_block_state20_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_pp0_stage1_iter0 = ((1'b0 == gmem_RVALID) & (1'd0 == tmp_11_reg_1171));
end

assign ap_block_state22_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cond_fu_450_p2 = ((lastLine_reg_334 == 2'd0) ? 1'b1 : 1'b0);

assign edge_val_1_i_cast_fu_1021_p3 = ((not_or_cond2_fu_1016_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign edge_val_fu_990_p2 = (tmp_20_fu_984_p2 ^ 8'd255);

assign gmem2_AWADDR = tmp_51_fu_629_p1;

assign gmem2_WDATA = {{{{val_reg_1335}, {val_reg_1335}}, {val_reg_1335}}, {val_reg_1335}};

assign i_1_fu_481_p2 = (i_reg_345 + 11'd1);

assign i_2_fu_499_p2 = (i1_reg_368 + 11'd1);

assign j_fu_649_p2 = (ap_phi_mux_row_assign_phi_fu_383_p4 + 11'd1);

assign lastLine_2_fu_1051_p2 = (lastLine_1_reg_356 + 11'd1);

assign not_or_cond2_fu_1016_p2 = (ap_reg_pp0_iter1_or_cond2_reg_1181 ^ 1'd1);

assign or_cond2_fu_673_p2 = (tmp2_fu_667_p2 | tmp1_reg_1126);

assign p_i_fu_1008_p3 = ((tmp_27_fu_1002_p2[0:0] === 1'b1) ? 8'd0 : edge_val_fu_990_p2);

assign p_shl1_cast_fu_829_p1 = p_shl1_fu_822_p3;

assign p_shl1_fu_822_p3 = {{tmp_25_reg_1298}, {1'd0}};

assign p_shl2_cast_fu_537_p1 = tmp_41_fu_529_p3;

assign p_shl5_cast_fu_428_p1 = tmp_7_fu_420_p3;

assign p_shl6_cast_fu_440_p1 = tmp_6_fu_432_p3;

assign p_shl7_cast_fu_555_p1 = tmp_44_fu_547_p3;

assign p_shl8_cast_fu_567_p1 = tmp_45_fu_559_p3;

assign p_shl9_cast_fu_525_p1 = tmp_40_fu_517_p3;

assign p_shl_cast_fu_901_p1 = p_shl_fu_894_p3;

assign p_shl_fu_894_p3 = {{tmp_29_reg_1256}, {1'd0}};

assign row_assign_cast_fu_639_p1 = ap_phi_mux_row_assign_phi_fu_383_p4;

assign tmp1_fu_581_p2 = (tmp_5_fu_511_p2 | tmp_4_fu_505_p2);

assign tmp2_fu_667_p2 = (tmp_13_fu_661_p2 | tmp_12_fu_655_p2);

assign tmp3_cast_fu_866_p1 = tmp3_reg_1303;

assign tmp3_fu_789_p2 = (tmp_32_0_2_cast_fu_766_p1 + tmp_321_cast_fu_749_p1);

assign tmp_10_fu_487_p1 = i_reg_345;

assign tmp_11_fu_643_p2 = ((ap_phi_mux_row_assign_phi_fu_383_p4 == 11'd1920) ? 1'b1 : 1'b0);

assign tmp_12_fu_655_p2 = ((ap_phi_mux_row_assign_phi_fu_383_p4 == 11'd0) ? 1'b1 : 1'b0);

assign tmp_13_fu_661_p2 = ((ap_phi_mux_row_assign_phi_fu_383_p4 == 11'd1919) ? 1'b1 : 1'b0);

assign tmp_14_fu_950_p2 = (($signed(x_weight_2_2_reg_1313) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign tmp_16_fu_444_p2 = (p_shl5_cast_fu_428_p1 - p_shl6_cast_fu_440_p1);

assign tmp_17_fu_967_p2 = (($signed(y_weight_2_2_reg_1318) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign tmp_18_fu_686_p2 = ($signed(12'd4095) + $signed(row_assign_cast_reg_1166));

assign tmp_19_fu_695_p1 = $unsigned(tmp_301_cast_fu_691_p1);

assign tmp_1_cast_fu_400_p1 = tmp_1_fu_390_p4;

assign tmp_1_fu_390_p4 = {{out_pix[31:2]}};

assign tmp_20_fu_984_p2 = (tmp_36_fu_977_p3 + tmp_33_fu_960_p3);

assign tmp_21_fu_996_p2 = ((tmp_20_fu_984_p2 < 8'd55) ? 1'b1 : 1'b0);

assign tmp_24_0_t_fu_619_p2 = ($signed(2'd3) + $signed(tmp_48_reg_1118));

assign tmp_24_2_t_fu_624_p2 = (2'd1 + tmp_48_reg_1118);

assign tmp_27_fu_1002_p2 = ((tmp_20_fu_984_p2 > 8'd155) ? 1'b1 : 1'b0);

assign tmp_2_fu_493_p2 = ((i1_reg_368 == 11'd1080) ? 1'b1 : 1'b0);

assign tmp_301_cast_fu_691_p1 = $signed(tmp_18_fu_686_p2);

assign tmp_30_fu_456_p1 = $signed(tmp_16_fu_444_p2);

assign tmp_31_0_1_fu_678_p1 = ap_phi_mux_row_assign_phi_fu_383_p4;

assign tmp_31_0_2_fu_716_p1 = j_reg_1175;

assign tmp_31_fu_940_p2 = (tmp_37_fu_911_p6 + tmp_55_fu_924_p1);

assign tmp_321_cast_fu_749_p1 = tmp_22_fu_736_p6;

assign tmp_32_0_2_cast_fu_766_p1 = tmp_24_fu_753_p6;

assign tmp_32_2_2_cast_fu_920_p1 = tmp_37_fu_911_p6;

assign tmp_32_2_cast_fu_879_p1 = tmp_28_reg_1308;

assign tmp_32_fu_955_p2 = (8'd0 - tmp_31_reg_1323);

assign tmp_33_fu_960_p3 = ((tmp_14_fu_950_p2[0:0] === 1'b1) ? tmp_31_reg_1323 : tmp_32_fu_955_p2);

assign tmp_34_fu_460_p2 = ($signed(tmp_30_fu_456_p1) + $signed(tmp_6_cast_reg_1062));

assign tmp_35_1_2_cast_fu_856_p1 = tmp_35_1_2_fu_848_p3;

assign tmp_35_1_2_fu_848_p3 = {{tmp_26_fu_839_p6}, {1'd0}};

assign tmp_35_fu_972_p2 = (8'd0 - tmp_56_reg_1329);

assign tmp_36_fu_977_p3 = ((tmp_17_fu_967_p2[0:0] === 1'b1) ? tmp_56_reg_1329 : tmp_35_fu_972_p2);

assign tmp_37_0_1_cast_fu_815_p1 = tmp_37_0_1_fu_808_p3;

assign tmp_37_0_1_fu_808_p3 = {{tmp_23_reg_1231}, {1'd0}};

assign tmp_38_fu_1029_p2 = (tmp_21_fu_996_p2 | ap_reg_pp0_iter1_or_cond2_reg_1181);

assign tmp_39_fu_465_p1 = $signed(tmp_34_fu_460_p2);

assign tmp_3_fu_475_p2 = ((i_reg_345 == 11'd1920) ? 1'b1 : 1'b0);

assign tmp_40_fu_517_p3 = {{i1_reg_368}, {11'd0}};

assign tmp_41_fu_529_p3 = {{i1_reg_368}, {7'd0}};

assign tmp_43_fu_541_p2 = (p_shl9_cast_fu_525_p1 - p_shl2_cast_fu_537_p1);

assign tmp_44_fu_547_p3 = {{lastLine_1_reg_356}, {11'd0}};

assign tmp_45_fu_559_p3 = {{lastLine_1_reg_356}, {7'd0}};

assign tmp_46_fu_571_p2 = (p_shl7_cast_fu_555_p1 - p_shl8_cast_fu_567_p1);

assign tmp_47_fu_615_p1 = lastLine_1_reg_356[1:0];

assign tmp_48_fu_577_p1 = i1_reg_368[1:0];

assign tmp_49_fu_587_p1 = $signed(tmp_43_fu_541_p2);

assign tmp_4_fu_505_p2 = ((i1_reg_368 == 11'd0) ? 1'b1 : 1'b0);

assign tmp_50_fu_591_p2 = ($signed(tmp_1_cast_reg_1057) + $signed(tmp_49_fu_587_p1));

assign tmp_51_fu_629_p1 = $signed(tmp_50_reg_1131);

assign tmp_52_fu_596_p1 = $signed(tmp_46_fu_571_p2);

assign tmp_53_fu_600_p2 = ($signed(tmp_6_cast_reg_1062) + $signed(tmp_52_fu_596_p1));

assign tmp_54_fu_605_p1 = $signed(tmp_53_fu_600_p2);

assign tmp_55_fu_924_p1 = x_weight_2_fu_882_p2[7:0];

assign tmp_56_fu_946_p1 = y_weight_2_2_fu_934_p2[7:0];

assign tmp_5_fu_511_p2 = ((i1_reg_368 == 11'd1079) ? 1'b1 : 1'b0);

assign tmp_6_cast_fu_404_p1 = $signed(inter_pix);

assign tmp_6_fu_432_p3 = {{lastLine_reg_334}, {7'd0}};

assign tmp_7_fu_420_p3 = {{lastLine_reg_334}, {11'd0}};

assign tmp_fu_408_p2 = ((lastLine_reg_334 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_s_fu_414_p2 = (lastLine_reg_334 + 2'd1);

assign val_fu_1034_p3 = ((tmp_38_fu_1029_p2[0:0] === 1'b1) ? edge_val_1_i_cast_fu_1021_p3 : p_i_fu_1008_p3);

assign x_weight_0_2_cast_fu_819_p1 = $signed(x_weight_0_2_reg_1293);

assign x_weight_0_2_fu_770_p2 = (tmp_32_0_2_cast_fu_766_p1 - tmp_321_cast_fu_749_p1);

assign x_weight_1_1_fu_833_p2 = ($signed(x_weight_0_2_cast_fu_819_p1) - $signed(p_shl1_cast_fu_829_p1));

assign x_weight_1_2_fu_860_p2 = (x_weight_1_1_fu_833_p2 + tmp_35_1_2_cast_fu_856_p1);

assign x_weight_2_2_fu_928_p2 = (tmp_32_2_2_cast_fu_920_p1 + x_weight_2_fu_882_p2);

assign x_weight_2_fu_882_p2 = (x_weight_1_2_fu_860_p2 - tmp_32_2_cast_fu_879_p1);

assign y_weight_1_2_cast_fu_875_p1 = y_weight_1_2_fu_869_p2;

assign y_weight_1_2_fu_869_p2 = (tmp_37_0_1_cast_fu_815_p1 + tmp3_cast_fu_866_p1);

assign y_weight_2_1_fu_905_p2 = (y_weight_2_fu_888_p2 - p_shl_cast_fu_901_p1);

assign y_weight_2_2_fu_934_p2 = (y_weight_2_1_fu_905_p2 - tmp_32_2_2_cast_fu_920_p1);

assign y_weight_2_fu_888_p2 = (y_weight_1_2_cast_fu_875_p1 - tmp_32_2_cast_fu_879_p1);

always @ (posedge ap_clk) begin
    tmp_1_cast_reg_1057[31:30] <= 2'b00;
    row_assign_cast_reg_1166[11] <= 1'b0;
end

endmodule //sobel_filter
